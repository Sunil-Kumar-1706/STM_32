
Servo_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004884  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004a14  08004a14  00005a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab0  08004ab0  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004ab0  08004ab0  00005ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ab8  08004ab8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ab8  08004ab8  00005ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004abc  08004abc  00005abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004ac0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000068  08004b28  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08004b28  000062ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d868  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001afe  00000000  00000000  00013900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00015400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009fd  00000000  00000000  000160d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026996  00000000  00000000  00016acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb38  00000000  00000000  0003d463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f214d  00000000  00000000  0004bf9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e0e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003adc  00000000  00000000  0013e12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00141c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080049fc 	.word	0x080049fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080049fc 	.word	0x080049fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <setServoAngle>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);

// Set servo to specific angle
void setServoAngle(int angle) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b09c      	sub	sp, #112	@ 0x70
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    // Limit angle to min/max
    if (angle < minLimit) angle = minLimit;
 80005b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <setServoAngle+0x88>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	da02      	bge.n	80005c4 <setServoAngle+0x18>
 80005be:	4b1d      	ldr	r3, [pc, #116]	@ (8000634 <setServoAngle+0x88>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	607b      	str	r3, [r7, #4]
    if (angle > maxLimit) angle = maxLimit;
 80005c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <setServoAngle+0x8c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	dd02      	ble.n	80005d4 <setServoAngle+0x28>
 80005ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000638 <setServoAngle+0x8c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	607b      	str	r3, [r7, #4]

    // Map 0–180° → 1000–2000 µs PWM pulse
    uint16_t pulse = 1000 + ((angle * 1000) / 180);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005da:	fb02 f303 	mul.w	r3, r2, r3
 80005de:	4a17      	ldr	r2, [pc, #92]	@ (800063c <setServoAngle+0x90>)
 80005e0:	fb82 1203 	smull	r1, r2, r2, r3
 80005e4:	441a      	add	r2, r3
 80005e6:	11d2      	asrs	r2, r2, #7
 80005e8:	17db      	asrs	r3, r3, #31
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80005f2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 80005f6:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <setServoAngle+0x94>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80005fe:	635a      	str	r2, [r3, #52]	@ 0x34

    // Print angle and pulse to UART
    char msg[100];
    sprintf(msg, "Angle: %d deg | Pulse: %d us\r\n", angle, pulse);
 8000600:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000604:	f107 0008 	add.w	r0, r7, #8
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	490e      	ldr	r1, [pc, #56]	@ (8000644 <setServoAngle+0x98>)
 800060c:	f003 fd56 	bl	80040bc <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff fddb 	bl	80001d0 <strlen>
 800061a:	4603      	mov	r3, r0
 800061c:	b29a      	uxth	r2, r3
 800061e:	f107 0108 	add.w	r1, r7, #8
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	4808      	ldr	r0, [pc, #32]	@ (8000648 <setServoAngle+0x9c>)
 8000628:	f002 ffeb 	bl	8003602 <HAL_UART_Transmit>
}
 800062c:	bf00      	nop
 800062e:	3770      	adds	r7, #112	@ 0x70
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000158 	.word	0x20000158
 8000638:	20000008 	.word	0x20000008
 800063c:	b60b60b7 	.word	0xb60b60b7
 8000640:	20000084 	.word	0x20000084
 8000644:	08004a14 	.word	0x08004a14
 8000648:	200000d0 	.word	0x200000d0

0800064c <main>:

int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
    HAL_Init();                // Initialize HAL library
 8000650:	f000 faf6 	bl	8000c40 <HAL_Init>
    SystemClock_Config();      // Configure system clock
 8000654:	f000 f83c 	bl	80006d0 <SystemClock_Config>
    MX_GPIO_Init();            // Initialize GPIO
 8000658:	f000 f90c 	bl	8000874 <MX_GPIO_Init>
    MX_USART2_UART_Init();     // Initialize UART
 800065c:	f000 f8e0 	bl	8000820 <MX_USART2_UART_Init>
    MX_TIM1_Init();            // Initialize Timer 1 for PWM
 8000660:	f000 f888 	bl	8000774 <MX_TIM1_Init>

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Start PWM
 8000664:	2100      	movs	r1, #0
 8000666:	4814      	ldr	r0, [pc, #80]	@ (80006b8 <main+0x6c>)
 8000668:	f002 f9c2 	bl	80029f0 <HAL_TIM_PWM_Start>
    setServoAngle(currentAngle);              // Set initial servo angle
 800066c:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <main+0x70>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ff9b 	bl	80005ac <setServoAngle>

    while (1)
    {
        // Check if button is pressed
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8000676:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800067a:	4811      	ldr	r0, [pc, #68]	@ (80006c0 <main+0x74>)
 800067c:	f000 fe10 	bl	80012a0 <HAL_GPIO_ReadPin>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1f7      	bne.n	8000676 <main+0x2a>
            targetAngle += 10;                // Increase angle
 8000686:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <main+0x78>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	330a      	adds	r3, #10
 800068c:	4a0d      	ldr	r2, [pc, #52]	@ (80006c4 <main+0x78>)
 800068e:	6013      	str	r3, [r2, #0]
            if (targetAngle > maxLimit) targetAngle = minLimit; // Wrap around
 8000690:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <main+0x78>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <main+0x7c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	429a      	cmp	r2, r3
 800069a:	dd03      	ble.n	80006a4 <main+0x58>
 800069c:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <main+0x80>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a08      	ldr	r2, [pc, #32]	@ (80006c4 <main+0x78>)
 80006a2:	6013      	str	r3, [r2, #0]
            setServoAngle(targetAngle);       // Move servo
 80006a4:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <main+0x78>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff7f 	bl	80005ac <setServoAngle>
            HAL_Delay(300);                   // Debounce delay
 80006ae:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80006b2:	f000 fb41 	bl	8000d38 <HAL_Delay>
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80006b6:	e7de      	b.n	8000676 <main+0x2a>
 80006b8:	20000084 	.word	0x20000084
 80006bc:	20000000 	.word	0x20000000
 80006c0:	48000800 	.word	0x48000800
 80006c4:	20000004 	.word	0x20000004
 80006c8:	20000008 	.word	0x20000008
 80006cc:	20000158 	.word	0x20000158

080006d0 <SystemClock_Config>:
    }
}

// Configure system clock
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b096      	sub	sp, #88	@ 0x58
 80006d4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2244      	movs	r2, #68	@ 0x44
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 fd0e 	bl	8004100 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	463b      	mov	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

    // Voltage scaling
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006f6:	f000 fe11 	bl	800131c <HAL_PWREx_ControlVoltageScaling>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x34>
        Error_Handler();
 8000700:	f000 f91e 	bl	8000940 <Error_Handler>

    // Configure HSI oscillator and PLL
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000704:	2302      	movs	r3, #2
 8000706:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000708:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800070c:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070e:	2310      	movs	r3, #16
 8000710:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000716:	2302      	movs	r3, #2
 8000718:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLM = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLN = 10;
 800071e:	230a      	movs	r3, #10
 8000720:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000722:	2307      	movs	r3, #7
 8000724:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000726:	2302      	movs	r3, #2
 8000728:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fe48 	bl	80013c8 <HAL_RCC_OscConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x72>
 800073e:	f000 f8ff 	bl	8000940 <Error_Handler>

    // Set clocks for CPU, AHB, APB
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	230f      	movs	r3, #15
 8000744:	603b      	str	r3, [r7, #0]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000746:	2303      	movs	r3, #3
 8000748:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) Error_Handler();
 8000756:	463b      	mov	r3, r7
 8000758:	2104      	movs	r1, #4
 800075a:	4618      	mov	r0, r3
 800075c:	f001 fa10 	bl	8001b80 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x9a>
 8000766:	f000 f8eb 	bl	8000940 <Error_Handler>
}
 800076a:	bf00      	nop
 800076c:	3758      	adds	r7, #88	@ 0x58
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <MX_TIM1_Init>:

// Initialize Timer 1 for PWM
static void MX_TIM1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b096      	sub	sp, #88	@ 0x58
 8000778:	af00      	add	r7, sp, #0
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000786:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
 8000796:	615a      	str	r2, [r3, #20]
 8000798:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	222c      	movs	r2, #44	@ 0x2c
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f003 fcad 	bl	8004100 <memset>

    htim1.Instance = TIM1;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <MX_TIM1_Init+0xa4>)
 80007a8:	4a1c      	ldr	r2, [pc, #112]	@ (800081c <MX_TIM1_Init+0xa8>)
 80007aa:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 79;          // Timer clock division
 80007ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <MX_TIM1_Init+0xa4>)
 80007ae:	224f      	movs	r2, #79	@ 0x4f
 80007b0:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b2:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_TIM1_Init+0xa4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 65535;          // Max count
 80007b8:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <MX_TIM1_Init+0xa4>)
 80007ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007be:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c0:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <MX_TIM1_Init+0xa4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 80007c6:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <MX_TIM1_Init+0xa4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007cc:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <MX_TIM1_Init+0xa4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) Error_Handler();
 80007d2:	4811      	ldr	r0, [pc, #68]	@ (8000818 <MX_TIM1_Init+0xa4>)
 80007d4:	f002 f8b4 	bl	8002940 <HAL_TIM_PWM_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM1_Init+0x6e>
 80007de:	f000 f8af 	bl	8000940 <Error_Handler>

    // PWM channel configuration
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e2:	2360      	movs	r3, #96	@ 0x60
 80007e4:	633b      	str	r3, [r7, #48]	@ 0x30
    sConfigOC.Pulse = 0;                // Initial pulse
 80007e6:	2300      	movs	r3, #0
 80007e8:	637b      	str	r3, [r7, #52]	@ 0x34
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ea:	2300      	movs	r3, #0
 80007ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 80007f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007f6:	2200      	movs	r2, #0
 80007f8:	4619      	mov	r1, r3
 80007fa:	4807      	ldr	r0, [pc, #28]	@ (8000818 <MX_TIM1_Init+0xa4>)
 80007fc:	f002 f9fe 	bl	8002bfc <HAL_TIM_PWM_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM1_Init+0x96>
 8000806:	f000 f89b 	bl	8000940 <Error_Handler>

    HAL_TIM_MspPostInit(&htim1);
 800080a:	4803      	ldr	r0, [pc, #12]	@ (8000818 <MX_TIM1_Init+0xa4>)
 800080c:	f000 f8e2 	bl	80009d4 <HAL_TIM_MspPostInit>
}
 8000810:	bf00      	nop
 8000812:	3758      	adds	r7, #88	@ 0x58
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000084 	.word	0x20000084
 800081c:	40012c00 	.word	0x40012c00

08000820 <MX_USART2_UART_Init>:

// Initialize UART2
static void MX_USART2_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000824:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <MX_USART2_UART_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800082a:	4b10      	ldr	r3, [pc, #64]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) Error_Handler();
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000858:	f002 fe85 	bl	8003566 <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USART2_UART_Init+0x46>
 8000862:	f000 f86d 	bl	8000940 <Error_Handler>
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000d0 	.word	0x200000d0
 8000870:	40004400 	.word	0x40004400

08000874 <MX_GPIO_Init>:

// Initialize GPIO pins
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	@ 0x28
 8000878:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	4b2b      	ldr	r3, [pc, #172]	@ (8000938 <MX_GPIO_Init+0xc4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	4a2a      	ldr	r2, [pc, #168]	@ (8000938 <MX_GPIO_Init+0xc4>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000896:	4b28      	ldr	r3, [pc, #160]	@ (8000938 <MX_GPIO_Init+0xc4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	4b25      	ldr	r3, [pc, #148]	@ (8000938 <MX_GPIO_Init+0xc4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	4a24      	ldr	r2, [pc, #144]	@ (8000938 <MX_GPIO_Init+0xc4>)
 80008a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ae:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <MX_GPIO_Init+0xc4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <MX_GPIO_Init+0xc4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	4a1e      	ldr	r2, [pc, #120]	@ (8000938 <MX_GPIO_Init+0xc4>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <MX_GPIO_Init+0xc4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <MX_GPIO_Init+0xc4>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	4a18      	ldr	r2, [pc, #96]	@ (8000938 <MX_GPIO_Init+0xc4>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008de:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <MX_GPIO_Init+0xc4>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

    // LED pin
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2120      	movs	r1, #32
 80008ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f2:	f000 fced 	bl	80012d0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LD2_Pin;
 80008f6:	2320      	movs	r3, #32
 80008f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000910:	f000 fb1c 	bl	8000f4c <HAL_GPIO_Init>

    // Button pin
    GPIO_InitStruct.Pin = B1_Pin;
 8000914:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800091a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800091e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4804      	ldr	r0, [pc, #16]	@ (800093c <MX_GPIO_Init+0xc8>)
 800092c:	f000 fb0e 	bl	8000f4c <HAL_GPIO_Init>
}
 8000930:	bf00      	nop
 8000932:	3728      	adds	r7, #40	@ 0x28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40021000 	.word	0x40021000
 800093c:	48000800 	.word	0x48000800

08000940 <Error_Handler>:

// Error handler (infinite loop)
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
    __disable_irq();
    while (1) {}
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <Error_Handler+0x8>

0800094c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <HAL_MspInit+0x44>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000956:	4a0e      	ldr	r2, [pc, #56]	@ (8000990 <HAL_MspInit+0x44>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6613      	str	r3, [r2, #96]	@ 0x60
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <HAL_MspInit+0x44>)
 8000960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <HAL_MspInit+0x44>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800096e:	4a08      	ldr	r2, [pc, #32]	@ (8000990 <HAL_MspInit+0x44>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000974:	6593      	str	r3, [r2, #88]	@ 0x58
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_MspInit+0x44>)
 8000978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800097a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000

08000994 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0a      	ldr	r2, [pc, #40]	@ (80009cc <HAL_TIM_PWM_MspInit+0x38>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d10b      	bne.n	80009be <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009a6:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009aa:	4a09      	ldr	r2, [pc, #36]	@ (80009d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80009ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80009b2:	4b07      	ldr	r3, [pc, #28]	@ (80009d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80009b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80009be:	bf00      	nop
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40012c00 	.word	0x40012c00
 80009d0:	40021000 	.word	0x40021000

080009d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a12      	ldr	r2, [pc, #72]	@ (8000a3c <HAL_TIM_MspPostInit+0x68>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d11d      	bne.n	8000a32 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <HAL_TIM_MspPostInit+0x6c>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	4a11      	ldr	r2, [pc, #68]	@ (8000a40 <HAL_TIM_MspPostInit+0x6c>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a02:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <HAL_TIM_MspPostInit+0x6c>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2e:	f000 fa8d 	bl	8000f4c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a32:	bf00      	nop
 8000a34:	3720      	adds	r7, #32
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40012c00 	.word	0x40012c00
 8000a40:	40021000 	.word	0x40021000

08000a44 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b0ac      	sub	sp, #176	@ 0xb0
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2288      	movs	r2, #136	@ 0x88
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f003 fb4b 	bl	8004100 <memset>
  if(huart->Instance==USART2)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a21      	ldr	r2, [pc, #132]	@ (8000af4 <HAL_UART_MspInit+0xb0>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d13b      	bne.n	8000aec <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 faa1 	bl	8001fc8 <HAL_RCCEx_PeriphCLKConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a8c:	f7ff ff58 	bl	8000940 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a90:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <HAL_UART_MspInit+0xb4>)
 8000a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a94:	4a18      	ldr	r2, [pc, #96]	@ (8000af8 <HAL_UART_MspInit+0xb4>)
 8000a96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a9c:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <HAL_UART_MspInit+0xb4>)
 8000a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <HAL_UART_MspInit+0xb4>)
 8000aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aac:	4a12      	ldr	r2, [pc, #72]	@ (8000af8 <HAL_UART_MspInit+0xb4>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab4:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <HAL_UART_MspInit+0xb4>)
 8000ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae8:	f000 fa30 	bl	8000f4c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000aec:	bf00      	nop
 8000aee:	37b0      	adds	r7, #176	@ 0xb0
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40004400 	.word	0x40004400
 8000af8:	40021000 	.word	0x40021000

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <NMI_Handler+0x4>

08000b04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <MemManage_Handler+0x4>

08000b14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b52:	f000 f8d1 	bl	8000cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b64:	4a14      	ldr	r2, [pc, #80]	@ (8000bb8 <_sbrk+0x5c>)
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <_sbrk+0x60>)
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b70:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b78:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <_sbrk+0x64>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	@ (8000bc4 <_sbrk+0x68>)
 8000b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7e:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d207      	bcs.n	8000b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b8c:	f003 fac0 	bl	8004110 <__errno>
 8000b90:	4603      	mov	r3, r0
 8000b92:	220c      	movs	r2, #12
 8000b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	e009      	b.n	8000bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b9c:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba2:	4b07      	ldr	r3, [pc, #28]	@ (8000bc0 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	4a05      	ldr	r2, [pc, #20]	@ (8000bc0 <_sbrk+0x64>)
 8000bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bae:	68fb      	ldr	r3, [r7, #12]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20018000 	.word	0x20018000
 8000bbc:	00000400 	.word	0x00000400
 8000bc0:	2000015c 	.word	0x2000015c
 8000bc4:	200002b0 	.word	0x200002b0

08000bc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <SystemInit+0x20>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bd2:	4a05      	ldr	r2, [pc, #20]	@ (8000be8 <SystemInit+0x20>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf0:	f7ff ffea 	bl	8000bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf6:	490d      	ldr	r1, [pc, #52]	@ (8000c2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c30 <LoopForever+0xe>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c38 <LoopForever+0x16>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f003 fa7f 	bl	800411c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c1e:	f7ff fd15 	bl	800064c <main>

08000c22 <LoopForever>:

LoopForever:
    b LoopForever
 8000c22:	e7fe      	b.n	8000c22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c30:	08004ac0 	.word	0x08004ac0
  ldr r2, =_sbss
 8000c34:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c38:	200002ac 	.word	0x200002ac

08000c3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC1_2_IRQHandler>
	...

08000c40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c46:	2300      	movs	r3, #0
 8000c48:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <HAL_Init+0x3c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c7c <HAL_Init+0x3c>)
 8000c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c54:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c56:	2003      	movs	r0, #3
 8000c58:	f000 f944 	bl	8000ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f000 f80f 	bl	8000c80 <HAL_InitTick>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d002      	beq.n	8000c6e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	71fb      	strb	r3, [r7, #7]
 8000c6c:	e001      	b.n	8000c72 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c6e:	f7ff fe6d 	bl	800094c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c72:	79fb      	ldrb	r3, [r7, #7]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40022000 	.word	0x40022000

08000c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c8c:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <HAL_InitTick+0x6c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d023      	beq.n	8000cdc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c94:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <HAL_InitTick+0x70>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <HAL_InitTick+0x6c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f941 	bl	8000f32 <HAL_SYSTICK_Config>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10f      	bne.n	8000cd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d809      	bhi.n	8000cd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f000 f919 	bl	8000efa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <HAL_InitTick+0x74>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	e007      	b.n	8000ce0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	73fb      	strb	r3, [r7, #15]
 8000cd4:	e004      	b.n	8000ce0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	73fb      	strb	r3, [r7, #15]
 8000cda:	e001      	b.n	8000ce0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000014 	.word	0x20000014
 8000cf0:	2000000c 	.word	0x2000000c
 8000cf4:	20000010 	.word	0x20000010

08000cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <HAL_IncTick+0x20>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <HAL_IncTick+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a04      	ldr	r2, [pc, #16]	@ (8000d1c <HAL_IncTick+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000014 	.word	0x20000014
 8000d1c:	20000160 	.word	0x20000160

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b03      	ldr	r3, [pc, #12]	@ (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000160 	.word	0x20000160

08000d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d40:	f7ff ffee 	bl	8000d20 <HAL_GetTick>
 8000d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d50:	d005      	beq.n	8000d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d52:	4b0a      	ldr	r3, [pc, #40]	@ (8000d7c <HAL_Delay+0x44>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d5e:	bf00      	nop
 8000d60:	f7ff ffde 	bl	8000d20 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d8f7      	bhi.n	8000d60 <HAL_Delay+0x28>
  {
  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000014 	.word	0x20000014

08000d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db2:	4a04      	ldr	r2, [pc, #16]	@ (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	60d3      	str	r3, [r2, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 0307 	and.w	r3, r3, #7
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	@ (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	@ (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	@ 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	@ 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000eb0:	d301      	bcc.n	8000eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00f      	b.n	8000ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <SysTick_Config+0x40>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f7ff ff8e 	bl	8000de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec8:	4b05      	ldr	r3, [pc, #20]	@ (8000ee0 <SysTick_Config+0x40>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ece:	4b04      	ldr	r3, [pc, #16]	@ (8000ee0 <SysTick_Config+0x40>)
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	e000e010 	.word	0xe000e010

08000ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff47 	bl	8000d80 <__NVIC_SetPriorityGrouping>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0c:	f7ff ff5c 	bl	8000dc8 <__NVIC_GetPriorityGrouping>
 8000f10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	68b9      	ldr	r1, [r7, #8]
 8000f16:	6978      	ldr	r0, [r7, #20]
 8000f18:	f7ff ff8e 	bl	8000e38 <NVIC_EncodePriority>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff5d 	bl	8000de4 <__NVIC_SetPriority>
}
 8000f2a:	bf00      	nop
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ffb0 	bl	8000ea0 <SysTick_Config>
 8000f40:	4603      	mov	r3, r0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5a:	e17f      	b.n	800125c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	2101      	movs	r1, #1
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	fa01 f303 	lsl.w	r3, r1, r3
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 8171 	beq.w	8001256 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d005      	beq.n	8000f8c <HAL_GPIO_Init+0x40>
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d130      	bne.n	8000fee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	68da      	ldr	r2, [r3, #12]
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	091b      	lsrs	r3, r3, #4
 8000fd8:	f003 0201 	and.w	r2, r3, #1
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d118      	bne.n	800102c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001000:	2201      	movs	r2, #1
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	08db      	lsrs	r3, r3, #3
 8001016:	f003 0201 	and.w	r2, r3, #1
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b03      	cmp	r3, #3
 8001036:	d017      	beq.n	8001068 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2203      	movs	r2, #3
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d123      	bne.n	80010bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	08da      	lsrs	r2, r3, #3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3208      	adds	r2, #8
 800107c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	220f      	movs	r2, #15
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	691a      	ldr	r2, [r3, #16]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	08da      	lsrs	r2, r3, #3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3208      	adds	r2, #8
 80010b6:	6939      	ldr	r1, [r7, #16]
 80010b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0203 	and.w	r2, r3, #3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 80ac 	beq.w	8001256 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	4b5f      	ldr	r3, [pc, #380]	@ (800127c <HAL_GPIO_Init+0x330>)
 8001100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001102:	4a5e      	ldr	r2, [pc, #376]	@ (800127c <HAL_GPIO_Init+0x330>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6613      	str	r3, [r2, #96]	@ 0x60
 800110a:	4b5c      	ldr	r3, [pc, #368]	@ (800127c <HAL_GPIO_Init+0x330>)
 800110c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001116:	4a5a      	ldr	r2, [pc, #360]	@ (8001280 <HAL_GPIO_Init+0x334>)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	3302      	adds	r3, #2
 800111e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	220f      	movs	r2, #15
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001140:	d025      	beq.n	800118e <HAL_GPIO_Init+0x242>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4f      	ldr	r2, [pc, #316]	@ (8001284 <HAL_GPIO_Init+0x338>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d01f      	beq.n	800118a <HAL_GPIO_Init+0x23e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4e      	ldr	r2, [pc, #312]	@ (8001288 <HAL_GPIO_Init+0x33c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d019      	beq.n	8001186 <HAL_GPIO_Init+0x23a>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4d      	ldr	r2, [pc, #308]	@ (800128c <HAL_GPIO_Init+0x340>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d013      	beq.n	8001182 <HAL_GPIO_Init+0x236>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4c      	ldr	r2, [pc, #304]	@ (8001290 <HAL_GPIO_Init+0x344>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d00d      	beq.n	800117e <HAL_GPIO_Init+0x232>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4b      	ldr	r2, [pc, #300]	@ (8001294 <HAL_GPIO_Init+0x348>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d007      	beq.n	800117a <HAL_GPIO_Init+0x22e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4a      	ldr	r2, [pc, #296]	@ (8001298 <HAL_GPIO_Init+0x34c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d101      	bne.n	8001176 <HAL_GPIO_Init+0x22a>
 8001172:	2306      	movs	r3, #6
 8001174:	e00c      	b.n	8001190 <HAL_GPIO_Init+0x244>
 8001176:	2307      	movs	r3, #7
 8001178:	e00a      	b.n	8001190 <HAL_GPIO_Init+0x244>
 800117a:	2305      	movs	r3, #5
 800117c:	e008      	b.n	8001190 <HAL_GPIO_Init+0x244>
 800117e:	2304      	movs	r3, #4
 8001180:	e006      	b.n	8001190 <HAL_GPIO_Init+0x244>
 8001182:	2303      	movs	r3, #3
 8001184:	e004      	b.n	8001190 <HAL_GPIO_Init+0x244>
 8001186:	2302      	movs	r3, #2
 8001188:	e002      	b.n	8001190 <HAL_GPIO_Init+0x244>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <HAL_GPIO_Init+0x244>
 800118e:	2300      	movs	r3, #0
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	f002 0203 	and.w	r2, r2, #3
 8001196:	0092      	lsls	r2, r2, #2
 8001198:	4093      	lsls	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011a0:	4937      	ldr	r1, [pc, #220]	@ (8001280 <HAL_GPIO_Init+0x334>)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011ae:	4b3b      	ldr	r3, [pc, #236]	@ (800129c <HAL_GPIO_Init+0x350>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011d2:	4a32      	ldr	r2, [pc, #200]	@ (800129c <HAL_GPIO_Init+0x350>)
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011d8:	4b30      	ldr	r3, [pc, #192]	@ (800129c <HAL_GPIO_Init+0x350>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011fc:	4a27      	ldr	r2, [pc, #156]	@ (800129c <HAL_GPIO_Init+0x350>)
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001202:	4b26      	ldr	r3, [pc, #152]	@ (800129c <HAL_GPIO_Init+0x350>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	43db      	mvns	r3, r3
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001226:	4a1d      	ldr	r2, [pc, #116]	@ (800129c <HAL_GPIO_Init+0x350>)
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800122c:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <HAL_GPIO_Init+0x350>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001250:	4a12      	ldr	r2, [pc, #72]	@ (800129c <HAL_GPIO_Init+0x350>)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3301      	adds	r3, #1
 800125a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa22 f303 	lsr.w	r3, r2, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	f47f ae78 	bne.w	8000f5c <HAL_GPIO_Init+0x10>
  }
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	371c      	adds	r7, #28
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	40010000 	.word	0x40010000
 8001284:	48000400 	.word	0x48000400
 8001288:	48000800 	.word	0x48000800
 800128c:	48000c00 	.word	0x48000c00
 8001290:	48001000 	.word	0x48001000
 8001294:	48001400 	.word	0x48001400
 8001298:	48001800 	.word	0x48001800
 800129c:	40010400 	.word	0x40010400

080012a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	887b      	ldrh	r3, [r7, #2]
 80012b2:	4013      	ands	r3, r2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d002      	beq.n	80012be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012b8:	2301      	movs	r3, #1
 80012ba:	73fb      	strb	r3, [r7, #15]
 80012bc:	e001      	b.n	80012c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	807b      	strh	r3, [r7, #2]
 80012dc:	4613      	mov	r3, r2
 80012de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e0:	787b      	ldrb	r3, [r7, #1]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012ec:	e002      	b.n	80012f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001304:	4b04      	ldr	r3, [pc, #16]	@ (8001318 <HAL_PWREx_GetVoltageRange+0x18>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40007000 	.word	0x40007000

0800131c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800132a:	d130      	bne.n	800138e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800132c:	4b23      	ldr	r3, [pc, #140]	@ (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001338:	d038      	beq.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800133a:	4b20      	ldr	r3, [pc, #128]	@ (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001342:	4a1e      	ldr	r2, [pc, #120]	@ (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001344:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001348:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800134a:	4b1d      	ldr	r3, [pc, #116]	@ (80013c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2232      	movs	r2, #50	@ 0x32
 8001350:	fb02 f303 	mul.w	r3, r2, r3
 8001354:	4a1b      	ldr	r2, [pc, #108]	@ (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001356:	fba2 2303 	umull	r2, r3, r2, r3
 800135a:	0c9b      	lsrs	r3, r3, #18
 800135c:	3301      	adds	r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001360:	e002      	b.n	8001368 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	3b01      	subs	r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001368:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001370:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001374:	d102      	bne.n	800137c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f2      	bne.n	8001362 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800137c:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001384:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001388:	d110      	bne.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e00f      	b.n	80013ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800138e:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800139a:	d007      	beq.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800139c:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013a4:	4a05      	ldr	r2, [pc, #20]	@ (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40007000 	.word	0x40007000
 80013c0:	2000000c 	.word	0x2000000c
 80013c4:	431bde83 	.word	0x431bde83

080013c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e3ca      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013da:	4b97      	ldr	r3, [pc, #604]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013e4:	4b94      	ldr	r3, [pc, #592]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 80e4 	beq.w	80015c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <HAL_RCC_OscConfig+0x4a>
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	2b0c      	cmp	r3, #12
 8001406:	f040 808b 	bne.w	8001520 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	2b01      	cmp	r3, #1
 800140e:	f040 8087 	bne.w	8001520 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001412:	4b89      	ldr	r3, [pc, #548]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d005      	beq.n	800142a <HAL_RCC_OscConfig+0x62>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e3a2      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1a      	ldr	r2, [r3, #32]
 800142e:	4b82      	ldr	r3, [pc, #520]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d004      	beq.n	8001444 <HAL_RCC_OscConfig+0x7c>
 800143a:	4b7f      	ldr	r3, [pc, #508]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001442:	e005      	b.n	8001450 <HAL_RCC_OscConfig+0x88>
 8001444:	4b7c      	ldr	r3, [pc, #496]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 8001446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800144a:	091b      	lsrs	r3, r3, #4
 800144c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001450:	4293      	cmp	r3, r2
 8001452:	d223      	bcs.n	800149c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4618      	mov	r0, r3
 800145a:	f000 fd55 	bl	8001f08 <RCC_SetFlashLatencyFromMSIRange>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e383      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001468:	4b73      	ldr	r3, [pc, #460]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a72      	ldr	r2, [pc, #456]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 800146e:	f043 0308 	orr.w	r3, r3, #8
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b70      	ldr	r3, [pc, #448]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	496d      	ldr	r1, [pc, #436]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 8001482:	4313      	orrs	r3, r2
 8001484:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001486:	4b6c      	ldr	r3, [pc, #432]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	4968      	ldr	r1, [pc, #416]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 8001496:	4313      	orrs	r3, r2
 8001498:	604b      	str	r3, [r1, #4]
 800149a:	e025      	b.n	80014e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800149c:	4b66      	ldr	r3, [pc, #408]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a65      	ldr	r2, [pc, #404]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 80014a2:	f043 0308 	orr.w	r3, r3, #8
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b63      	ldr	r3, [pc, #396]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	4960      	ldr	r1, [pc, #384]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	021b      	lsls	r3, r3, #8
 80014c8:	495b      	ldr	r1, [pc, #364]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d109      	bne.n	80014e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 fd15 	bl	8001f08 <RCC_SetFlashLatencyFromMSIRange>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e343      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014e8:	f000 fc4a 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b52      	ldr	r3, [pc, #328]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	f003 030f 	and.w	r3, r3, #15
 80014f8:	4950      	ldr	r1, [pc, #320]	@ (800163c <HAL_RCC_OscConfig+0x274>)
 80014fa:	5ccb      	ldrb	r3, [r1, r3]
 80014fc:	f003 031f 	and.w	r3, r3, #31
 8001500:	fa22 f303 	lsr.w	r3, r2, r3
 8001504:	4a4e      	ldr	r2, [pc, #312]	@ (8001640 <HAL_RCC_OscConfig+0x278>)
 8001506:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001508:	4b4e      	ldr	r3, [pc, #312]	@ (8001644 <HAL_RCC_OscConfig+0x27c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fbb7 	bl	8000c80 <HAL_InitTick>
 8001512:	4603      	mov	r3, r0
 8001514:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d052      	beq.n	80015c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	e327      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d032      	beq.n	800158e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001528:	4b43      	ldr	r3, [pc, #268]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a42      	ldr	r2, [pc, #264]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001534:	f7ff fbf4 	bl	8000d20 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800153c:	f7ff fbf0 	bl	8000d20 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e310      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800154e:	4b3a      	ldr	r3, [pc, #232]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800155a:	4b37      	ldr	r3, [pc, #220]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a36      	ldr	r2, [pc, #216]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	4b34      	ldr	r3, [pc, #208]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	4931      	ldr	r1, [pc, #196]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 8001574:	4313      	orrs	r3, r2
 8001576:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001578:	4b2f      	ldr	r3, [pc, #188]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	492c      	ldr	r1, [pc, #176]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
 800158c:	e01a      	b.n	80015c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800158e:	4b2a      	ldr	r3, [pc, #168]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a29      	ldr	r2, [pc, #164]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 8001594:	f023 0301 	bic.w	r3, r3, #1
 8001598:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800159a:	f7ff fbc1 	bl	8000d20 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015a2:	f7ff fbbd 	bl	8000d20 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e2dd      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015b4:	4b20      	ldr	r3, [pc, #128]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f0      	bne.n	80015a2 <HAL_RCC_OscConfig+0x1da>
 80015c0:	e000      	b.n	80015c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d074      	beq.n	80016ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d005      	beq.n	80015e2 <HAL_RCC_OscConfig+0x21a>
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	2b0c      	cmp	r3, #12
 80015da:	d10e      	bne.n	80015fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d10b      	bne.n	80015fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e2:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d064      	beq.n	80016b8 <HAL_RCC_OscConfig+0x2f0>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d160      	bne.n	80016b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e2ba      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001602:	d106      	bne.n	8001612 <HAL_RCC_OscConfig+0x24a>
 8001604:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0b      	ldr	r2, [pc, #44]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 800160a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	e026      	b.n	8001660 <HAL_RCC_OscConfig+0x298>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800161a:	d115      	bne.n	8001648 <HAL_RCC_OscConfig+0x280>
 800161c:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a05      	ldr	r2, [pc, #20]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 8001622:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b03      	ldr	r3, [pc, #12]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a02      	ldr	r2, [pc, #8]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 800162e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	e014      	b.n	8001660 <HAL_RCC_OscConfig+0x298>
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000
 800163c:	08004a34 	.word	0x08004a34
 8001640:	2000000c 	.word	0x2000000c
 8001644:	20000010 	.word	0x20000010
 8001648:	4ba0      	ldr	r3, [pc, #640]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a9f      	ldr	r2, [pc, #636]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 800164e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b9d      	ldr	r3, [pc, #628]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a9c      	ldr	r2, [pc, #624]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 800165a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800165e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d013      	beq.n	8001690 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fb5a 	bl	8000d20 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff fb56 	bl	8000d20 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	@ 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e276      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001682:	4b92      	ldr	r3, [pc, #584]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x2a8>
 800168e:	e014      	b.n	80016ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001690:	f7ff fb46 	bl	8000d20 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fb42 	bl	8000d20 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	@ 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e262      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016aa:	4b88      	ldr	r3, [pc, #544]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x2d0>
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d060      	beq.n	8001788 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_OscConfig+0x310>
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	2b0c      	cmp	r3, #12
 80016d0:	d119      	bne.n	8001706 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d116      	bne.n	8001706 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d8:	4b7c      	ldr	r3, [pc, #496]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_OscConfig+0x328>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e23f      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f0:	4b76      	ldr	r3, [pc, #472]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	061b      	lsls	r3, r3, #24
 80016fe:	4973      	ldr	r1, [pc, #460]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001704:	e040      	b.n	8001788 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d023      	beq.n	8001756 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800170e:	4b6f      	ldr	r3, [pc, #444]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a6e      	ldr	r2, [pc, #440]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 8001714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171a:	f7ff fb01 	bl	8000d20 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001722:	f7ff fafd 	bl	8000d20 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e21d      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001734:	4b65      	ldr	r3, [pc, #404]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001740:	4b62      	ldr	r3, [pc, #392]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	061b      	lsls	r3, r3, #24
 800174e:	495f      	ldr	r1, [pc, #380]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
 8001754:	e018      	b.n	8001788 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001756:	4b5d      	ldr	r3, [pc, #372]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a5c      	ldr	r2, [pc, #368]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 800175c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001762:	f7ff fadd 	bl	8000d20 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176a:	f7ff fad9 	bl	8000d20 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e1f9      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800177c:	4b53      	ldr	r3, [pc, #332]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1f0      	bne.n	800176a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d03c      	beq.n	800180e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d01c      	beq.n	80017d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179c:	4b4b      	ldr	r3, [pc, #300]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 800179e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017a2:	4a4a      	ldr	r2, [pc, #296]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ac:	f7ff fab8 	bl	8000d20 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b4:	f7ff fab4 	bl	8000d20 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e1d4      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c6:	4b41      	ldr	r3, [pc, #260]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 80017c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0ef      	beq.n	80017b4 <HAL_RCC_OscConfig+0x3ec>
 80017d4:	e01b      	b.n	800180e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d6:	4b3d      	ldr	r3, [pc, #244]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 80017d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017dc:	4a3b      	ldr	r2, [pc, #236]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e6:	f7ff fa9b 	bl	8000d20 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ee:	f7ff fa97 	bl	8000d20 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e1b7      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001800:	4b32      	ldr	r3, [pc, #200]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 8001802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1ef      	bne.n	80017ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80a6 	beq.w	8001968 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181c:	2300      	movs	r3, #0
 800181e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001820:	4b2a      	ldr	r3, [pc, #168]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 8001822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10d      	bne.n	8001848 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182c:	4b27      	ldr	r3, [pc, #156]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 800182e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001830:	4a26      	ldr	r2, [pc, #152]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 8001832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001836:	6593      	str	r3, [r2, #88]	@ 0x58
 8001838:	4b24      	ldr	r3, [pc, #144]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 800183a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800183c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001844:	2301      	movs	r3, #1
 8001846:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001848:	4b21      	ldr	r3, [pc, #132]	@ (80018d0 <HAL_RCC_OscConfig+0x508>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001850:	2b00      	cmp	r3, #0
 8001852:	d118      	bne.n	8001886 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001854:	4b1e      	ldr	r3, [pc, #120]	@ (80018d0 <HAL_RCC_OscConfig+0x508>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a1d      	ldr	r2, [pc, #116]	@ (80018d0 <HAL_RCC_OscConfig+0x508>)
 800185a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800185e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001860:	f7ff fa5e 	bl	8000d20 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001868:	f7ff fa5a 	bl	8000d20 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e17a      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800187a:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <HAL_RCC_OscConfig+0x508>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d108      	bne.n	80018a0 <HAL_RCC_OscConfig+0x4d8>
 800188e:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 8001890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001894:	4a0d      	ldr	r2, [pc, #52]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800189e:	e029      	b.n	80018f4 <HAL_RCC_OscConfig+0x52c>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b05      	cmp	r3, #5
 80018a6:	d115      	bne.n	80018d4 <HAL_RCC_OscConfig+0x50c>
 80018a8:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 80018aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ae:	4a07      	ldr	r2, [pc, #28]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018b8:	4b04      	ldr	r3, [pc, #16]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 80018ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018be:	4a03      	ldr	r2, [pc, #12]	@ (80018cc <HAL_RCC_OscConfig+0x504>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018c8:	e014      	b.n	80018f4 <HAL_RCC_OscConfig+0x52c>
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40007000 	.word	0x40007000
 80018d4:	4b9c      	ldr	r3, [pc, #624]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 80018d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018da:	4a9b      	ldr	r2, [pc, #620]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018e4:	4b98      	ldr	r3, [pc, #608]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 80018e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ea:	4a97      	ldr	r2, [pc, #604]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 80018ec:	f023 0304 	bic.w	r3, r3, #4
 80018f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d016      	beq.n	800192a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff fa10 	bl	8000d20 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001902:	e00a      	b.n	800191a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001904:	f7ff fa0c 	bl	8000d20 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e12a      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800191a:	4b8b      	ldr	r3, [pc, #556]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 800191c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0ed      	beq.n	8001904 <HAL_RCC_OscConfig+0x53c>
 8001928:	e015      	b.n	8001956 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192a:	f7ff f9f9 	bl	8000d20 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001930:	e00a      	b.n	8001948 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001932:	f7ff f9f5 	bl	8000d20 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001940:	4293      	cmp	r3, r2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e113      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001948:	4b7f      	ldr	r3, [pc, #508]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 800194a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1ed      	bne.n	8001932 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001956:	7ffb      	ldrb	r3, [r7, #31]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d105      	bne.n	8001968 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195c:	4b7a      	ldr	r3, [pc, #488]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 800195e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001960:	4a79      	ldr	r2, [pc, #484]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001966:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80fe 	beq.w	8001b6e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001976:	2b02      	cmp	r3, #2
 8001978:	f040 80d0 	bne.w	8001b1c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800197c:	4b72      	ldr	r3, [pc, #456]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f003 0203 	and.w	r2, r3, #3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198c:	429a      	cmp	r2, r3
 800198e:	d130      	bne.n	80019f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	3b01      	subs	r3, #1
 800199c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800199e:	429a      	cmp	r2, r3
 80019a0:	d127      	bne.n	80019f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d11f      	bne.n	80019f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019bc:	2a07      	cmp	r2, #7
 80019be:	bf14      	ite	ne
 80019c0:	2201      	movne	r2, #1
 80019c2:	2200      	moveq	r2, #0
 80019c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d113      	bne.n	80019f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019d4:	085b      	lsrs	r3, r3, #1
 80019d6:	3b01      	subs	r3, #1
 80019d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019da:	429a      	cmp	r2, r3
 80019dc:	d109      	bne.n	80019f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	3b01      	subs	r3, #1
 80019ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d06e      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	2b0c      	cmp	r3, #12
 80019f6:	d069      	beq.n	8001acc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019f8:	4b53      	ldr	r3, [pc, #332]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d105      	bne.n	8001a10 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a04:	4b50      	ldr	r3, [pc, #320]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0ad      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a14:	4b4c      	ldr	r3, [pc, #304]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a4b      	ldr	r2, [pc, #300]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a1e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a20:	f7ff f97e 	bl	8000d20 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff f97a 	bl	8000d20 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e09a      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3a:	4b43      	ldr	r3, [pc, #268]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a46:	4b40      	ldr	r3, [pc, #256]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	4b40      	ldr	r3, [pc, #256]	@ (8001b4c <HAL_RCC_OscConfig+0x784>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a56:	3a01      	subs	r2, #1
 8001a58:	0112      	lsls	r2, r2, #4
 8001a5a:	4311      	orrs	r1, r2
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a60:	0212      	lsls	r2, r2, #8
 8001a62:	4311      	orrs	r1, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a68:	0852      	lsrs	r2, r2, #1
 8001a6a:	3a01      	subs	r2, #1
 8001a6c:	0552      	lsls	r2, r2, #21
 8001a6e:	4311      	orrs	r1, r2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a74:	0852      	lsrs	r2, r2, #1
 8001a76:	3a01      	subs	r2, #1
 8001a78:	0652      	lsls	r2, r2, #25
 8001a7a:	4311      	orrs	r1, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a80:	0912      	lsrs	r2, r2, #4
 8001a82:	0452      	lsls	r2, r2, #17
 8001a84:	430a      	orrs	r2, r1
 8001a86:	4930      	ldr	r1, [pc, #192]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a2d      	ldr	r2, [pc, #180]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a98:	4b2b      	ldr	r3, [pc, #172]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4a2a      	ldr	r2, [pc, #168]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aa2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001aa4:	f7ff f93c 	bl	8000d20 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aac:	f7ff f938 	bl	8000d20 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e058      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abe:	4b22      	ldr	r3, [pc, #136]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aca:	e050      	b.n	8001b6e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e04f      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d148      	bne.n	8001b6e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001adc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a19      	ldr	r2, [pc, #100]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001ae2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ae6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ae8:	4b17      	ldr	r3, [pc, #92]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	4a16      	ldr	r2, [pc, #88]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001aee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001af2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001af4:	f7ff f914 	bl	8000d20 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afc:	f7ff f910 	bl	8000d20 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e030      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x734>
 8001b1a:	e028      	b.n	8001b6e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	2b0c      	cmp	r3, #12
 8001b20:	d023      	beq.n	8001b6a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b22:	4b09      	ldr	r3, [pc, #36]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a08      	ldr	r2, [pc, #32]	@ (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001b28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2e:	f7ff f8f7 	bl	8000d20 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b34:	e00c      	b.n	8001b50 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b36:	f7ff f8f3 	bl	8000d20 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d905      	bls.n	8001b50 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e013      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b50:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <HAL_RCC_OscConfig+0x7b0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1ec      	bne.n	8001b36 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b5c:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_RCC_OscConfig+0x7b0>)
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	4905      	ldr	r1, [pc, #20]	@ (8001b78 <HAL_RCC_OscConfig+0x7b0>)
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_RCC_OscConfig+0x7b4>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	60cb      	str	r3, [r1, #12]
 8001b68:	e001      	b.n	8001b6e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3720      	adds	r7, #32
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	feeefffc 	.word	0xfeeefffc

08001b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0e7      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b94:	4b75      	ldr	r3, [pc, #468]	@ (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d910      	bls.n	8001bc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba2:	4b72      	ldr	r3, [pc, #456]	@ (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 0207 	bic.w	r2, r3, #7
 8001baa:	4970      	ldr	r1, [pc, #448]	@ (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb2:	4b6e      	ldr	r3, [pc, #440]	@ (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0cf      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d010      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	4b66      	ldr	r3, [pc, #408]	@ (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d908      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be0:	4b63      	ldr	r3, [pc, #396]	@ (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4960      	ldr	r1, [pc, #384]	@ (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d04c      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c06:	4b5a      	ldr	r3, [pc, #360]	@ (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d121      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e0a6      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c1e:	4b54      	ldr	r3, [pc, #336]	@ (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d115      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e09a      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d107      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c36:	4b4e      	ldr	r3, [pc, #312]	@ (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e08e      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c46:	4b4a      	ldr	r3, [pc, #296]	@ (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e086      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c56:	4b46      	ldr	r3, [pc, #280]	@ (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f023 0203 	bic.w	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4943      	ldr	r1, [pc, #268]	@ (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c68:	f7ff f85a 	bl	8000d20 <HAL_GetTick>
 8001c6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6e:	e00a      	b.n	8001c86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c70:	f7ff f856 	bl	8000d20 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e06e      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c86:	4b3a      	ldr	r3, [pc, #232]	@ (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 020c 	and.w	r2, r3, #12
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d1eb      	bne.n	8001c70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d010      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	4b31      	ldr	r3, [pc, #196]	@ (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d208      	bcs.n	8001cc6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb4:	4b2e      	ldr	r3, [pc, #184]	@ (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	492b      	ldr	r1, [pc, #172]	@ (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc6:	4b29      	ldr	r3, [pc, #164]	@ (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d210      	bcs.n	8001cf6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd4:	4b25      	ldr	r3, [pc, #148]	@ (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f023 0207 	bic.w	r2, r3, #7
 8001cdc:	4923      	ldr	r1, [pc, #140]	@ (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce4:	4b21      	ldr	r3, [pc, #132]	@ (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d001      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e036      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d02:	4b1b      	ldr	r3, [pc, #108]	@ (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	4918      	ldr	r1, [pc, #96]	@ (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d009      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d20:	4b13      	ldr	r3, [pc, #76]	@ (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4910      	ldr	r1, [pc, #64]	@ (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d34:	f000 f824 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	091b      	lsrs	r3, r3, #4
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	490b      	ldr	r1, [pc, #44]	@ (8001d74 <HAL_RCC_ClockConfig+0x1f4>)
 8001d46:	5ccb      	ldrb	r3, [r1, r3]
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d50:	4a09      	ldr	r2, [pc, #36]	@ (8001d78 <HAL_RCC_ClockConfig+0x1f8>)
 8001d52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d54:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <HAL_RCC_ClockConfig+0x1fc>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe ff91 	bl	8000c80 <HAL_InitTick>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d62:	7afb      	ldrb	r3, [r7, #11]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40022000 	.word	0x40022000
 8001d70:	40021000 	.word	0x40021000
 8001d74:	08004a34 	.word	0x08004a34
 8001d78:	2000000c 	.word	0x2000000c
 8001d7c:	20000010 	.word	0x20000010

08001d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b089      	sub	sp, #36	@ 0x24
 8001d84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d8e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d98:	4b3b      	ldr	r3, [pc, #236]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0x34>
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2b0c      	cmp	r3, #12
 8001dac:	d121      	bne.n	8001df2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d11e      	bne.n	8001df2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001db4:	4b34      	ldr	r3, [pc, #208]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d107      	bne.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dc0:	4b31      	ldr	r3, [pc, #196]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dc6:	0a1b      	lsrs	r3, r3, #8
 8001dc8:	f003 030f 	and.w	r3, r3, #15
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	e005      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8001e8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10d      	bne.n	8001e08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001df0:	e00a      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d102      	bne.n	8001dfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001df8:	4b25      	ldr	r3, [pc, #148]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dfa:	61bb      	str	r3, [r7, #24]
 8001dfc:	e004      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e04:	4b23      	ldr	r3, [pc, #140]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2b0c      	cmp	r3, #12
 8001e0c:	d134      	bne.n	8001e78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d003      	beq.n	8001e26 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d003      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0xac>
 8001e24:	e005      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e26:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e28:	617b      	str	r3, [r7, #20]
      break;
 8001e2a:	e005      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e2c:	4b19      	ldr	r3, [pc, #100]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e2e:	617b      	str	r3, [r7, #20]
      break;
 8001e30:	e002      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	617b      	str	r3, [r7, #20]
      break;
 8001e36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e38:	4b13      	ldr	r3, [pc, #76]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	3301      	adds	r3, #1
 8001e44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	0a1b      	lsrs	r3, r3, #8
 8001e4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	fb03 f202 	mul.w	r2, r3, r2
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	0e5b      	lsrs	r3, r3, #25
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	3301      	adds	r3, #1
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e78:	69bb      	ldr	r3, [r7, #24]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3724      	adds	r7, #36	@ 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	08004a4c 	.word	0x08004a4c
 8001e90:	00f42400 	.word	0x00f42400
 8001e94:	007a1200 	.word	0x007a1200

08001e98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	@ (8001eac <HAL_RCC_GetHCLKFreq+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	2000000c 	.word	0x2000000c

08001eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001eb4:	f7ff fff0 	bl	8001e98 <HAL_RCC_GetHCLKFreq>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	0a1b      	lsrs	r3, r3, #8
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	4904      	ldr	r1, [pc, #16]	@ (8001ed8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ec6:	5ccb      	ldrb	r3, [r1, r3]
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	08004a44 	.word	0x08004a44

08001edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ee0:	f7ff ffda 	bl	8001e98 <HAL_RCC_GetHCLKFreq>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	0adb      	lsrs	r3, r3, #11
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	4904      	ldr	r1, [pc, #16]	@ (8001f04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ef2:	5ccb      	ldrb	r3, [r1, r3]
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000
 8001f04:	08004a44 	.word	0x08004a44

08001f08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f10:	2300      	movs	r3, #0
 8001f12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f14:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f20:	f7ff f9ee 	bl	8001300 <HAL_PWREx_GetVoltageRange>
 8001f24:	6178      	str	r0, [r7, #20]
 8001f26:	e014      	b.n	8001f52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f28:	4b25      	ldr	r3, [pc, #148]	@ (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2c:	4a24      	ldr	r2, [pc, #144]	@ (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f32:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f34:	4b22      	ldr	r3, [pc, #136]	@ (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f40:	f7ff f9de 	bl	8001300 <HAL_PWREx_GetVoltageRange>
 8001f44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f46:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f50:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f58:	d10b      	bne.n	8001f72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b80      	cmp	r3, #128	@ 0x80
 8001f5e:	d919      	bls.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f64:	d902      	bls.n	8001f6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f66:	2302      	movs	r3, #2
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	e013      	b.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	e010      	b.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b80      	cmp	r3, #128	@ 0x80
 8001f76:	d902      	bls.n	8001f7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f78:	2303      	movs	r3, #3
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	e00a      	b.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b80      	cmp	r3, #128	@ 0x80
 8001f82:	d102      	bne.n	8001f8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f84:	2302      	movs	r3, #2
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	e004      	b.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b70      	cmp	r3, #112	@ 0x70
 8001f8e:	d101      	bne.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f90:	2301      	movs	r3, #1
 8001f92:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f94:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 0207 	bic.w	r2, r3, #7
 8001f9c:	4909      	ldr	r1, [pc, #36]	@ (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fa4:	4b07      	ldr	r3, [pc, #28]	@ (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d001      	beq.n	8001fb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40022000 	.word	0x40022000

08001fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d041      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fe8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001fec:	d02a      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001fee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ff2:	d824      	bhi.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ff4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ff8:	d008      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ffa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ffe:	d81e      	bhi.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002004:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002008:	d010      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800200a:	e018      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800200c:	4b86      	ldr	r3, [pc, #536]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4a85      	ldr	r2, [pc, #532]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002012:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002016:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002018:	e015      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3304      	adds	r3, #4
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f000 fabb 	bl	800259c <RCCEx_PLLSAI1_Config>
 8002026:	4603      	mov	r3, r0
 8002028:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800202a:	e00c      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3320      	adds	r3, #32
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fba6 	bl	8002784 <RCCEx_PLLSAI2_Config>
 8002038:	4603      	mov	r3, r0
 800203a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800203c:	e003      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	74fb      	strb	r3, [r7, #19]
      break;
 8002042:	e000      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002046:	7cfb      	ldrb	r3, [r7, #19]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10b      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800204c:	4b76      	ldr	r3, [pc, #472]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002052:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800205a:	4973      	ldr	r1, [pc, #460]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002062:	e001      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002064:	7cfb      	ldrb	r3, [r7, #19]
 8002066:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d041      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002078:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800207c:	d02a      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800207e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002082:	d824      	bhi.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002084:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002088:	d008      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800208a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800208e:	d81e      	bhi.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00a      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002094:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002098:	d010      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800209a:	e018      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800209c:	4b62      	ldr	r3, [pc, #392]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4a61      	ldr	r2, [pc, #388]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020a8:	e015      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3304      	adds	r3, #4
 80020ae:	2100      	movs	r1, #0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 fa73 	bl	800259c <RCCEx_PLLSAI1_Config>
 80020b6:	4603      	mov	r3, r0
 80020b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020ba:	e00c      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3320      	adds	r3, #32
 80020c0:	2100      	movs	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 fb5e 	bl	8002784 <RCCEx_PLLSAI2_Config>
 80020c8:	4603      	mov	r3, r0
 80020ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020cc:	e003      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	74fb      	strb	r3, [r7, #19]
      break;
 80020d2:	e000      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020d6:	7cfb      	ldrb	r3, [r7, #19]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10b      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020dc:	4b52      	ldr	r3, [pc, #328]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020ea:	494f      	ldr	r1, [pc, #316]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80020f2:	e001      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80a0 	beq.w	8002246 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800210a:	4b47      	ldr	r3, [pc, #284]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800211a:	2300      	movs	r3, #0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00d      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002120:	4b41      	ldr	r3, [pc, #260]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002124:	4a40      	ldr	r2, [pc, #256]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800212a:	6593      	str	r3, [r2, #88]	@ 0x58
 800212c:	4b3e      	ldr	r3, [pc, #248]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002138:	2301      	movs	r3, #1
 800213a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800213c:	4b3b      	ldr	r3, [pc, #236]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a3a      	ldr	r2, [pc, #232]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002146:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002148:	f7fe fdea 	bl	8000d20 <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800214e:	e009      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002150:	f7fe fde6 	bl	8000d20 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d902      	bls.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	74fb      	strb	r3, [r7, #19]
        break;
 8002162:	e005      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002164:	4b31      	ldr	r3, [pc, #196]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0ef      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002170:	7cfb      	ldrb	r3, [r7, #19]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d15c      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002176:	4b2c      	ldr	r3, [pc, #176]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002180:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d01f      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	429a      	cmp	r2, r3
 8002192:	d019      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002194:	4b24      	ldr	r3, [pc, #144]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800219a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800219e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021a0:	4b21      	ldr	r3, [pc, #132]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a6:	4a20      	ldr	r2, [pc, #128]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021c0:	4a19      	ldr	r2, [pc, #100]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d016      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d2:	f7fe fda5 	bl	8000d20 <HAL_GetTick>
 80021d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d8:	e00b      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021da:	f7fe fda1 	bl	8000d20 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d902      	bls.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	74fb      	strb	r3, [r7, #19]
            break;
 80021f0:	e006      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0ec      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002200:	7cfb      	ldrb	r3, [r7, #19]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10c      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002206:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800220c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002216:	4904      	ldr	r1, [pc, #16]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002218:	4313      	orrs	r3, r2
 800221a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800221e:	e009      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002220:	7cfb      	ldrb	r3, [r7, #19]
 8002222:	74bb      	strb	r3, [r7, #18]
 8002224:	e006      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002230:	7cfb      	ldrb	r3, [r7, #19]
 8002232:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002234:	7c7b      	ldrb	r3, [r7, #17]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d105      	bne.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800223a:	4b9e      	ldr	r3, [pc, #632]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223e:	4a9d      	ldr	r2, [pc, #628]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002240:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002244:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002252:	4b98      	ldr	r3, [pc, #608]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002258:	f023 0203 	bic.w	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002260:	4994      	ldr	r1, [pc, #592]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002274:	4b8f      	ldr	r3, [pc, #572]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227a:	f023 020c 	bic.w	r2, r3, #12
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002282:	498c      	ldr	r1, [pc, #560]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002296:	4b87      	ldr	r3, [pc, #540]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a4:	4983      	ldr	r1, [pc, #524]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022b8:	4b7e      	ldr	r3, [pc, #504]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c6:	497b      	ldr	r1, [pc, #492]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022da:	4b76      	ldr	r3, [pc, #472]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e8:	4972      	ldr	r1, [pc, #456]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022fc:	4b6d      	ldr	r3, [pc, #436]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002302:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230a:	496a      	ldr	r1, [pc, #424]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800231e:	4b65      	ldr	r3, [pc, #404]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002324:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232c:	4961      	ldr	r1, [pc, #388]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00a      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002340:	4b5c      	ldr	r3, [pc, #368]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002346:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800234e:	4959      	ldr	r1, [pc, #356]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002362:	4b54      	ldr	r3, [pc, #336]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002368:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002370:	4950      	ldr	r1, [pc, #320]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002384:	4b4b      	ldr	r3, [pc, #300]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800238a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002392:	4948      	ldr	r1, [pc, #288]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023a6:	4b43      	ldr	r3, [pc, #268]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b4:	493f      	ldr	r1, [pc, #252]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d028      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023c8:	4b3a      	ldr	r3, [pc, #232]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023d6:	4937      	ldr	r1, [pc, #220]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023e6:	d106      	bne.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e8:	4b32      	ldr	r3, [pc, #200]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4a31      	ldr	r2, [pc, #196]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023f2:	60d3      	str	r3, [r2, #12]
 80023f4:	e011      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023fe:	d10c      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3304      	adds	r3, #4
 8002404:	2101      	movs	r1, #1
 8002406:	4618      	mov	r0, r3
 8002408:	f000 f8c8 	bl	800259c <RCCEx_PLLSAI1_Config>
 800240c:	4603      	mov	r3, r0
 800240e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002410:	7cfb      	ldrb	r3, [r7, #19]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002416:	7cfb      	ldrb	r3, [r7, #19]
 8002418:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d028      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002426:	4b23      	ldr	r3, [pc, #140]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800242c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002434:	491f      	ldr	r1, [pc, #124]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002440:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002444:	d106      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002446:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	4a1a      	ldr	r2, [pc, #104]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002450:	60d3      	str	r3, [r2, #12]
 8002452:	e011      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002458:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800245c:	d10c      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3304      	adds	r3, #4
 8002462:	2101      	movs	r1, #1
 8002464:	4618      	mov	r0, r3
 8002466:	f000 f899 	bl	800259c <RCCEx_PLLSAI1_Config>
 800246a:	4603      	mov	r3, r0
 800246c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800246e:	7cfb      	ldrb	r3, [r7, #19]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d02b      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002484:	4b0b      	ldr	r3, [pc, #44]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002492:	4908      	ldr	r1, [pc, #32]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800249e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024a2:	d109      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024a4:	4b03      	ldr	r3, [pc, #12]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4a02      	ldr	r2, [pc, #8]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024ae:	60d3      	str	r3, [r2, #12]
 80024b0:	e014      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024c0:	d10c      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2101      	movs	r1, #1
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 f867 	bl	800259c <RCCEx_PLLSAI1_Config>
 80024ce:	4603      	mov	r3, r0
 80024d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024d2:	7cfb      	ldrb	r3, [r7, #19]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80024d8:	7cfb      	ldrb	r3, [r7, #19]
 80024da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d02f      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024f6:	4928      	ldr	r1, [pc, #160]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002502:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002506:	d10d      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3304      	adds	r3, #4
 800250c:	2102      	movs	r1, #2
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f844 	bl	800259c <RCCEx_PLLSAI1_Config>
 8002514:	4603      	mov	r3, r0
 8002516:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002518:	7cfb      	ldrb	r3, [r7, #19]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d014      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800251e:	7cfb      	ldrb	r3, [r7, #19]
 8002520:	74bb      	strb	r3, [r7, #18]
 8002522:	e011      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002528:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800252c:	d10c      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3320      	adds	r3, #32
 8002532:	2102      	movs	r1, #2
 8002534:	4618      	mov	r0, r3
 8002536:	f000 f925 	bl	8002784 <RCCEx_PLLSAI2_Config>
 800253a:	4603      	mov	r3, r0
 800253c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800253e:	7cfb      	ldrb	r3, [r7, #19]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002544:	7cfb      	ldrb	r3, [r7, #19]
 8002546:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002554:	4b10      	ldr	r3, [pc, #64]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800255a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002562:	490d      	ldr	r1, [pc, #52]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002576:	4b08      	ldr	r3, [pc, #32]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002586:	4904      	ldr	r1, [pc, #16]	@ (8002598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800258e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000

0800259c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025aa:	4b75      	ldr	r3, [pc, #468]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d018      	beq.n	80025e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025b6:	4b72      	ldr	r3, [pc, #456]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0203 	and.w	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d10d      	bne.n	80025e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
       ||
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025ce:	4b6c      	ldr	r3, [pc, #432]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
       ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d047      	beq.n	8002672 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
 80025e6:	e044      	b.n	8002672 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d018      	beq.n	8002622 <RCCEx_PLLSAI1_Config+0x86>
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d825      	bhi.n	8002640 <RCCEx_PLLSAI1_Config+0xa4>
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d002      	beq.n	80025fe <RCCEx_PLLSAI1_Config+0x62>
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d009      	beq.n	8002610 <RCCEx_PLLSAI1_Config+0x74>
 80025fc:	e020      	b.n	8002640 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025fe:	4b60      	ldr	r3, [pc, #384]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d11d      	bne.n	8002646 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800260e:	e01a      	b.n	8002646 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002610:	4b5b      	ldr	r3, [pc, #364]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002618:	2b00      	cmp	r3, #0
 800261a:	d116      	bne.n	800264a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002620:	e013      	b.n	800264a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002622:	4b57      	ldr	r3, [pc, #348]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10f      	bne.n	800264e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800262e:	4b54      	ldr	r3, [pc, #336]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d109      	bne.n	800264e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800263e:	e006      	b.n	800264e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
      break;
 8002644:	e004      	b.n	8002650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002646:	bf00      	nop
 8002648:	e002      	b.n	8002650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800264a:	bf00      	nop
 800264c:	e000      	b.n	8002650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800264e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10d      	bne.n	8002672 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002656:	4b4a      	ldr	r3, [pc, #296]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6819      	ldr	r1, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	3b01      	subs	r3, #1
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	430b      	orrs	r3, r1
 800266c:	4944      	ldr	r1, [pc, #272]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800266e:	4313      	orrs	r3, r2
 8002670:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d17d      	bne.n	8002774 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002678:	4b41      	ldr	r3, [pc, #260]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a40      	ldr	r2, [pc, #256]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002684:	f7fe fb4c 	bl	8000d20 <HAL_GetTick>
 8002688:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800268a:	e009      	b.n	80026a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800268c:	f7fe fb48 	bl	8000d20 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d902      	bls.n	80026a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	73fb      	strb	r3, [r7, #15]
        break;
 800269e:	e005      	b.n	80026ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026a0:	4b37      	ldr	r3, [pc, #220]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1ef      	bne.n	800268c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d160      	bne.n	8002774 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d111      	bne.n	80026dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026b8:	4b31      	ldr	r3, [pc, #196]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80026c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6892      	ldr	r2, [r2, #8]
 80026c8:	0211      	lsls	r1, r2, #8
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68d2      	ldr	r2, [r2, #12]
 80026ce:	0912      	lsrs	r2, r2, #4
 80026d0:	0452      	lsls	r2, r2, #17
 80026d2:	430a      	orrs	r2, r1
 80026d4:	492a      	ldr	r1, [pc, #168]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	610b      	str	r3, [r1, #16]
 80026da:	e027      	b.n	800272c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d112      	bne.n	8002708 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026e2:	4b27      	ldr	r3, [pc, #156]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80026ea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6892      	ldr	r2, [r2, #8]
 80026f2:	0211      	lsls	r1, r2, #8
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6912      	ldr	r2, [r2, #16]
 80026f8:	0852      	lsrs	r2, r2, #1
 80026fa:	3a01      	subs	r2, #1
 80026fc:	0552      	lsls	r2, r2, #21
 80026fe:	430a      	orrs	r2, r1
 8002700:	491f      	ldr	r1, [pc, #124]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002702:	4313      	orrs	r3, r2
 8002704:	610b      	str	r3, [r1, #16]
 8002706:	e011      	b.n	800272c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002708:	4b1d      	ldr	r3, [pc, #116]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002710:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6892      	ldr	r2, [r2, #8]
 8002718:	0211      	lsls	r1, r2, #8
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6952      	ldr	r2, [r2, #20]
 800271e:	0852      	lsrs	r2, r2, #1
 8002720:	3a01      	subs	r2, #1
 8002722:	0652      	lsls	r2, r2, #25
 8002724:	430a      	orrs	r2, r1
 8002726:	4916      	ldr	r1, [pc, #88]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002728:	4313      	orrs	r3, r2
 800272a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800272c:	4b14      	ldr	r3, [pc, #80]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a13      	ldr	r2, [pc, #76]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002732:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002736:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002738:	f7fe faf2 	bl	8000d20 <HAL_GetTick>
 800273c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800273e:	e009      	b.n	8002754 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002740:	f7fe faee 	bl	8000d20 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d902      	bls.n	8002754 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	73fb      	strb	r3, [r7, #15]
          break;
 8002752:	e005      	b.n	8002760 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002754:	4b0a      	ldr	r3, [pc, #40]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0ef      	beq.n	8002740 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002766:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	4904      	ldr	r1, [pc, #16]	@ (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002770:	4313      	orrs	r3, r2
 8002772:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002774:	7bfb      	ldrb	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000

08002784 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002792:	4b6a      	ldr	r3, [pc, #424]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d018      	beq.n	80027d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800279e:	4b67      	ldr	r3, [pc, #412]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f003 0203 	and.w	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d10d      	bne.n	80027ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
       ||
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027b6:	4b61      	ldr	r3, [pc, #388]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	091b      	lsrs	r3, r3, #4
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
       ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d047      	beq.n	800285a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
 80027ce:	e044      	b.n	800285a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d018      	beq.n	800280a <RCCEx_PLLSAI2_Config+0x86>
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d825      	bhi.n	8002828 <RCCEx_PLLSAI2_Config+0xa4>
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d002      	beq.n	80027e6 <RCCEx_PLLSAI2_Config+0x62>
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d009      	beq.n	80027f8 <RCCEx_PLLSAI2_Config+0x74>
 80027e4:	e020      	b.n	8002828 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027e6:	4b55      	ldr	r3, [pc, #340]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d11d      	bne.n	800282e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f6:	e01a      	b.n	800282e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027f8:	4b50      	ldr	r3, [pc, #320]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002800:	2b00      	cmp	r3, #0
 8002802:	d116      	bne.n	8002832 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002808:	e013      	b.n	8002832 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800280a:	4b4c      	ldr	r3, [pc, #304]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10f      	bne.n	8002836 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002816:	4b49      	ldr	r3, [pc, #292]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002826:	e006      	b.n	8002836 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
      break;
 800282c:	e004      	b.n	8002838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800282e:	bf00      	nop
 8002830:	e002      	b.n	8002838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002832:	bf00      	nop
 8002834:	e000      	b.n	8002838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002836:	bf00      	nop
    }

    if(status == HAL_OK)
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10d      	bne.n	800285a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800283e:	4b3f      	ldr	r3, [pc, #252]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6819      	ldr	r1, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	3b01      	subs	r3, #1
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	430b      	orrs	r3, r1
 8002854:	4939      	ldr	r1, [pc, #228]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002856:	4313      	orrs	r3, r2
 8002858:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d167      	bne.n	8002930 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002860:	4b36      	ldr	r3, [pc, #216]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a35      	ldr	r2, [pc, #212]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800286a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800286c:	f7fe fa58 	bl	8000d20 <HAL_GetTick>
 8002870:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002872:	e009      	b.n	8002888 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002874:	f7fe fa54 	bl	8000d20 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d902      	bls.n	8002888 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	73fb      	strb	r3, [r7, #15]
        break;
 8002886:	e005      	b.n	8002894 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002888:	4b2c      	ldr	r3, [pc, #176]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1ef      	bne.n	8002874 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d14a      	bne.n	8002930 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d111      	bne.n	80028c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028a0:	4b26      	ldr	r3, [pc, #152]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80028a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6892      	ldr	r2, [r2, #8]
 80028b0:	0211      	lsls	r1, r2, #8
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68d2      	ldr	r2, [r2, #12]
 80028b6:	0912      	lsrs	r2, r2, #4
 80028b8:	0452      	lsls	r2, r2, #17
 80028ba:	430a      	orrs	r2, r1
 80028bc:	491f      	ldr	r1, [pc, #124]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	614b      	str	r3, [r1, #20]
 80028c2:	e011      	b.n	80028e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028c4:	4b1d      	ldr	r3, [pc, #116]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80028cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6892      	ldr	r2, [r2, #8]
 80028d4:	0211      	lsls	r1, r2, #8
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6912      	ldr	r2, [r2, #16]
 80028da:	0852      	lsrs	r2, r2, #1
 80028dc:	3a01      	subs	r2, #1
 80028de:	0652      	lsls	r2, r2, #25
 80028e0:	430a      	orrs	r2, r1
 80028e2:	4916      	ldr	r1, [pc, #88]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028e8:	4b14      	ldr	r3, [pc, #80]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a13      	ldr	r2, [pc, #76]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f4:	f7fe fa14 	bl	8000d20 <HAL_GetTick>
 80028f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028fa:	e009      	b.n	8002910 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028fc:	f7fe fa10 	bl	8000d20 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d902      	bls.n	8002910 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	73fb      	strb	r3, [r7, #15]
          break;
 800290e:	e005      	b.n	800291c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002910:	4b0a      	ldr	r3, [pc, #40]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0ef      	beq.n	80028fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002922:	4b06      	ldr	r3, [pc, #24]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	4904      	ldr	r1, [pc, #16]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 800292c:	4313      	orrs	r3, r2
 800292e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002930:	7bfb      	ldrb	r3, [r7, #15]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000

08002940 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e049      	b.n	80029e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d106      	bne.n	800296c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7fe f814 	bl	8000994 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3304      	adds	r3, #4
 800297c:	4619      	mov	r1, r3
 800297e:	4610      	mov	r0, r2
 8002980:	f000 fa50 	bl	8002e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d109      	bne.n	8002a14 <HAL_TIM_PWM_Start+0x24>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	bf14      	ite	ne
 8002a0c:	2301      	movne	r3, #1
 8002a0e:	2300      	moveq	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	e03c      	b.n	8002a8e <HAL_TIM_PWM_Start+0x9e>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d109      	bne.n	8002a2e <HAL_TIM_PWM_Start+0x3e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	bf14      	ite	ne
 8002a26:	2301      	movne	r3, #1
 8002a28:	2300      	moveq	r3, #0
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	e02f      	b.n	8002a8e <HAL_TIM_PWM_Start+0x9e>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d109      	bne.n	8002a48 <HAL_TIM_PWM_Start+0x58>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	bf14      	ite	ne
 8002a40:	2301      	movne	r3, #1
 8002a42:	2300      	moveq	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	e022      	b.n	8002a8e <HAL_TIM_PWM_Start+0x9e>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b0c      	cmp	r3, #12
 8002a4c:	d109      	bne.n	8002a62 <HAL_TIM_PWM_Start+0x72>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	bf14      	ite	ne
 8002a5a:	2301      	movne	r3, #1
 8002a5c:	2300      	moveq	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	e015      	b.n	8002a8e <HAL_TIM_PWM_Start+0x9e>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b10      	cmp	r3, #16
 8002a66:	d109      	bne.n	8002a7c <HAL_TIM_PWM_Start+0x8c>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	bf14      	ite	ne
 8002a74:	2301      	movne	r3, #1
 8002a76:	2300      	moveq	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	e008      	b.n	8002a8e <HAL_TIM_PWM_Start+0x9e>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	bf14      	ite	ne
 8002a88:	2301      	movne	r3, #1
 8002a8a:	2300      	moveq	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e09c      	b.n	8002bd0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d104      	bne.n	8002aa6 <HAL_TIM_PWM_Start+0xb6>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002aa4:	e023      	b.n	8002aee <HAL_TIM_PWM_Start+0xfe>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d104      	bne.n	8002ab6 <HAL_TIM_PWM_Start+0xc6>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ab4:	e01b      	b.n	8002aee <HAL_TIM_PWM_Start+0xfe>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d104      	bne.n	8002ac6 <HAL_TIM_PWM_Start+0xd6>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ac4:	e013      	b.n	8002aee <HAL_TIM_PWM_Start+0xfe>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b0c      	cmp	r3, #12
 8002aca:	d104      	bne.n	8002ad6 <HAL_TIM_PWM_Start+0xe6>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ad4:	e00b      	b.n	8002aee <HAL_TIM_PWM_Start+0xfe>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	d104      	bne.n	8002ae6 <HAL_TIM_PWM_Start+0xf6>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ae4:	e003      	b.n	8002aee <HAL_TIM_PWM_Start+0xfe>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2201      	movs	r2, #1
 8002af4:	6839      	ldr	r1, [r7, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fd10 	bl	800351c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a35      	ldr	r2, [pc, #212]	@ (8002bd8 <HAL_TIM_PWM_Start+0x1e8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <HAL_TIM_PWM_Start+0x13e>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a34      	ldr	r2, [pc, #208]	@ (8002bdc <HAL_TIM_PWM_Start+0x1ec>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00e      	beq.n	8002b2e <HAL_TIM_PWM_Start+0x13e>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a32      	ldr	r2, [pc, #200]	@ (8002be0 <HAL_TIM_PWM_Start+0x1f0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d009      	beq.n	8002b2e <HAL_TIM_PWM_Start+0x13e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a31      	ldr	r2, [pc, #196]	@ (8002be4 <HAL_TIM_PWM_Start+0x1f4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d004      	beq.n	8002b2e <HAL_TIM_PWM_Start+0x13e>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a2f      	ldr	r2, [pc, #188]	@ (8002be8 <HAL_TIM_PWM_Start+0x1f8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d101      	bne.n	8002b32 <HAL_TIM_PWM_Start+0x142>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_TIM_PWM_Start+0x144>
 8002b32:	2300      	movs	r3, #0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d007      	beq.n	8002b48 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b46:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a22      	ldr	r2, [pc, #136]	@ (8002bd8 <HAL_TIM_PWM_Start+0x1e8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d01d      	beq.n	8002b8e <HAL_TIM_PWM_Start+0x19e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b5a:	d018      	beq.n	8002b8e <HAL_TIM_PWM_Start+0x19e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a22      	ldr	r2, [pc, #136]	@ (8002bec <HAL_TIM_PWM_Start+0x1fc>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d013      	beq.n	8002b8e <HAL_TIM_PWM_Start+0x19e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a21      	ldr	r2, [pc, #132]	@ (8002bf0 <HAL_TIM_PWM_Start+0x200>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d00e      	beq.n	8002b8e <HAL_TIM_PWM_Start+0x19e>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a1f      	ldr	r2, [pc, #124]	@ (8002bf4 <HAL_TIM_PWM_Start+0x204>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d009      	beq.n	8002b8e <HAL_TIM_PWM_Start+0x19e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a17      	ldr	r2, [pc, #92]	@ (8002bdc <HAL_TIM_PWM_Start+0x1ec>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d004      	beq.n	8002b8e <HAL_TIM_PWM_Start+0x19e>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a15      	ldr	r2, [pc, #84]	@ (8002be0 <HAL_TIM_PWM_Start+0x1f0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d115      	bne.n	8002bba <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	4b18      	ldr	r3, [pc, #96]	@ (8002bf8 <HAL_TIM_PWM_Start+0x208>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b06      	cmp	r3, #6
 8002b9e:	d015      	beq.n	8002bcc <HAL_TIM_PWM_Start+0x1dc>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba6:	d011      	beq.n	8002bcc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb8:	e008      	b.n	8002bcc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0201 	orr.w	r2, r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	e000      	b.n	8002bce <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bcc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40012c00 	.word	0x40012c00
 8002bdc:	40013400 	.word	0x40013400
 8002be0:	40014000 	.word	0x40014000
 8002be4:	40014400 	.word	0x40014400
 8002be8:	40014800 	.word	0x40014800
 8002bec:	40000400 	.word	0x40000400
 8002bf0:	40000800 	.word	0x40000800
 8002bf4:	40000c00 	.word	0x40000c00
 8002bf8:	00010007 	.word	0x00010007

08002bfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e0ff      	b.n	8002e1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b14      	cmp	r3, #20
 8002c26:	f200 80f0 	bhi.w	8002e0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c30:	08002c85 	.word	0x08002c85
 8002c34:	08002e0b 	.word	0x08002e0b
 8002c38:	08002e0b 	.word	0x08002e0b
 8002c3c:	08002e0b 	.word	0x08002e0b
 8002c40:	08002cc5 	.word	0x08002cc5
 8002c44:	08002e0b 	.word	0x08002e0b
 8002c48:	08002e0b 	.word	0x08002e0b
 8002c4c:	08002e0b 	.word	0x08002e0b
 8002c50:	08002d07 	.word	0x08002d07
 8002c54:	08002e0b 	.word	0x08002e0b
 8002c58:	08002e0b 	.word	0x08002e0b
 8002c5c:	08002e0b 	.word	0x08002e0b
 8002c60:	08002d47 	.word	0x08002d47
 8002c64:	08002e0b 	.word	0x08002e0b
 8002c68:	08002e0b 	.word	0x08002e0b
 8002c6c:	08002e0b 	.word	0x08002e0b
 8002c70:	08002d89 	.word	0x08002d89
 8002c74:	08002e0b 	.word	0x08002e0b
 8002c78:	08002e0b 	.word	0x08002e0b
 8002c7c:	08002e0b 	.word	0x08002e0b
 8002c80:	08002dc9 	.word	0x08002dc9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 f970 	bl	8002f70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699a      	ldr	r2, [r3, #24]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0208 	orr.w	r2, r2, #8
 8002c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699a      	ldr	r2, [r3, #24]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0204 	bic.w	r2, r2, #4
 8002cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6999      	ldr	r1, [r3, #24]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	691a      	ldr	r2, [r3, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	619a      	str	r2, [r3, #24]
      break;
 8002cc2:	e0a5      	b.n	8002e10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 f9e0 	bl	8003090 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699a      	ldr	r2, [r3, #24]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699a      	ldr	r2, [r3, #24]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6999      	ldr	r1, [r3, #24]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	021a      	lsls	r2, r3, #8
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	619a      	str	r2, [r3, #24]
      break;
 8002d04:	e084      	b.n	8002e10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68b9      	ldr	r1, [r7, #8]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 fa49 	bl	80031a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	69da      	ldr	r2, [r3, #28]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0208 	orr.w	r2, r2, #8
 8002d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	69da      	ldr	r2, [r3, #28]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0204 	bic.w	r2, r2, #4
 8002d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69d9      	ldr	r1, [r3, #28]
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	61da      	str	r2, [r3, #28]
      break;
 8002d44:	e064      	b.n	8002e10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68b9      	ldr	r1, [r7, #8]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 fab1 	bl	80032b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	69da      	ldr	r2, [r3, #28]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69da      	ldr	r2, [r3, #28]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69d9      	ldr	r1, [r3, #28]
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	021a      	lsls	r2, r3, #8
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	61da      	str	r2, [r3, #28]
      break;
 8002d86:	e043      	b.n	8002e10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fafa 	bl	8003388 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0208 	orr.w	r2, r2, #8
 8002da2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0204 	bic.w	r2, r2, #4
 8002db2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002dc6:	e023      	b.n	8002e10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68b9      	ldr	r1, [r7, #8]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fb3e 	bl	8003450 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002de2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002df2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	021a      	lsls	r2, r3, #8
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002e08:	e002      	b.n	8002e10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8002e0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop

08002e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a46      	ldr	r2, [pc, #280]	@ (8002f50 <TIM_Base_SetConfig+0x12c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d013      	beq.n	8002e64 <TIM_Base_SetConfig+0x40>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e42:	d00f      	beq.n	8002e64 <TIM_Base_SetConfig+0x40>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a43      	ldr	r2, [pc, #268]	@ (8002f54 <TIM_Base_SetConfig+0x130>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d00b      	beq.n	8002e64 <TIM_Base_SetConfig+0x40>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a42      	ldr	r2, [pc, #264]	@ (8002f58 <TIM_Base_SetConfig+0x134>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d007      	beq.n	8002e64 <TIM_Base_SetConfig+0x40>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a41      	ldr	r2, [pc, #260]	@ (8002f5c <TIM_Base_SetConfig+0x138>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d003      	beq.n	8002e64 <TIM_Base_SetConfig+0x40>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a40      	ldr	r2, [pc, #256]	@ (8002f60 <TIM_Base_SetConfig+0x13c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d108      	bne.n	8002e76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a35      	ldr	r2, [pc, #212]	@ (8002f50 <TIM_Base_SetConfig+0x12c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d01f      	beq.n	8002ebe <TIM_Base_SetConfig+0x9a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e84:	d01b      	beq.n	8002ebe <TIM_Base_SetConfig+0x9a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a32      	ldr	r2, [pc, #200]	@ (8002f54 <TIM_Base_SetConfig+0x130>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d017      	beq.n	8002ebe <TIM_Base_SetConfig+0x9a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a31      	ldr	r2, [pc, #196]	@ (8002f58 <TIM_Base_SetConfig+0x134>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d013      	beq.n	8002ebe <TIM_Base_SetConfig+0x9a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a30      	ldr	r2, [pc, #192]	@ (8002f5c <TIM_Base_SetConfig+0x138>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00f      	beq.n	8002ebe <TIM_Base_SetConfig+0x9a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a2f      	ldr	r2, [pc, #188]	@ (8002f60 <TIM_Base_SetConfig+0x13c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00b      	beq.n	8002ebe <TIM_Base_SetConfig+0x9a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a2e      	ldr	r2, [pc, #184]	@ (8002f64 <TIM_Base_SetConfig+0x140>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d007      	beq.n	8002ebe <TIM_Base_SetConfig+0x9a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a2d      	ldr	r2, [pc, #180]	@ (8002f68 <TIM_Base_SetConfig+0x144>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d003      	beq.n	8002ebe <TIM_Base_SetConfig+0x9a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a2c      	ldr	r2, [pc, #176]	@ (8002f6c <TIM_Base_SetConfig+0x148>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d108      	bne.n	8002ed0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a16      	ldr	r2, [pc, #88]	@ (8002f50 <TIM_Base_SetConfig+0x12c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00f      	beq.n	8002f1c <TIM_Base_SetConfig+0xf8>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a18      	ldr	r2, [pc, #96]	@ (8002f60 <TIM_Base_SetConfig+0x13c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d00b      	beq.n	8002f1c <TIM_Base_SetConfig+0xf8>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a17      	ldr	r2, [pc, #92]	@ (8002f64 <TIM_Base_SetConfig+0x140>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d007      	beq.n	8002f1c <TIM_Base_SetConfig+0xf8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a16      	ldr	r2, [pc, #88]	@ (8002f68 <TIM_Base_SetConfig+0x144>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d003      	beq.n	8002f1c <TIM_Base_SetConfig+0xf8>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a15      	ldr	r2, [pc, #84]	@ (8002f6c <TIM_Base_SetConfig+0x148>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d103      	bne.n	8002f24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	691a      	ldr	r2, [r3, #16]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d105      	bne.n	8002f42 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f023 0201 	bic.w	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	611a      	str	r2, [r3, #16]
  }
}
 8002f42:	bf00      	nop
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40012c00 	.word	0x40012c00
 8002f54:	40000400 	.word	0x40000400
 8002f58:	40000800 	.word	0x40000800
 8002f5c:	40000c00 	.word	0x40000c00
 8002f60:	40013400 	.word	0x40013400
 8002f64:	40014000 	.word	0x40014000
 8002f68:	40014400 	.word	0x40014400
 8002f6c:	40014800 	.word	0x40014800

08002f70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	f023 0201 	bic.w	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0303 	bic.w	r3, r3, #3
 8002faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f023 0302 	bic.w	r3, r3, #2
 8002fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a2c      	ldr	r2, [pc, #176]	@ (800307c <TIM_OC1_SetConfig+0x10c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00f      	beq.n	8002ff0 <TIM_OC1_SetConfig+0x80>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a2b      	ldr	r2, [pc, #172]	@ (8003080 <TIM_OC1_SetConfig+0x110>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d00b      	beq.n	8002ff0 <TIM_OC1_SetConfig+0x80>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a2a      	ldr	r2, [pc, #168]	@ (8003084 <TIM_OC1_SetConfig+0x114>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d007      	beq.n	8002ff0 <TIM_OC1_SetConfig+0x80>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a29      	ldr	r2, [pc, #164]	@ (8003088 <TIM_OC1_SetConfig+0x118>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d003      	beq.n	8002ff0 <TIM_OC1_SetConfig+0x80>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a28      	ldr	r2, [pc, #160]	@ (800308c <TIM_OC1_SetConfig+0x11c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d10c      	bne.n	800300a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f023 0308 	bic.w	r3, r3, #8
 8002ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f023 0304 	bic.w	r3, r3, #4
 8003008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a1b      	ldr	r2, [pc, #108]	@ (800307c <TIM_OC1_SetConfig+0x10c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00f      	beq.n	8003032 <TIM_OC1_SetConfig+0xc2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a1a      	ldr	r2, [pc, #104]	@ (8003080 <TIM_OC1_SetConfig+0x110>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00b      	beq.n	8003032 <TIM_OC1_SetConfig+0xc2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a19      	ldr	r2, [pc, #100]	@ (8003084 <TIM_OC1_SetConfig+0x114>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d007      	beq.n	8003032 <TIM_OC1_SetConfig+0xc2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a18      	ldr	r2, [pc, #96]	@ (8003088 <TIM_OC1_SetConfig+0x118>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d003      	beq.n	8003032 <TIM_OC1_SetConfig+0xc2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a17      	ldr	r2, [pc, #92]	@ (800308c <TIM_OC1_SetConfig+0x11c>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d111      	bne.n	8003056 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4313      	orrs	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	621a      	str	r2, [r3, #32]
}
 8003070:	bf00      	nop
 8003072:	371c      	adds	r7, #28
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	40012c00 	.word	0x40012c00
 8003080:	40013400 	.word	0x40013400
 8003084:	40014000 	.word	0x40014000
 8003088:	40014400 	.word	0x40014400
 800308c:	40014800 	.word	0x40014800

08003090 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	f023 0210 	bic.w	r2, r3, #16
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	021b      	lsls	r3, r3, #8
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f023 0320 	bic.w	r3, r3, #32
 80030de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a28      	ldr	r2, [pc, #160]	@ (8003190 <TIM_OC2_SetConfig+0x100>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d003      	beq.n	80030fc <TIM_OC2_SetConfig+0x6c>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a27      	ldr	r2, [pc, #156]	@ (8003194 <TIM_OC2_SetConfig+0x104>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d10d      	bne.n	8003118 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003116:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a1d      	ldr	r2, [pc, #116]	@ (8003190 <TIM_OC2_SetConfig+0x100>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d00f      	beq.n	8003140 <TIM_OC2_SetConfig+0xb0>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a1c      	ldr	r2, [pc, #112]	@ (8003194 <TIM_OC2_SetConfig+0x104>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d00b      	beq.n	8003140 <TIM_OC2_SetConfig+0xb0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a1b      	ldr	r2, [pc, #108]	@ (8003198 <TIM_OC2_SetConfig+0x108>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d007      	beq.n	8003140 <TIM_OC2_SetConfig+0xb0>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a1a      	ldr	r2, [pc, #104]	@ (800319c <TIM_OC2_SetConfig+0x10c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d003      	beq.n	8003140 <TIM_OC2_SetConfig+0xb0>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a19      	ldr	r2, [pc, #100]	@ (80031a0 <TIM_OC2_SetConfig+0x110>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d113      	bne.n	8003168 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003146:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800314e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	621a      	str	r2, [r3, #32]
}
 8003182:	bf00      	nop
 8003184:	371c      	adds	r7, #28
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40012c00 	.word	0x40012c00
 8003194:	40013400 	.word	0x40013400
 8003198:	40014000 	.word	0x40014000
 800319c:	40014400 	.word	0x40014400
 80031a0:	40014800 	.word	0x40014800

080031a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 0303 	bic.w	r3, r3, #3
 80031de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a27      	ldr	r2, [pc, #156]	@ (80032a0 <TIM_OC3_SetConfig+0xfc>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d003      	beq.n	800320e <TIM_OC3_SetConfig+0x6a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a26      	ldr	r2, [pc, #152]	@ (80032a4 <TIM_OC3_SetConfig+0x100>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d10d      	bne.n	800322a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	021b      	lsls	r3, r3, #8
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	4313      	orrs	r3, r2
 8003220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a1c      	ldr	r2, [pc, #112]	@ (80032a0 <TIM_OC3_SetConfig+0xfc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00f      	beq.n	8003252 <TIM_OC3_SetConfig+0xae>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a1b      	ldr	r2, [pc, #108]	@ (80032a4 <TIM_OC3_SetConfig+0x100>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00b      	beq.n	8003252 <TIM_OC3_SetConfig+0xae>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a1a      	ldr	r2, [pc, #104]	@ (80032a8 <TIM_OC3_SetConfig+0x104>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d007      	beq.n	8003252 <TIM_OC3_SetConfig+0xae>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a19      	ldr	r2, [pc, #100]	@ (80032ac <TIM_OC3_SetConfig+0x108>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d003      	beq.n	8003252 <TIM_OC3_SetConfig+0xae>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a18      	ldr	r2, [pc, #96]	@ (80032b0 <TIM_OC3_SetConfig+0x10c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d113      	bne.n	800327a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4313      	orrs	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	621a      	str	r2, [r3, #32]
}
 8003294:	bf00      	nop
 8003296:	371c      	adds	r7, #28
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	40012c00 	.word	0x40012c00
 80032a4:	40013400 	.word	0x40013400
 80032a8:	40014000 	.word	0x40014000
 80032ac:	40014400 	.word	0x40014400
 80032b0:	40014800 	.word	0x40014800

080032b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	021b      	lsls	r3, r3, #8
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	031b      	lsls	r3, r3, #12
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a18      	ldr	r2, [pc, #96]	@ (8003374 <TIM_OC4_SetConfig+0xc0>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00f      	beq.n	8003338 <TIM_OC4_SetConfig+0x84>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a17      	ldr	r2, [pc, #92]	@ (8003378 <TIM_OC4_SetConfig+0xc4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00b      	beq.n	8003338 <TIM_OC4_SetConfig+0x84>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a16      	ldr	r2, [pc, #88]	@ (800337c <TIM_OC4_SetConfig+0xc8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d007      	beq.n	8003338 <TIM_OC4_SetConfig+0x84>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a15      	ldr	r2, [pc, #84]	@ (8003380 <TIM_OC4_SetConfig+0xcc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d003      	beq.n	8003338 <TIM_OC4_SetConfig+0x84>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a14      	ldr	r2, [pc, #80]	@ (8003384 <TIM_OC4_SetConfig+0xd0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d109      	bne.n	800334c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800333e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	019b      	lsls	r3, r3, #6
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	621a      	str	r2, [r3, #32]
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40012c00 	.word	0x40012c00
 8003378:	40013400 	.word	0x40013400
 800337c:	40014000 	.word	0x40014000
 8003380:	40014400 	.word	0x40014400
 8003384:	40014800 	.word	0x40014800

08003388 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80033cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	041b      	lsls	r3, r3, #16
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a17      	ldr	r2, [pc, #92]	@ (800343c <TIM_OC5_SetConfig+0xb4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00f      	beq.n	8003402 <TIM_OC5_SetConfig+0x7a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a16      	ldr	r2, [pc, #88]	@ (8003440 <TIM_OC5_SetConfig+0xb8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00b      	beq.n	8003402 <TIM_OC5_SetConfig+0x7a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a15      	ldr	r2, [pc, #84]	@ (8003444 <TIM_OC5_SetConfig+0xbc>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d007      	beq.n	8003402 <TIM_OC5_SetConfig+0x7a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a14      	ldr	r2, [pc, #80]	@ (8003448 <TIM_OC5_SetConfig+0xc0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d003      	beq.n	8003402 <TIM_OC5_SetConfig+0x7a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a13      	ldr	r2, [pc, #76]	@ (800344c <TIM_OC5_SetConfig+0xc4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d109      	bne.n	8003416 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003408:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4313      	orrs	r3, r2
 8003414:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	621a      	str	r2, [r3, #32]
}
 8003430:	bf00      	nop
 8003432:	371c      	adds	r7, #28
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	40012c00 	.word	0x40012c00
 8003440:	40013400 	.word	0x40013400
 8003444:	40014000 	.word	0x40014000
 8003448:	40014400 	.word	0x40014400
 800344c:	40014800 	.word	0x40014800

08003450 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800347e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	051b      	lsls	r3, r3, #20
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a18      	ldr	r2, [pc, #96]	@ (8003508 <TIM_OC6_SetConfig+0xb8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d00f      	beq.n	80034cc <TIM_OC6_SetConfig+0x7c>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a17      	ldr	r2, [pc, #92]	@ (800350c <TIM_OC6_SetConfig+0xbc>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00b      	beq.n	80034cc <TIM_OC6_SetConfig+0x7c>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a16      	ldr	r2, [pc, #88]	@ (8003510 <TIM_OC6_SetConfig+0xc0>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d007      	beq.n	80034cc <TIM_OC6_SetConfig+0x7c>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a15      	ldr	r2, [pc, #84]	@ (8003514 <TIM_OC6_SetConfig+0xc4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d003      	beq.n	80034cc <TIM_OC6_SetConfig+0x7c>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a14      	ldr	r2, [pc, #80]	@ (8003518 <TIM_OC6_SetConfig+0xc8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d109      	bne.n	80034e0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	029b      	lsls	r3, r3, #10
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	621a      	str	r2, [r3, #32]
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40012c00 	.word	0x40012c00
 800350c:	40013400 	.word	0x40013400
 8003510:	40014000 	.word	0x40014000
 8003514:	40014400 	.word	0x40014400
 8003518:	40014800 	.word	0x40014800

0800351c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	2201      	movs	r2, #1
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a1a      	ldr	r2, [r3, #32]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	43db      	mvns	r3, r3
 800353e:	401a      	ands	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a1a      	ldr	r2, [r3, #32]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	fa01 f303 	lsl.w	r3, r1, r3
 8003554:	431a      	orrs	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	621a      	str	r2, [r3, #32]
}
 800355a:	bf00      	nop
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e040      	b.n	80035fa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800357c:	2b00      	cmp	r3, #0
 800357e:	d106      	bne.n	800358e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7fd fa5b 	bl	8000a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2224      	movs	r2, #36	@ 0x24
 8003592:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0201 	bic.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fb69 	bl	8003c84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f8ae 	bl	8003714 <UART_SetConfig>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e01b      	b.n	80035fa <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 0201 	orr.w	r2, r2, #1
 80035f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fbe8 	bl	8003dc8 <UART_CheckIdleState>
 80035f8:	4603      	mov	r3, r0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b08a      	sub	sp, #40	@ 0x28
 8003606:	af02      	add	r7, sp, #8
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	603b      	str	r3, [r7, #0]
 800360e:	4613      	mov	r3, r2
 8003610:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003616:	2b20      	cmp	r3, #32
 8003618:	d177      	bne.n	800370a <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_UART_Transmit+0x24>
 8003620:	88fb      	ldrh	r3, [r7, #6]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e070      	b.n	800370c <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2221      	movs	r2, #33	@ 0x21
 8003636:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003638:	f7fd fb72 	bl	8000d20 <HAL_GetTick>
 800363c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	88fa      	ldrh	r2, [r7, #6]
 8003642:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	88fa      	ldrh	r2, [r7, #6]
 800364a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003656:	d108      	bne.n	800366a <HAL_UART_Transmit+0x68>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d104      	bne.n	800366a <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003660:	2300      	movs	r3, #0
 8003662:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	61bb      	str	r3, [r7, #24]
 8003668:	e003      	b.n	8003672 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800366e:	2300      	movs	r3, #0
 8003670:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003672:	e02f      	b.n	80036d4 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2200      	movs	r2, #0
 800367c:	2180      	movs	r1, #128	@ 0x80
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 fc4a 	bl	8003f18 <UART_WaitOnFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d004      	beq.n	8003694 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e03b      	b.n	800370c <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10b      	bne.n	80036b2 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	881a      	ldrh	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036a6:	b292      	uxth	r2, r2
 80036a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	3302      	adds	r3, #2
 80036ae:	61bb      	str	r3, [r7, #24]
 80036b0:	e007      	b.n	80036c2 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	781a      	ldrb	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	3301      	adds	r3, #1
 80036c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1c9      	bne.n	8003674 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	2200      	movs	r2, #0
 80036e8:	2140      	movs	r1, #64	@ 0x40
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 fc14 	bl	8003f18 <UART_WaitOnFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d004      	beq.n	8003700 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2220      	movs	r2, #32
 80036fa:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e005      	b.n	800370c <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2220      	movs	r2, #32
 8003704:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	e000      	b.n	800370c <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800370a:	2302      	movs	r3, #2
  }
}
 800370c:	4618      	mov	r0, r3
 800370e:	3720      	adds	r7, #32
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003718:	b08a      	sub	sp, #40	@ 0x28
 800371a:	af00      	add	r7, sp, #0
 800371c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	431a      	orrs	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	431a      	orrs	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	4313      	orrs	r3, r2
 800373a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4ba4      	ldr	r3, [pc, #656]	@ (80039d4 <UART_SetConfig+0x2c0>)
 8003744:	4013      	ands	r3, r2
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800374c:	430b      	orrs	r3, r1
 800374e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a99      	ldr	r2, [pc, #612]	@ (80039d8 <UART_SetConfig+0x2c4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d004      	beq.n	8003780 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800377c:	4313      	orrs	r3, r2
 800377e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003790:	430a      	orrs	r2, r1
 8003792:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a90      	ldr	r2, [pc, #576]	@ (80039dc <UART_SetConfig+0x2c8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d126      	bne.n	80037ec <UART_SetConfig+0xd8>
 800379e:	4b90      	ldr	r3, [pc, #576]	@ (80039e0 <UART_SetConfig+0x2cc>)
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d81b      	bhi.n	80037e4 <UART_SetConfig+0xd0>
 80037ac:	a201      	add	r2, pc, #4	@ (adr r2, 80037b4 <UART_SetConfig+0xa0>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	080037c5 	.word	0x080037c5
 80037b8:	080037d5 	.word	0x080037d5
 80037bc:	080037cd 	.word	0x080037cd
 80037c0:	080037dd 	.word	0x080037dd
 80037c4:	2301      	movs	r3, #1
 80037c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ca:	e116      	b.n	80039fa <UART_SetConfig+0x2e6>
 80037cc:	2302      	movs	r3, #2
 80037ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037d2:	e112      	b.n	80039fa <UART_SetConfig+0x2e6>
 80037d4:	2304      	movs	r3, #4
 80037d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037da:	e10e      	b.n	80039fa <UART_SetConfig+0x2e6>
 80037dc:	2308      	movs	r3, #8
 80037de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037e2:	e10a      	b.n	80039fa <UART_SetConfig+0x2e6>
 80037e4:	2310      	movs	r3, #16
 80037e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ea:	e106      	b.n	80039fa <UART_SetConfig+0x2e6>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a7c      	ldr	r2, [pc, #496]	@ (80039e4 <UART_SetConfig+0x2d0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d138      	bne.n	8003868 <UART_SetConfig+0x154>
 80037f6:	4b7a      	ldr	r3, [pc, #488]	@ (80039e0 <UART_SetConfig+0x2cc>)
 80037f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fc:	f003 030c 	and.w	r3, r3, #12
 8003800:	2b0c      	cmp	r3, #12
 8003802:	d82d      	bhi.n	8003860 <UART_SetConfig+0x14c>
 8003804:	a201      	add	r2, pc, #4	@ (adr r2, 800380c <UART_SetConfig+0xf8>)
 8003806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380a:	bf00      	nop
 800380c:	08003841 	.word	0x08003841
 8003810:	08003861 	.word	0x08003861
 8003814:	08003861 	.word	0x08003861
 8003818:	08003861 	.word	0x08003861
 800381c:	08003851 	.word	0x08003851
 8003820:	08003861 	.word	0x08003861
 8003824:	08003861 	.word	0x08003861
 8003828:	08003861 	.word	0x08003861
 800382c:	08003849 	.word	0x08003849
 8003830:	08003861 	.word	0x08003861
 8003834:	08003861 	.word	0x08003861
 8003838:	08003861 	.word	0x08003861
 800383c:	08003859 	.word	0x08003859
 8003840:	2300      	movs	r3, #0
 8003842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003846:	e0d8      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003848:	2302      	movs	r3, #2
 800384a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800384e:	e0d4      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003850:	2304      	movs	r3, #4
 8003852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003856:	e0d0      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003858:	2308      	movs	r3, #8
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800385e:	e0cc      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003860:	2310      	movs	r3, #16
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003866:	e0c8      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a5e      	ldr	r2, [pc, #376]	@ (80039e8 <UART_SetConfig+0x2d4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d125      	bne.n	80038be <UART_SetConfig+0x1aa>
 8003872:	4b5b      	ldr	r3, [pc, #364]	@ (80039e0 <UART_SetConfig+0x2cc>)
 8003874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003878:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800387c:	2b30      	cmp	r3, #48	@ 0x30
 800387e:	d016      	beq.n	80038ae <UART_SetConfig+0x19a>
 8003880:	2b30      	cmp	r3, #48	@ 0x30
 8003882:	d818      	bhi.n	80038b6 <UART_SetConfig+0x1a2>
 8003884:	2b20      	cmp	r3, #32
 8003886:	d00a      	beq.n	800389e <UART_SetConfig+0x18a>
 8003888:	2b20      	cmp	r3, #32
 800388a:	d814      	bhi.n	80038b6 <UART_SetConfig+0x1a2>
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <UART_SetConfig+0x182>
 8003890:	2b10      	cmp	r3, #16
 8003892:	d008      	beq.n	80038a6 <UART_SetConfig+0x192>
 8003894:	e00f      	b.n	80038b6 <UART_SetConfig+0x1a2>
 8003896:	2300      	movs	r3, #0
 8003898:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800389c:	e0ad      	b.n	80039fa <UART_SetConfig+0x2e6>
 800389e:	2302      	movs	r3, #2
 80038a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038a4:	e0a9      	b.n	80039fa <UART_SetConfig+0x2e6>
 80038a6:	2304      	movs	r3, #4
 80038a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ac:	e0a5      	b.n	80039fa <UART_SetConfig+0x2e6>
 80038ae:	2308      	movs	r3, #8
 80038b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038b4:	e0a1      	b.n	80039fa <UART_SetConfig+0x2e6>
 80038b6:	2310      	movs	r3, #16
 80038b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038bc:	e09d      	b.n	80039fa <UART_SetConfig+0x2e6>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a4a      	ldr	r2, [pc, #296]	@ (80039ec <UART_SetConfig+0x2d8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d125      	bne.n	8003914 <UART_SetConfig+0x200>
 80038c8:	4b45      	ldr	r3, [pc, #276]	@ (80039e0 <UART_SetConfig+0x2cc>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80038d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80038d4:	d016      	beq.n	8003904 <UART_SetConfig+0x1f0>
 80038d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80038d8:	d818      	bhi.n	800390c <UART_SetConfig+0x1f8>
 80038da:	2b80      	cmp	r3, #128	@ 0x80
 80038dc:	d00a      	beq.n	80038f4 <UART_SetConfig+0x1e0>
 80038de:	2b80      	cmp	r3, #128	@ 0x80
 80038e0:	d814      	bhi.n	800390c <UART_SetConfig+0x1f8>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <UART_SetConfig+0x1d8>
 80038e6:	2b40      	cmp	r3, #64	@ 0x40
 80038e8:	d008      	beq.n	80038fc <UART_SetConfig+0x1e8>
 80038ea:	e00f      	b.n	800390c <UART_SetConfig+0x1f8>
 80038ec:	2300      	movs	r3, #0
 80038ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038f2:	e082      	b.n	80039fa <UART_SetConfig+0x2e6>
 80038f4:	2302      	movs	r3, #2
 80038f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038fa:	e07e      	b.n	80039fa <UART_SetConfig+0x2e6>
 80038fc:	2304      	movs	r3, #4
 80038fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003902:	e07a      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003904:	2308      	movs	r3, #8
 8003906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800390a:	e076      	b.n	80039fa <UART_SetConfig+0x2e6>
 800390c:	2310      	movs	r3, #16
 800390e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003912:	e072      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a35      	ldr	r2, [pc, #212]	@ (80039f0 <UART_SetConfig+0x2dc>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d12a      	bne.n	8003974 <UART_SetConfig+0x260>
 800391e:	4b30      	ldr	r3, [pc, #192]	@ (80039e0 <UART_SetConfig+0x2cc>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003924:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003928:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800392c:	d01a      	beq.n	8003964 <UART_SetConfig+0x250>
 800392e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003932:	d81b      	bhi.n	800396c <UART_SetConfig+0x258>
 8003934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003938:	d00c      	beq.n	8003954 <UART_SetConfig+0x240>
 800393a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800393e:	d815      	bhi.n	800396c <UART_SetConfig+0x258>
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <UART_SetConfig+0x238>
 8003944:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003948:	d008      	beq.n	800395c <UART_SetConfig+0x248>
 800394a:	e00f      	b.n	800396c <UART_SetConfig+0x258>
 800394c:	2300      	movs	r3, #0
 800394e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003952:	e052      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003954:	2302      	movs	r3, #2
 8003956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800395a:	e04e      	b.n	80039fa <UART_SetConfig+0x2e6>
 800395c:	2304      	movs	r3, #4
 800395e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003962:	e04a      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003964:	2308      	movs	r3, #8
 8003966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800396a:	e046      	b.n	80039fa <UART_SetConfig+0x2e6>
 800396c:	2310      	movs	r3, #16
 800396e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003972:	e042      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a17      	ldr	r2, [pc, #92]	@ (80039d8 <UART_SetConfig+0x2c4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d13a      	bne.n	80039f4 <UART_SetConfig+0x2e0>
 800397e:	4b18      	ldr	r3, [pc, #96]	@ (80039e0 <UART_SetConfig+0x2cc>)
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003984:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003988:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800398c:	d01a      	beq.n	80039c4 <UART_SetConfig+0x2b0>
 800398e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003992:	d81b      	bhi.n	80039cc <UART_SetConfig+0x2b8>
 8003994:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003998:	d00c      	beq.n	80039b4 <UART_SetConfig+0x2a0>
 800399a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800399e:	d815      	bhi.n	80039cc <UART_SetConfig+0x2b8>
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <UART_SetConfig+0x298>
 80039a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039a8:	d008      	beq.n	80039bc <UART_SetConfig+0x2a8>
 80039aa:	e00f      	b.n	80039cc <UART_SetConfig+0x2b8>
 80039ac:	2300      	movs	r3, #0
 80039ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039b2:	e022      	b.n	80039fa <UART_SetConfig+0x2e6>
 80039b4:	2302      	movs	r3, #2
 80039b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ba:	e01e      	b.n	80039fa <UART_SetConfig+0x2e6>
 80039bc:	2304      	movs	r3, #4
 80039be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039c2:	e01a      	b.n	80039fa <UART_SetConfig+0x2e6>
 80039c4:	2308      	movs	r3, #8
 80039c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ca:	e016      	b.n	80039fa <UART_SetConfig+0x2e6>
 80039cc:	2310      	movs	r3, #16
 80039ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039d2:	e012      	b.n	80039fa <UART_SetConfig+0x2e6>
 80039d4:	efff69f3 	.word	0xefff69f3
 80039d8:	40008000 	.word	0x40008000
 80039dc:	40013800 	.word	0x40013800
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40004400 	.word	0x40004400
 80039e8:	40004800 	.word	0x40004800
 80039ec:	40004c00 	.word	0x40004c00
 80039f0:	40005000 	.word	0x40005000
 80039f4:	2310      	movs	r3, #16
 80039f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a9f      	ldr	r2, [pc, #636]	@ (8003c7c <UART_SetConfig+0x568>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d17a      	bne.n	8003afa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d824      	bhi.n	8003a56 <UART_SetConfig+0x342>
 8003a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a14 <UART_SetConfig+0x300>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003a39 	.word	0x08003a39
 8003a18:	08003a57 	.word	0x08003a57
 8003a1c:	08003a41 	.word	0x08003a41
 8003a20:	08003a57 	.word	0x08003a57
 8003a24:	08003a47 	.word	0x08003a47
 8003a28:	08003a57 	.word	0x08003a57
 8003a2c:	08003a57 	.word	0x08003a57
 8003a30:	08003a57 	.word	0x08003a57
 8003a34:	08003a4f 	.word	0x08003a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a38:	f7fe fa3a 	bl	8001eb0 <HAL_RCC_GetPCLK1Freq>
 8003a3c:	61f8      	str	r0, [r7, #28]
        break;
 8003a3e:	e010      	b.n	8003a62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a40:	4b8f      	ldr	r3, [pc, #572]	@ (8003c80 <UART_SetConfig+0x56c>)
 8003a42:	61fb      	str	r3, [r7, #28]
        break;
 8003a44:	e00d      	b.n	8003a62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a46:	f7fe f99b 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8003a4a:	61f8      	str	r0, [r7, #28]
        break;
 8003a4c:	e009      	b.n	8003a62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a52:	61fb      	str	r3, [r7, #28]
        break;
 8003a54:	e005      	b.n	8003a62 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80fb 	beq.w	8003c60 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	4413      	add	r3, r2
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d305      	bcc.n	8003a86 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d903      	bls.n	8003a8e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003a8c:	e0e8      	b.n	8003c60 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	2200      	movs	r2, #0
 8003a92:	461c      	mov	r4, r3
 8003a94:	4615      	mov	r5, r2
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	022b      	lsls	r3, r5, #8
 8003aa0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003aa4:	0222      	lsls	r2, r4, #8
 8003aa6:	68f9      	ldr	r1, [r7, #12]
 8003aa8:	6849      	ldr	r1, [r1, #4]
 8003aaa:	0849      	lsrs	r1, r1, #1
 8003aac:	2000      	movs	r0, #0
 8003aae:	4688      	mov	r8, r1
 8003ab0:	4681      	mov	r9, r0
 8003ab2:	eb12 0a08 	adds.w	sl, r2, r8
 8003ab6:	eb43 0b09 	adc.w	fp, r3, r9
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	603b      	str	r3, [r7, #0]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ac8:	4650      	mov	r0, sl
 8003aca:	4659      	mov	r1, fp
 8003acc:	f7fc fbd8 	bl	8000280 <__aeabi_uldivmod>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ade:	d308      	bcc.n	8003af2 <UART_SetConfig+0x3de>
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ae6:	d204      	bcs.n	8003af2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	60da      	str	r2, [r3, #12]
 8003af0:	e0b6      	b.n	8003c60 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003af8:	e0b2      	b.n	8003c60 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b02:	d15e      	bne.n	8003bc2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003b04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d828      	bhi.n	8003b5e <UART_SetConfig+0x44a>
 8003b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b14 <UART_SetConfig+0x400>)
 8003b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b12:	bf00      	nop
 8003b14:	08003b39 	.word	0x08003b39
 8003b18:	08003b41 	.word	0x08003b41
 8003b1c:	08003b49 	.word	0x08003b49
 8003b20:	08003b5f 	.word	0x08003b5f
 8003b24:	08003b4f 	.word	0x08003b4f
 8003b28:	08003b5f 	.word	0x08003b5f
 8003b2c:	08003b5f 	.word	0x08003b5f
 8003b30:	08003b5f 	.word	0x08003b5f
 8003b34:	08003b57 	.word	0x08003b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b38:	f7fe f9ba 	bl	8001eb0 <HAL_RCC_GetPCLK1Freq>
 8003b3c:	61f8      	str	r0, [r7, #28]
        break;
 8003b3e:	e014      	b.n	8003b6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b40:	f7fe f9cc 	bl	8001edc <HAL_RCC_GetPCLK2Freq>
 8003b44:	61f8      	str	r0, [r7, #28]
        break;
 8003b46:	e010      	b.n	8003b6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b48:	4b4d      	ldr	r3, [pc, #308]	@ (8003c80 <UART_SetConfig+0x56c>)
 8003b4a:	61fb      	str	r3, [r7, #28]
        break;
 8003b4c:	e00d      	b.n	8003b6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b4e:	f7fe f917 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8003b52:	61f8      	str	r0, [r7, #28]
        break;
 8003b54:	e009      	b.n	8003b6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b5a:	61fb      	str	r3, [r7, #28]
        break;
 8003b5c:	e005      	b.n	8003b6a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d077      	beq.n	8003c60 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	005a      	lsls	r2, r3, #1
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	085b      	lsrs	r3, r3, #1
 8003b7a:	441a      	add	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	2b0f      	cmp	r3, #15
 8003b8a:	d916      	bls.n	8003bba <UART_SetConfig+0x4a6>
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b92:	d212      	bcs.n	8003bba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	f023 030f 	bic.w	r3, r3, #15
 8003b9c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	085b      	lsrs	r3, r3, #1
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	8afb      	ldrh	r3, [r7, #22]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	8afa      	ldrh	r2, [r7, #22]
 8003bb6:	60da      	str	r2, [r3, #12]
 8003bb8:	e052      	b.n	8003c60 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003bc0:	e04e      	b.n	8003c60 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bc2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d827      	bhi.n	8003c1a <UART_SetConfig+0x506>
 8003bca:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd0 <UART_SetConfig+0x4bc>)
 8003bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd0:	08003bf5 	.word	0x08003bf5
 8003bd4:	08003bfd 	.word	0x08003bfd
 8003bd8:	08003c05 	.word	0x08003c05
 8003bdc:	08003c1b 	.word	0x08003c1b
 8003be0:	08003c0b 	.word	0x08003c0b
 8003be4:	08003c1b 	.word	0x08003c1b
 8003be8:	08003c1b 	.word	0x08003c1b
 8003bec:	08003c1b 	.word	0x08003c1b
 8003bf0:	08003c13 	.word	0x08003c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf4:	f7fe f95c 	bl	8001eb0 <HAL_RCC_GetPCLK1Freq>
 8003bf8:	61f8      	str	r0, [r7, #28]
        break;
 8003bfa:	e014      	b.n	8003c26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bfc:	f7fe f96e 	bl	8001edc <HAL_RCC_GetPCLK2Freq>
 8003c00:	61f8      	str	r0, [r7, #28]
        break;
 8003c02:	e010      	b.n	8003c26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c04:	4b1e      	ldr	r3, [pc, #120]	@ (8003c80 <UART_SetConfig+0x56c>)
 8003c06:	61fb      	str	r3, [r7, #28]
        break;
 8003c08:	e00d      	b.n	8003c26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c0a:	f7fe f8b9 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8003c0e:	61f8      	str	r0, [r7, #28]
        break;
 8003c10:	e009      	b.n	8003c26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c16:	61fb      	str	r3, [r7, #28]
        break;
 8003c18:	e005      	b.n	8003c26 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c24:	bf00      	nop
    }

    if (pclk != 0U)
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d019      	beq.n	8003c60 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	085a      	lsrs	r2, r3, #1
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	441a      	add	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	2b0f      	cmp	r3, #15
 8003c44:	d909      	bls.n	8003c5a <UART_SetConfig+0x546>
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c4c:	d205      	bcs.n	8003c5a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60da      	str	r2, [r3, #12]
 8003c58:	e002      	b.n	8003c60 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003c6c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3728      	adds	r7, #40	@ 0x28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40008000 	.word	0x40008000
 8003c80:	00f42400 	.word	0x00f42400

08003c84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf6:	f003 0304 	and.w	r3, r3, #4
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d01a      	beq.n	8003d9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d82:	d10a      	bne.n	8003d9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	605a      	str	r2, [r3, #4]
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b098      	sub	sp, #96	@ 0x60
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dd8:	f7fc ffa2 	bl	8000d20 <HAL_GetTick>
 8003ddc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d12e      	bne.n	8003e4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003df4:	2200      	movs	r2, #0
 8003df6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f88c 	bl	8003f18 <UART_WaitOnFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d021      	beq.n	8003e4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e0e:	e853 3f00 	ldrex	r3, [r3]
 8003e12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e24:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e26:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e2c:	e841 2300 	strex	r3, r2, [r1]
 8003e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1e6      	bne.n	8003e06 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e062      	b.n	8003f10 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d149      	bne.n	8003eec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e60:	2200      	movs	r2, #0
 8003e62:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f856 	bl	8003f18 <UART_WaitOnFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d03c      	beq.n	8003eec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7a:	e853 3f00 	ldrex	r3, [r3]
 8003e7e:	623b      	str	r3, [r7, #32]
   return(result);
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e90:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e6      	bne.n	8003e72 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	e853 3f00 	ldrex	r3, [r3]
 8003eb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0301 	bic.w	r3, r3, #1
 8003eba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3308      	adds	r3, #8
 8003ec2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ec4:	61fa      	str	r2, [r7, #28]
 8003ec6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec8:	69b9      	ldr	r1, [r7, #24]
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	e841 2300 	strex	r3, r2, [r1]
 8003ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e5      	bne.n	8003ea4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e011      	b.n	8003f10 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3758      	adds	r7, #88	@ 0x58
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	4613      	mov	r3, r2
 8003f26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f28:	e04f      	b.n	8003fca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f30:	d04b      	beq.n	8003fca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f32:	f7fc fef5 	bl	8000d20 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d302      	bcc.n	8003f48 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e04e      	b.n	8003fea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d037      	beq.n	8003fca <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2b80      	cmp	r3, #128	@ 0x80
 8003f5e:	d034      	beq.n	8003fca <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b40      	cmp	r3, #64	@ 0x40
 8003f64:	d031      	beq.n	8003fca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d110      	bne.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2208      	movs	r2, #8
 8003f7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f838 	bl	8003ff2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2208      	movs	r2, #8
 8003f86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e029      	b.n	8003fea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fa4:	d111      	bne.n	8003fca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 f81e 	bl	8003ff2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e00f      	b.n	8003fea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69da      	ldr	r2, [r3, #28]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	bf0c      	ite	eq
 8003fda:	2301      	moveq	r3, #1
 8003fdc:	2300      	movne	r3, #0
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d0a0      	beq.n	8003f2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b095      	sub	sp, #84	@ 0x54
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800400e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004018:	643b      	str	r3, [r7, #64]	@ 0x40
 800401a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800401e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e6      	bne.n	8003ffa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3308      	adds	r3, #8
 8004032:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	e853 3f00 	ldrex	r3, [r3]
 800403a:	61fb      	str	r3, [r7, #28]
   return(result);
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f023 0301 	bic.w	r3, r3, #1
 8004042:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3308      	adds	r3, #8
 800404a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800404c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800404e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004050:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004052:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004054:	e841 2300 	strex	r3, r2, [r1]
 8004058:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800405a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e5      	bne.n	800402c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004064:	2b01      	cmp	r3, #1
 8004066:	d118      	bne.n	800409a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	e853 3f00 	ldrex	r3, [r3]
 8004074:	60bb      	str	r3, [r7, #8]
   return(result);
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f023 0310 	bic.w	r3, r3, #16
 800407c:	647b      	str	r3, [r7, #68]	@ 0x44
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004086:	61bb      	str	r3, [r7, #24]
 8004088:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	6979      	ldr	r1, [r7, #20]
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	e841 2300 	strex	r3, r2, [r1]
 8004092:	613b      	str	r3, [r7, #16]
   return(result);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1e6      	bne.n	8004068 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80040ae:	bf00      	nop
 80040b0:	3754      	adds	r7, #84	@ 0x54
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
	...

080040bc <siprintf>:
 80040bc:	b40e      	push	{r1, r2, r3}
 80040be:	b510      	push	{r4, lr}
 80040c0:	b09d      	sub	sp, #116	@ 0x74
 80040c2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80040c4:	9002      	str	r0, [sp, #8]
 80040c6:	9006      	str	r0, [sp, #24]
 80040c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80040cc:	480a      	ldr	r0, [pc, #40]	@ (80040f8 <siprintf+0x3c>)
 80040ce:	9107      	str	r1, [sp, #28]
 80040d0:	9104      	str	r1, [sp, #16]
 80040d2:	490a      	ldr	r1, [pc, #40]	@ (80040fc <siprintf+0x40>)
 80040d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80040d8:	9105      	str	r1, [sp, #20]
 80040da:	2400      	movs	r4, #0
 80040dc:	a902      	add	r1, sp, #8
 80040de:	6800      	ldr	r0, [r0, #0]
 80040e0:	9301      	str	r3, [sp, #4]
 80040e2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80040e4:	f000 f994 	bl	8004410 <_svfiprintf_r>
 80040e8:	9b02      	ldr	r3, [sp, #8]
 80040ea:	701c      	strb	r4, [r3, #0]
 80040ec:	b01d      	add	sp, #116	@ 0x74
 80040ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040f2:	b003      	add	sp, #12
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	20000018 	.word	0x20000018
 80040fc:	ffff0208 	.word	0xffff0208

08004100 <memset>:
 8004100:	4402      	add	r2, r0
 8004102:	4603      	mov	r3, r0
 8004104:	4293      	cmp	r3, r2
 8004106:	d100      	bne.n	800410a <memset+0xa>
 8004108:	4770      	bx	lr
 800410a:	f803 1b01 	strb.w	r1, [r3], #1
 800410e:	e7f9      	b.n	8004104 <memset+0x4>

08004110 <__errno>:
 8004110:	4b01      	ldr	r3, [pc, #4]	@ (8004118 <__errno+0x8>)
 8004112:	6818      	ldr	r0, [r3, #0]
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000018 	.word	0x20000018

0800411c <__libc_init_array>:
 800411c:	b570      	push	{r4, r5, r6, lr}
 800411e:	4d0d      	ldr	r5, [pc, #52]	@ (8004154 <__libc_init_array+0x38>)
 8004120:	4c0d      	ldr	r4, [pc, #52]	@ (8004158 <__libc_init_array+0x3c>)
 8004122:	1b64      	subs	r4, r4, r5
 8004124:	10a4      	asrs	r4, r4, #2
 8004126:	2600      	movs	r6, #0
 8004128:	42a6      	cmp	r6, r4
 800412a:	d109      	bne.n	8004140 <__libc_init_array+0x24>
 800412c:	4d0b      	ldr	r5, [pc, #44]	@ (800415c <__libc_init_array+0x40>)
 800412e:	4c0c      	ldr	r4, [pc, #48]	@ (8004160 <__libc_init_array+0x44>)
 8004130:	f000 fc64 	bl	80049fc <_init>
 8004134:	1b64      	subs	r4, r4, r5
 8004136:	10a4      	asrs	r4, r4, #2
 8004138:	2600      	movs	r6, #0
 800413a:	42a6      	cmp	r6, r4
 800413c:	d105      	bne.n	800414a <__libc_init_array+0x2e>
 800413e:	bd70      	pop	{r4, r5, r6, pc}
 8004140:	f855 3b04 	ldr.w	r3, [r5], #4
 8004144:	4798      	blx	r3
 8004146:	3601      	adds	r6, #1
 8004148:	e7ee      	b.n	8004128 <__libc_init_array+0xc>
 800414a:	f855 3b04 	ldr.w	r3, [r5], #4
 800414e:	4798      	blx	r3
 8004150:	3601      	adds	r6, #1
 8004152:	e7f2      	b.n	800413a <__libc_init_array+0x1e>
 8004154:	08004ab8 	.word	0x08004ab8
 8004158:	08004ab8 	.word	0x08004ab8
 800415c:	08004ab8 	.word	0x08004ab8
 8004160:	08004abc 	.word	0x08004abc

08004164 <__retarget_lock_acquire_recursive>:
 8004164:	4770      	bx	lr

08004166 <__retarget_lock_release_recursive>:
 8004166:	4770      	bx	lr

08004168 <_free_r>:
 8004168:	b538      	push	{r3, r4, r5, lr}
 800416a:	4605      	mov	r5, r0
 800416c:	2900      	cmp	r1, #0
 800416e:	d041      	beq.n	80041f4 <_free_r+0x8c>
 8004170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004174:	1f0c      	subs	r4, r1, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	bfb8      	it	lt
 800417a:	18e4      	addlt	r4, r4, r3
 800417c:	f000 f8e0 	bl	8004340 <__malloc_lock>
 8004180:	4a1d      	ldr	r2, [pc, #116]	@ (80041f8 <_free_r+0x90>)
 8004182:	6813      	ldr	r3, [r2, #0]
 8004184:	b933      	cbnz	r3, 8004194 <_free_r+0x2c>
 8004186:	6063      	str	r3, [r4, #4]
 8004188:	6014      	str	r4, [r2, #0]
 800418a:	4628      	mov	r0, r5
 800418c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004190:	f000 b8dc 	b.w	800434c <__malloc_unlock>
 8004194:	42a3      	cmp	r3, r4
 8004196:	d908      	bls.n	80041aa <_free_r+0x42>
 8004198:	6820      	ldr	r0, [r4, #0]
 800419a:	1821      	adds	r1, r4, r0
 800419c:	428b      	cmp	r3, r1
 800419e:	bf01      	itttt	eq
 80041a0:	6819      	ldreq	r1, [r3, #0]
 80041a2:	685b      	ldreq	r3, [r3, #4]
 80041a4:	1809      	addeq	r1, r1, r0
 80041a6:	6021      	streq	r1, [r4, #0]
 80041a8:	e7ed      	b.n	8004186 <_free_r+0x1e>
 80041aa:	461a      	mov	r2, r3
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	b10b      	cbz	r3, 80041b4 <_free_r+0x4c>
 80041b0:	42a3      	cmp	r3, r4
 80041b2:	d9fa      	bls.n	80041aa <_free_r+0x42>
 80041b4:	6811      	ldr	r1, [r2, #0]
 80041b6:	1850      	adds	r0, r2, r1
 80041b8:	42a0      	cmp	r0, r4
 80041ba:	d10b      	bne.n	80041d4 <_free_r+0x6c>
 80041bc:	6820      	ldr	r0, [r4, #0]
 80041be:	4401      	add	r1, r0
 80041c0:	1850      	adds	r0, r2, r1
 80041c2:	4283      	cmp	r3, r0
 80041c4:	6011      	str	r1, [r2, #0]
 80041c6:	d1e0      	bne.n	800418a <_free_r+0x22>
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	6053      	str	r3, [r2, #4]
 80041ce:	4408      	add	r0, r1
 80041d0:	6010      	str	r0, [r2, #0]
 80041d2:	e7da      	b.n	800418a <_free_r+0x22>
 80041d4:	d902      	bls.n	80041dc <_free_r+0x74>
 80041d6:	230c      	movs	r3, #12
 80041d8:	602b      	str	r3, [r5, #0]
 80041da:	e7d6      	b.n	800418a <_free_r+0x22>
 80041dc:	6820      	ldr	r0, [r4, #0]
 80041de:	1821      	adds	r1, r4, r0
 80041e0:	428b      	cmp	r3, r1
 80041e2:	bf04      	itt	eq
 80041e4:	6819      	ldreq	r1, [r3, #0]
 80041e6:	685b      	ldreq	r3, [r3, #4]
 80041e8:	6063      	str	r3, [r4, #4]
 80041ea:	bf04      	itt	eq
 80041ec:	1809      	addeq	r1, r1, r0
 80041ee:	6021      	streq	r1, [r4, #0]
 80041f0:	6054      	str	r4, [r2, #4]
 80041f2:	e7ca      	b.n	800418a <_free_r+0x22>
 80041f4:	bd38      	pop	{r3, r4, r5, pc}
 80041f6:	bf00      	nop
 80041f8:	200002a8 	.word	0x200002a8

080041fc <sbrk_aligned>:
 80041fc:	b570      	push	{r4, r5, r6, lr}
 80041fe:	4e0f      	ldr	r6, [pc, #60]	@ (800423c <sbrk_aligned+0x40>)
 8004200:	460c      	mov	r4, r1
 8004202:	6831      	ldr	r1, [r6, #0]
 8004204:	4605      	mov	r5, r0
 8004206:	b911      	cbnz	r1, 800420e <sbrk_aligned+0x12>
 8004208:	f000 fba4 	bl	8004954 <_sbrk_r>
 800420c:	6030      	str	r0, [r6, #0]
 800420e:	4621      	mov	r1, r4
 8004210:	4628      	mov	r0, r5
 8004212:	f000 fb9f 	bl	8004954 <_sbrk_r>
 8004216:	1c43      	adds	r3, r0, #1
 8004218:	d103      	bne.n	8004222 <sbrk_aligned+0x26>
 800421a:	f04f 34ff 	mov.w	r4, #4294967295
 800421e:	4620      	mov	r0, r4
 8004220:	bd70      	pop	{r4, r5, r6, pc}
 8004222:	1cc4      	adds	r4, r0, #3
 8004224:	f024 0403 	bic.w	r4, r4, #3
 8004228:	42a0      	cmp	r0, r4
 800422a:	d0f8      	beq.n	800421e <sbrk_aligned+0x22>
 800422c:	1a21      	subs	r1, r4, r0
 800422e:	4628      	mov	r0, r5
 8004230:	f000 fb90 	bl	8004954 <_sbrk_r>
 8004234:	3001      	adds	r0, #1
 8004236:	d1f2      	bne.n	800421e <sbrk_aligned+0x22>
 8004238:	e7ef      	b.n	800421a <sbrk_aligned+0x1e>
 800423a:	bf00      	nop
 800423c:	200002a4 	.word	0x200002a4

08004240 <_malloc_r>:
 8004240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004244:	1ccd      	adds	r5, r1, #3
 8004246:	f025 0503 	bic.w	r5, r5, #3
 800424a:	3508      	adds	r5, #8
 800424c:	2d0c      	cmp	r5, #12
 800424e:	bf38      	it	cc
 8004250:	250c      	movcc	r5, #12
 8004252:	2d00      	cmp	r5, #0
 8004254:	4606      	mov	r6, r0
 8004256:	db01      	blt.n	800425c <_malloc_r+0x1c>
 8004258:	42a9      	cmp	r1, r5
 800425a:	d904      	bls.n	8004266 <_malloc_r+0x26>
 800425c:	230c      	movs	r3, #12
 800425e:	6033      	str	r3, [r6, #0]
 8004260:	2000      	movs	r0, #0
 8004262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004266:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800433c <_malloc_r+0xfc>
 800426a:	f000 f869 	bl	8004340 <__malloc_lock>
 800426e:	f8d8 3000 	ldr.w	r3, [r8]
 8004272:	461c      	mov	r4, r3
 8004274:	bb44      	cbnz	r4, 80042c8 <_malloc_r+0x88>
 8004276:	4629      	mov	r1, r5
 8004278:	4630      	mov	r0, r6
 800427a:	f7ff ffbf 	bl	80041fc <sbrk_aligned>
 800427e:	1c43      	adds	r3, r0, #1
 8004280:	4604      	mov	r4, r0
 8004282:	d158      	bne.n	8004336 <_malloc_r+0xf6>
 8004284:	f8d8 4000 	ldr.w	r4, [r8]
 8004288:	4627      	mov	r7, r4
 800428a:	2f00      	cmp	r7, #0
 800428c:	d143      	bne.n	8004316 <_malloc_r+0xd6>
 800428e:	2c00      	cmp	r4, #0
 8004290:	d04b      	beq.n	800432a <_malloc_r+0xea>
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	4639      	mov	r1, r7
 8004296:	4630      	mov	r0, r6
 8004298:	eb04 0903 	add.w	r9, r4, r3
 800429c:	f000 fb5a 	bl	8004954 <_sbrk_r>
 80042a0:	4581      	cmp	r9, r0
 80042a2:	d142      	bne.n	800432a <_malloc_r+0xea>
 80042a4:	6821      	ldr	r1, [r4, #0]
 80042a6:	1a6d      	subs	r5, r5, r1
 80042a8:	4629      	mov	r1, r5
 80042aa:	4630      	mov	r0, r6
 80042ac:	f7ff ffa6 	bl	80041fc <sbrk_aligned>
 80042b0:	3001      	adds	r0, #1
 80042b2:	d03a      	beq.n	800432a <_malloc_r+0xea>
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	442b      	add	r3, r5
 80042b8:	6023      	str	r3, [r4, #0]
 80042ba:	f8d8 3000 	ldr.w	r3, [r8]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	bb62      	cbnz	r2, 800431c <_malloc_r+0xdc>
 80042c2:	f8c8 7000 	str.w	r7, [r8]
 80042c6:	e00f      	b.n	80042e8 <_malloc_r+0xa8>
 80042c8:	6822      	ldr	r2, [r4, #0]
 80042ca:	1b52      	subs	r2, r2, r5
 80042cc:	d420      	bmi.n	8004310 <_malloc_r+0xd0>
 80042ce:	2a0b      	cmp	r2, #11
 80042d0:	d917      	bls.n	8004302 <_malloc_r+0xc2>
 80042d2:	1961      	adds	r1, r4, r5
 80042d4:	42a3      	cmp	r3, r4
 80042d6:	6025      	str	r5, [r4, #0]
 80042d8:	bf18      	it	ne
 80042da:	6059      	strne	r1, [r3, #4]
 80042dc:	6863      	ldr	r3, [r4, #4]
 80042de:	bf08      	it	eq
 80042e0:	f8c8 1000 	streq.w	r1, [r8]
 80042e4:	5162      	str	r2, [r4, r5]
 80042e6:	604b      	str	r3, [r1, #4]
 80042e8:	4630      	mov	r0, r6
 80042ea:	f000 f82f 	bl	800434c <__malloc_unlock>
 80042ee:	f104 000b 	add.w	r0, r4, #11
 80042f2:	1d23      	adds	r3, r4, #4
 80042f4:	f020 0007 	bic.w	r0, r0, #7
 80042f8:	1ac2      	subs	r2, r0, r3
 80042fa:	bf1c      	itt	ne
 80042fc:	1a1b      	subne	r3, r3, r0
 80042fe:	50a3      	strne	r3, [r4, r2]
 8004300:	e7af      	b.n	8004262 <_malloc_r+0x22>
 8004302:	6862      	ldr	r2, [r4, #4]
 8004304:	42a3      	cmp	r3, r4
 8004306:	bf0c      	ite	eq
 8004308:	f8c8 2000 	streq.w	r2, [r8]
 800430c:	605a      	strne	r2, [r3, #4]
 800430e:	e7eb      	b.n	80042e8 <_malloc_r+0xa8>
 8004310:	4623      	mov	r3, r4
 8004312:	6864      	ldr	r4, [r4, #4]
 8004314:	e7ae      	b.n	8004274 <_malloc_r+0x34>
 8004316:	463c      	mov	r4, r7
 8004318:	687f      	ldr	r7, [r7, #4]
 800431a:	e7b6      	b.n	800428a <_malloc_r+0x4a>
 800431c:	461a      	mov	r2, r3
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	42a3      	cmp	r3, r4
 8004322:	d1fb      	bne.n	800431c <_malloc_r+0xdc>
 8004324:	2300      	movs	r3, #0
 8004326:	6053      	str	r3, [r2, #4]
 8004328:	e7de      	b.n	80042e8 <_malloc_r+0xa8>
 800432a:	230c      	movs	r3, #12
 800432c:	6033      	str	r3, [r6, #0]
 800432e:	4630      	mov	r0, r6
 8004330:	f000 f80c 	bl	800434c <__malloc_unlock>
 8004334:	e794      	b.n	8004260 <_malloc_r+0x20>
 8004336:	6005      	str	r5, [r0, #0]
 8004338:	e7d6      	b.n	80042e8 <_malloc_r+0xa8>
 800433a:	bf00      	nop
 800433c:	200002a8 	.word	0x200002a8

08004340 <__malloc_lock>:
 8004340:	4801      	ldr	r0, [pc, #4]	@ (8004348 <__malloc_lock+0x8>)
 8004342:	f7ff bf0f 	b.w	8004164 <__retarget_lock_acquire_recursive>
 8004346:	bf00      	nop
 8004348:	200002a0 	.word	0x200002a0

0800434c <__malloc_unlock>:
 800434c:	4801      	ldr	r0, [pc, #4]	@ (8004354 <__malloc_unlock+0x8>)
 800434e:	f7ff bf0a 	b.w	8004166 <__retarget_lock_release_recursive>
 8004352:	bf00      	nop
 8004354:	200002a0 	.word	0x200002a0

08004358 <__ssputs_r>:
 8004358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800435c:	688e      	ldr	r6, [r1, #8]
 800435e:	461f      	mov	r7, r3
 8004360:	42be      	cmp	r6, r7
 8004362:	680b      	ldr	r3, [r1, #0]
 8004364:	4682      	mov	sl, r0
 8004366:	460c      	mov	r4, r1
 8004368:	4690      	mov	r8, r2
 800436a:	d82d      	bhi.n	80043c8 <__ssputs_r+0x70>
 800436c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004370:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004374:	d026      	beq.n	80043c4 <__ssputs_r+0x6c>
 8004376:	6965      	ldr	r5, [r4, #20]
 8004378:	6909      	ldr	r1, [r1, #16]
 800437a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800437e:	eba3 0901 	sub.w	r9, r3, r1
 8004382:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004386:	1c7b      	adds	r3, r7, #1
 8004388:	444b      	add	r3, r9
 800438a:	106d      	asrs	r5, r5, #1
 800438c:	429d      	cmp	r5, r3
 800438e:	bf38      	it	cc
 8004390:	461d      	movcc	r5, r3
 8004392:	0553      	lsls	r3, r2, #21
 8004394:	d527      	bpl.n	80043e6 <__ssputs_r+0x8e>
 8004396:	4629      	mov	r1, r5
 8004398:	f7ff ff52 	bl	8004240 <_malloc_r>
 800439c:	4606      	mov	r6, r0
 800439e:	b360      	cbz	r0, 80043fa <__ssputs_r+0xa2>
 80043a0:	6921      	ldr	r1, [r4, #16]
 80043a2:	464a      	mov	r2, r9
 80043a4:	f000 fae6 	bl	8004974 <memcpy>
 80043a8:	89a3      	ldrh	r3, [r4, #12]
 80043aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80043ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043b2:	81a3      	strh	r3, [r4, #12]
 80043b4:	6126      	str	r6, [r4, #16]
 80043b6:	6165      	str	r5, [r4, #20]
 80043b8:	444e      	add	r6, r9
 80043ba:	eba5 0509 	sub.w	r5, r5, r9
 80043be:	6026      	str	r6, [r4, #0]
 80043c0:	60a5      	str	r5, [r4, #8]
 80043c2:	463e      	mov	r6, r7
 80043c4:	42be      	cmp	r6, r7
 80043c6:	d900      	bls.n	80043ca <__ssputs_r+0x72>
 80043c8:	463e      	mov	r6, r7
 80043ca:	6820      	ldr	r0, [r4, #0]
 80043cc:	4632      	mov	r2, r6
 80043ce:	4641      	mov	r1, r8
 80043d0:	f000 faa6 	bl	8004920 <memmove>
 80043d4:	68a3      	ldr	r3, [r4, #8]
 80043d6:	1b9b      	subs	r3, r3, r6
 80043d8:	60a3      	str	r3, [r4, #8]
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	4433      	add	r3, r6
 80043de:	6023      	str	r3, [r4, #0]
 80043e0:	2000      	movs	r0, #0
 80043e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e6:	462a      	mov	r2, r5
 80043e8:	f000 fad2 	bl	8004990 <_realloc_r>
 80043ec:	4606      	mov	r6, r0
 80043ee:	2800      	cmp	r0, #0
 80043f0:	d1e0      	bne.n	80043b4 <__ssputs_r+0x5c>
 80043f2:	6921      	ldr	r1, [r4, #16]
 80043f4:	4650      	mov	r0, sl
 80043f6:	f7ff feb7 	bl	8004168 <_free_r>
 80043fa:	230c      	movs	r3, #12
 80043fc:	f8ca 3000 	str.w	r3, [sl]
 8004400:	89a3      	ldrh	r3, [r4, #12]
 8004402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004406:	81a3      	strh	r3, [r4, #12]
 8004408:	f04f 30ff 	mov.w	r0, #4294967295
 800440c:	e7e9      	b.n	80043e2 <__ssputs_r+0x8a>
	...

08004410 <_svfiprintf_r>:
 8004410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004414:	4698      	mov	r8, r3
 8004416:	898b      	ldrh	r3, [r1, #12]
 8004418:	061b      	lsls	r3, r3, #24
 800441a:	b09d      	sub	sp, #116	@ 0x74
 800441c:	4607      	mov	r7, r0
 800441e:	460d      	mov	r5, r1
 8004420:	4614      	mov	r4, r2
 8004422:	d510      	bpl.n	8004446 <_svfiprintf_r+0x36>
 8004424:	690b      	ldr	r3, [r1, #16]
 8004426:	b973      	cbnz	r3, 8004446 <_svfiprintf_r+0x36>
 8004428:	2140      	movs	r1, #64	@ 0x40
 800442a:	f7ff ff09 	bl	8004240 <_malloc_r>
 800442e:	6028      	str	r0, [r5, #0]
 8004430:	6128      	str	r0, [r5, #16]
 8004432:	b930      	cbnz	r0, 8004442 <_svfiprintf_r+0x32>
 8004434:	230c      	movs	r3, #12
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	f04f 30ff 	mov.w	r0, #4294967295
 800443c:	b01d      	add	sp, #116	@ 0x74
 800443e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004442:	2340      	movs	r3, #64	@ 0x40
 8004444:	616b      	str	r3, [r5, #20]
 8004446:	2300      	movs	r3, #0
 8004448:	9309      	str	r3, [sp, #36]	@ 0x24
 800444a:	2320      	movs	r3, #32
 800444c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004450:	f8cd 800c 	str.w	r8, [sp, #12]
 8004454:	2330      	movs	r3, #48	@ 0x30
 8004456:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80045f4 <_svfiprintf_r+0x1e4>
 800445a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800445e:	f04f 0901 	mov.w	r9, #1
 8004462:	4623      	mov	r3, r4
 8004464:	469a      	mov	sl, r3
 8004466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800446a:	b10a      	cbz	r2, 8004470 <_svfiprintf_r+0x60>
 800446c:	2a25      	cmp	r2, #37	@ 0x25
 800446e:	d1f9      	bne.n	8004464 <_svfiprintf_r+0x54>
 8004470:	ebba 0b04 	subs.w	fp, sl, r4
 8004474:	d00b      	beq.n	800448e <_svfiprintf_r+0x7e>
 8004476:	465b      	mov	r3, fp
 8004478:	4622      	mov	r2, r4
 800447a:	4629      	mov	r1, r5
 800447c:	4638      	mov	r0, r7
 800447e:	f7ff ff6b 	bl	8004358 <__ssputs_r>
 8004482:	3001      	adds	r0, #1
 8004484:	f000 80a7 	beq.w	80045d6 <_svfiprintf_r+0x1c6>
 8004488:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800448a:	445a      	add	r2, fp
 800448c:	9209      	str	r2, [sp, #36]	@ 0x24
 800448e:	f89a 3000 	ldrb.w	r3, [sl]
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 809f 	beq.w	80045d6 <_svfiprintf_r+0x1c6>
 8004498:	2300      	movs	r3, #0
 800449a:	f04f 32ff 	mov.w	r2, #4294967295
 800449e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044a2:	f10a 0a01 	add.w	sl, sl, #1
 80044a6:	9304      	str	r3, [sp, #16]
 80044a8:	9307      	str	r3, [sp, #28]
 80044aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80044b0:	4654      	mov	r4, sl
 80044b2:	2205      	movs	r2, #5
 80044b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044b8:	484e      	ldr	r0, [pc, #312]	@ (80045f4 <_svfiprintf_r+0x1e4>)
 80044ba:	f7fb fe91 	bl	80001e0 <memchr>
 80044be:	9a04      	ldr	r2, [sp, #16]
 80044c0:	b9d8      	cbnz	r0, 80044fa <_svfiprintf_r+0xea>
 80044c2:	06d0      	lsls	r0, r2, #27
 80044c4:	bf44      	itt	mi
 80044c6:	2320      	movmi	r3, #32
 80044c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044cc:	0711      	lsls	r1, r2, #28
 80044ce:	bf44      	itt	mi
 80044d0:	232b      	movmi	r3, #43	@ 0x2b
 80044d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044d6:	f89a 3000 	ldrb.w	r3, [sl]
 80044da:	2b2a      	cmp	r3, #42	@ 0x2a
 80044dc:	d015      	beq.n	800450a <_svfiprintf_r+0xfa>
 80044de:	9a07      	ldr	r2, [sp, #28]
 80044e0:	4654      	mov	r4, sl
 80044e2:	2000      	movs	r0, #0
 80044e4:	f04f 0c0a 	mov.w	ip, #10
 80044e8:	4621      	mov	r1, r4
 80044ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044ee:	3b30      	subs	r3, #48	@ 0x30
 80044f0:	2b09      	cmp	r3, #9
 80044f2:	d94b      	bls.n	800458c <_svfiprintf_r+0x17c>
 80044f4:	b1b0      	cbz	r0, 8004524 <_svfiprintf_r+0x114>
 80044f6:	9207      	str	r2, [sp, #28]
 80044f8:	e014      	b.n	8004524 <_svfiprintf_r+0x114>
 80044fa:	eba0 0308 	sub.w	r3, r0, r8
 80044fe:	fa09 f303 	lsl.w	r3, r9, r3
 8004502:	4313      	orrs	r3, r2
 8004504:	9304      	str	r3, [sp, #16]
 8004506:	46a2      	mov	sl, r4
 8004508:	e7d2      	b.n	80044b0 <_svfiprintf_r+0xa0>
 800450a:	9b03      	ldr	r3, [sp, #12]
 800450c:	1d19      	adds	r1, r3, #4
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	9103      	str	r1, [sp, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	bfbb      	ittet	lt
 8004516:	425b      	neglt	r3, r3
 8004518:	f042 0202 	orrlt.w	r2, r2, #2
 800451c:	9307      	strge	r3, [sp, #28]
 800451e:	9307      	strlt	r3, [sp, #28]
 8004520:	bfb8      	it	lt
 8004522:	9204      	strlt	r2, [sp, #16]
 8004524:	7823      	ldrb	r3, [r4, #0]
 8004526:	2b2e      	cmp	r3, #46	@ 0x2e
 8004528:	d10a      	bne.n	8004540 <_svfiprintf_r+0x130>
 800452a:	7863      	ldrb	r3, [r4, #1]
 800452c:	2b2a      	cmp	r3, #42	@ 0x2a
 800452e:	d132      	bne.n	8004596 <_svfiprintf_r+0x186>
 8004530:	9b03      	ldr	r3, [sp, #12]
 8004532:	1d1a      	adds	r2, r3, #4
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	9203      	str	r2, [sp, #12]
 8004538:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800453c:	3402      	adds	r4, #2
 800453e:	9305      	str	r3, [sp, #20]
 8004540:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004604 <_svfiprintf_r+0x1f4>
 8004544:	7821      	ldrb	r1, [r4, #0]
 8004546:	2203      	movs	r2, #3
 8004548:	4650      	mov	r0, sl
 800454a:	f7fb fe49 	bl	80001e0 <memchr>
 800454e:	b138      	cbz	r0, 8004560 <_svfiprintf_r+0x150>
 8004550:	9b04      	ldr	r3, [sp, #16]
 8004552:	eba0 000a 	sub.w	r0, r0, sl
 8004556:	2240      	movs	r2, #64	@ 0x40
 8004558:	4082      	lsls	r2, r0
 800455a:	4313      	orrs	r3, r2
 800455c:	3401      	adds	r4, #1
 800455e:	9304      	str	r3, [sp, #16]
 8004560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004564:	4824      	ldr	r0, [pc, #144]	@ (80045f8 <_svfiprintf_r+0x1e8>)
 8004566:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800456a:	2206      	movs	r2, #6
 800456c:	f7fb fe38 	bl	80001e0 <memchr>
 8004570:	2800      	cmp	r0, #0
 8004572:	d036      	beq.n	80045e2 <_svfiprintf_r+0x1d2>
 8004574:	4b21      	ldr	r3, [pc, #132]	@ (80045fc <_svfiprintf_r+0x1ec>)
 8004576:	bb1b      	cbnz	r3, 80045c0 <_svfiprintf_r+0x1b0>
 8004578:	9b03      	ldr	r3, [sp, #12]
 800457a:	3307      	adds	r3, #7
 800457c:	f023 0307 	bic.w	r3, r3, #7
 8004580:	3308      	adds	r3, #8
 8004582:	9303      	str	r3, [sp, #12]
 8004584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004586:	4433      	add	r3, r6
 8004588:	9309      	str	r3, [sp, #36]	@ 0x24
 800458a:	e76a      	b.n	8004462 <_svfiprintf_r+0x52>
 800458c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004590:	460c      	mov	r4, r1
 8004592:	2001      	movs	r0, #1
 8004594:	e7a8      	b.n	80044e8 <_svfiprintf_r+0xd8>
 8004596:	2300      	movs	r3, #0
 8004598:	3401      	adds	r4, #1
 800459a:	9305      	str	r3, [sp, #20]
 800459c:	4619      	mov	r1, r3
 800459e:	f04f 0c0a 	mov.w	ip, #10
 80045a2:	4620      	mov	r0, r4
 80045a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045a8:	3a30      	subs	r2, #48	@ 0x30
 80045aa:	2a09      	cmp	r2, #9
 80045ac:	d903      	bls.n	80045b6 <_svfiprintf_r+0x1a6>
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0c6      	beq.n	8004540 <_svfiprintf_r+0x130>
 80045b2:	9105      	str	r1, [sp, #20]
 80045b4:	e7c4      	b.n	8004540 <_svfiprintf_r+0x130>
 80045b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80045ba:	4604      	mov	r4, r0
 80045bc:	2301      	movs	r3, #1
 80045be:	e7f0      	b.n	80045a2 <_svfiprintf_r+0x192>
 80045c0:	ab03      	add	r3, sp, #12
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	462a      	mov	r2, r5
 80045c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004600 <_svfiprintf_r+0x1f0>)
 80045c8:	a904      	add	r1, sp, #16
 80045ca:	4638      	mov	r0, r7
 80045cc:	f3af 8000 	nop.w
 80045d0:	1c42      	adds	r2, r0, #1
 80045d2:	4606      	mov	r6, r0
 80045d4:	d1d6      	bne.n	8004584 <_svfiprintf_r+0x174>
 80045d6:	89ab      	ldrh	r3, [r5, #12]
 80045d8:	065b      	lsls	r3, r3, #25
 80045da:	f53f af2d 	bmi.w	8004438 <_svfiprintf_r+0x28>
 80045de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045e0:	e72c      	b.n	800443c <_svfiprintf_r+0x2c>
 80045e2:	ab03      	add	r3, sp, #12
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	462a      	mov	r2, r5
 80045e8:	4b05      	ldr	r3, [pc, #20]	@ (8004600 <_svfiprintf_r+0x1f0>)
 80045ea:	a904      	add	r1, sp, #16
 80045ec:	4638      	mov	r0, r7
 80045ee:	f000 f879 	bl	80046e4 <_printf_i>
 80045f2:	e7ed      	b.n	80045d0 <_svfiprintf_r+0x1c0>
 80045f4:	08004a7c 	.word	0x08004a7c
 80045f8:	08004a86 	.word	0x08004a86
 80045fc:	00000000 	.word	0x00000000
 8004600:	08004359 	.word	0x08004359
 8004604:	08004a82 	.word	0x08004a82

08004608 <_printf_common>:
 8004608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800460c:	4616      	mov	r6, r2
 800460e:	4698      	mov	r8, r3
 8004610:	688a      	ldr	r2, [r1, #8]
 8004612:	690b      	ldr	r3, [r1, #16]
 8004614:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004618:	4293      	cmp	r3, r2
 800461a:	bfb8      	it	lt
 800461c:	4613      	movlt	r3, r2
 800461e:	6033      	str	r3, [r6, #0]
 8004620:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004624:	4607      	mov	r7, r0
 8004626:	460c      	mov	r4, r1
 8004628:	b10a      	cbz	r2, 800462e <_printf_common+0x26>
 800462a:	3301      	adds	r3, #1
 800462c:	6033      	str	r3, [r6, #0]
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	0699      	lsls	r1, r3, #26
 8004632:	bf42      	ittt	mi
 8004634:	6833      	ldrmi	r3, [r6, #0]
 8004636:	3302      	addmi	r3, #2
 8004638:	6033      	strmi	r3, [r6, #0]
 800463a:	6825      	ldr	r5, [r4, #0]
 800463c:	f015 0506 	ands.w	r5, r5, #6
 8004640:	d106      	bne.n	8004650 <_printf_common+0x48>
 8004642:	f104 0a19 	add.w	sl, r4, #25
 8004646:	68e3      	ldr	r3, [r4, #12]
 8004648:	6832      	ldr	r2, [r6, #0]
 800464a:	1a9b      	subs	r3, r3, r2
 800464c:	42ab      	cmp	r3, r5
 800464e:	dc26      	bgt.n	800469e <_printf_common+0x96>
 8004650:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004654:	6822      	ldr	r2, [r4, #0]
 8004656:	3b00      	subs	r3, #0
 8004658:	bf18      	it	ne
 800465a:	2301      	movne	r3, #1
 800465c:	0692      	lsls	r2, r2, #26
 800465e:	d42b      	bmi.n	80046b8 <_printf_common+0xb0>
 8004660:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004664:	4641      	mov	r1, r8
 8004666:	4638      	mov	r0, r7
 8004668:	47c8      	blx	r9
 800466a:	3001      	adds	r0, #1
 800466c:	d01e      	beq.n	80046ac <_printf_common+0xa4>
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	6922      	ldr	r2, [r4, #16]
 8004672:	f003 0306 	and.w	r3, r3, #6
 8004676:	2b04      	cmp	r3, #4
 8004678:	bf02      	ittt	eq
 800467a:	68e5      	ldreq	r5, [r4, #12]
 800467c:	6833      	ldreq	r3, [r6, #0]
 800467e:	1aed      	subeq	r5, r5, r3
 8004680:	68a3      	ldr	r3, [r4, #8]
 8004682:	bf0c      	ite	eq
 8004684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004688:	2500      	movne	r5, #0
 800468a:	4293      	cmp	r3, r2
 800468c:	bfc4      	itt	gt
 800468e:	1a9b      	subgt	r3, r3, r2
 8004690:	18ed      	addgt	r5, r5, r3
 8004692:	2600      	movs	r6, #0
 8004694:	341a      	adds	r4, #26
 8004696:	42b5      	cmp	r5, r6
 8004698:	d11a      	bne.n	80046d0 <_printf_common+0xc8>
 800469a:	2000      	movs	r0, #0
 800469c:	e008      	b.n	80046b0 <_printf_common+0xa8>
 800469e:	2301      	movs	r3, #1
 80046a0:	4652      	mov	r2, sl
 80046a2:	4641      	mov	r1, r8
 80046a4:	4638      	mov	r0, r7
 80046a6:	47c8      	blx	r9
 80046a8:	3001      	adds	r0, #1
 80046aa:	d103      	bne.n	80046b4 <_printf_common+0xac>
 80046ac:	f04f 30ff 	mov.w	r0, #4294967295
 80046b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b4:	3501      	adds	r5, #1
 80046b6:	e7c6      	b.n	8004646 <_printf_common+0x3e>
 80046b8:	18e1      	adds	r1, r4, r3
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	2030      	movs	r0, #48	@ 0x30
 80046be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046c2:	4422      	add	r2, r4
 80046c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046cc:	3302      	adds	r3, #2
 80046ce:	e7c7      	b.n	8004660 <_printf_common+0x58>
 80046d0:	2301      	movs	r3, #1
 80046d2:	4622      	mov	r2, r4
 80046d4:	4641      	mov	r1, r8
 80046d6:	4638      	mov	r0, r7
 80046d8:	47c8      	blx	r9
 80046da:	3001      	adds	r0, #1
 80046dc:	d0e6      	beq.n	80046ac <_printf_common+0xa4>
 80046de:	3601      	adds	r6, #1
 80046e0:	e7d9      	b.n	8004696 <_printf_common+0x8e>
	...

080046e4 <_printf_i>:
 80046e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046e8:	7e0f      	ldrb	r7, [r1, #24]
 80046ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046ec:	2f78      	cmp	r7, #120	@ 0x78
 80046ee:	4691      	mov	r9, r2
 80046f0:	4680      	mov	r8, r0
 80046f2:	460c      	mov	r4, r1
 80046f4:	469a      	mov	sl, r3
 80046f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046fa:	d807      	bhi.n	800470c <_printf_i+0x28>
 80046fc:	2f62      	cmp	r7, #98	@ 0x62
 80046fe:	d80a      	bhi.n	8004716 <_printf_i+0x32>
 8004700:	2f00      	cmp	r7, #0
 8004702:	f000 80d1 	beq.w	80048a8 <_printf_i+0x1c4>
 8004706:	2f58      	cmp	r7, #88	@ 0x58
 8004708:	f000 80b8 	beq.w	800487c <_printf_i+0x198>
 800470c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004710:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004714:	e03a      	b.n	800478c <_printf_i+0xa8>
 8004716:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800471a:	2b15      	cmp	r3, #21
 800471c:	d8f6      	bhi.n	800470c <_printf_i+0x28>
 800471e:	a101      	add	r1, pc, #4	@ (adr r1, 8004724 <_printf_i+0x40>)
 8004720:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004724:	0800477d 	.word	0x0800477d
 8004728:	08004791 	.word	0x08004791
 800472c:	0800470d 	.word	0x0800470d
 8004730:	0800470d 	.word	0x0800470d
 8004734:	0800470d 	.word	0x0800470d
 8004738:	0800470d 	.word	0x0800470d
 800473c:	08004791 	.word	0x08004791
 8004740:	0800470d 	.word	0x0800470d
 8004744:	0800470d 	.word	0x0800470d
 8004748:	0800470d 	.word	0x0800470d
 800474c:	0800470d 	.word	0x0800470d
 8004750:	0800488f 	.word	0x0800488f
 8004754:	080047bb 	.word	0x080047bb
 8004758:	08004849 	.word	0x08004849
 800475c:	0800470d 	.word	0x0800470d
 8004760:	0800470d 	.word	0x0800470d
 8004764:	080048b1 	.word	0x080048b1
 8004768:	0800470d 	.word	0x0800470d
 800476c:	080047bb 	.word	0x080047bb
 8004770:	0800470d 	.word	0x0800470d
 8004774:	0800470d 	.word	0x0800470d
 8004778:	08004851 	.word	0x08004851
 800477c:	6833      	ldr	r3, [r6, #0]
 800477e:	1d1a      	adds	r2, r3, #4
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6032      	str	r2, [r6, #0]
 8004784:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004788:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800478c:	2301      	movs	r3, #1
 800478e:	e09c      	b.n	80048ca <_printf_i+0x1e6>
 8004790:	6833      	ldr	r3, [r6, #0]
 8004792:	6820      	ldr	r0, [r4, #0]
 8004794:	1d19      	adds	r1, r3, #4
 8004796:	6031      	str	r1, [r6, #0]
 8004798:	0606      	lsls	r6, r0, #24
 800479a:	d501      	bpl.n	80047a0 <_printf_i+0xbc>
 800479c:	681d      	ldr	r5, [r3, #0]
 800479e:	e003      	b.n	80047a8 <_printf_i+0xc4>
 80047a0:	0645      	lsls	r5, r0, #25
 80047a2:	d5fb      	bpl.n	800479c <_printf_i+0xb8>
 80047a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047a8:	2d00      	cmp	r5, #0
 80047aa:	da03      	bge.n	80047b4 <_printf_i+0xd0>
 80047ac:	232d      	movs	r3, #45	@ 0x2d
 80047ae:	426d      	negs	r5, r5
 80047b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047b4:	4858      	ldr	r0, [pc, #352]	@ (8004918 <_printf_i+0x234>)
 80047b6:	230a      	movs	r3, #10
 80047b8:	e011      	b.n	80047de <_printf_i+0xfa>
 80047ba:	6821      	ldr	r1, [r4, #0]
 80047bc:	6833      	ldr	r3, [r6, #0]
 80047be:	0608      	lsls	r0, r1, #24
 80047c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80047c4:	d402      	bmi.n	80047cc <_printf_i+0xe8>
 80047c6:	0649      	lsls	r1, r1, #25
 80047c8:	bf48      	it	mi
 80047ca:	b2ad      	uxthmi	r5, r5
 80047cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80047ce:	4852      	ldr	r0, [pc, #328]	@ (8004918 <_printf_i+0x234>)
 80047d0:	6033      	str	r3, [r6, #0]
 80047d2:	bf14      	ite	ne
 80047d4:	230a      	movne	r3, #10
 80047d6:	2308      	moveq	r3, #8
 80047d8:	2100      	movs	r1, #0
 80047da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047de:	6866      	ldr	r6, [r4, #4]
 80047e0:	60a6      	str	r6, [r4, #8]
 80047e2:	2e00      	cmp	r6, #0
 80047e4:	db05      	blt.n	80047f2 <_printf_i+0x10e>
 80047e6:	6821      	ldr	r1, [r4, #0]
 80047e8:	432e      	orrs	r6, r5
 80047ea:	f021 0104 	bic.w	r1, r1, #4
 80047ee:	6021      	str	r1, [r4, #0]
 80047f0:	d04b      	beq.n	800488a <_printf_i+0x1a6>
 80047f2:	4616      	mov	r6, r2
 80047f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80047f8:	fb03 5711 	mls	r7, r3, r1, r5
 80047fc:	5dc7      	ldrb	r7, [r0, r7]
 80047fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004802:	462f      	mov	r7, r5
 8004804:	42bb      	cmp	r3, r7
 8004806:	460d      	mov	r5, r1
 8004808:	d9f4      	bls.n	80047f4 <_printf_i+0x110>
 800480a:	2b08      	cmp	r3, #8
 800480c:	d10b      	bne.n	8004826 <_printf_i+0x142>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	07df      	lsls	r7, r3, #31
 8004812:	d508      	bpl.n	8004826 <_printf_i+0x142>
 8004814:	6923      	ldr	r3, [r4, #16]
 8004816:	6861      	ldr	r1, [r4, #4]
 8004818:	4299      	cmp	r1, r3
 800481a:	bfde      	ittt	le
 800481c:	2330      	movle	r3, #48	@ 0x30
 800481e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004822:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004826:	1b92      	subs	r2, r2, r6
 8004828:	6122      	str	r2, [r4, #16]
 800482a:	f8cd a000 	str.w	sl, [sp]
 800482e:	464b      	mov	r3, r9
 8004830:	aa03      	add	r2, sp, #12
 8004832:	4621      	mov	r1, r4
 8004834:	4640      	mov	r0, r8
 8004836:	f7ff fee7 	bl	8004608 <_printf_common>
 800483a:	3001      	adds	r0, #1
 800483c:	d14a      	bne.n	80048d4 <_printf_i+0x1f0>
 800483e:	f04f 30ff 	mov.w	r0, #4294967295
 8004842:	b004      	add	sp, #16
 8004844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	f043 0320 	orr.w	r3, r3, #32
 800484e:	6023      	str	r3, [r4, #0]
 8004850:	4832      	ldr	r0, [pc, #200]	@ (800491c <_printf_i+0x238>)
 8004852:	2778      	movs	r7, #120	@ 0x78
 8004854:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	6831      	ldr	r1, [r6, #0]
 800485c:	061f      	lsls	r7, r3, #24
 800485e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004862:	d402      	bmi.n	800486a <_printf_i+0x186>
 8004864:	065f      	lsls	r7, r3, #25
 8004866:	bf48      	it	mi
 8004868:	b2ad      	uxthmi	r5, r5
 800486a:	6031      	str	r1, [r6, #0]
 800486c:	07d9      	lsls	r1, r3, #31
 800486e:	bf44      	itt	mi
 8004870:	f043 0320 	orrmi.w	r3, r3, #32
 8004874:	6023      	strmi	r3, [r4, #0]
 8004876:	b11d      	cbz	r5, 8004880 <_printf_i+0x19c>
 8004878:	2310      	movs	r3, #16
 800487a:	e7ad      	b.n	80047d8 <_printf_i+0xf4>
 800487c:	4826      	ldr	r0, [pc, #152]	@ (8004918 <_printf_i+0x234>)
 800487e:	e7e9      	b.n	8004854 <_printf_i+0x170>
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	f023 0320 	bic.w	r3, r3, #32
 8004886:	6023      	str	r3, [r4, #0]
 8004888:	e7f6      	b.n	8004878 <_printf_i+0x194>
 800488a:	4616      	mov	r6, r2
 800488c:	e7bd      	b.n	800480a <_printf_i+0x126>
 800488e:	6833      	ldr	r3, [r6, #0]
 8004890:	6825      	ldr	r5, [r4, #0]
 8004892:	6961      	ldr	r1, [r4, #20]
 8004894:	1d18      	adds	r0, r3, #4
 8004896:	6030      	str	r0, [r6, #0]
 8004898:	062e      	lsls	r6, r5, #24
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	d501      	bpl.n	80048a2 <_printf_i+0x1be>
 800489e:	6019      	str	r1, [r3, #0]
 80048a0:	e002      	b.n	80048a8 <_printf_i+0x1c4>
 80048a2:	0668      	lsls	r0, r5, #25
 80048a4:	d5fb      	bpl.n	800489e <_printf_i+0x1ba>
 80048a6:	8019      	strh	r1, [r3, #0]
 80048a8:	2300      	movs	r3, #0
 80048aa:	6123      	str	r3, [r4, #16]
 80048ac:	4616      	mov	r6, r2
 80048ae:	e7bc      	b.n	800482a <_printf_i+0x146>
 80048b0:	6833      	ldr	r3, [r6, #0]
 80048b2:	1d1a      	adds	r2, r3, #4
 80048b4:	6032      	str	r2, [r6, #0]
 80048b6:	681e      	ldr	r6, [r3, #0]
 80048b8:	6862      	ldr	r2, [r4, #4]
 80048ba:	2100      	movs	r1, #0
 80048bc:	4630      	mov	r0, r6
 80048be:	f7fb fc8f 	bl	80001e0 <memchr>
 80048c2:	b108      	cbz	r0, 80048c8 <_printf_i+0x1e4>
 80048c4:	1b80      	subs	r0, r0, r6
 80048c6:	6060      	str	r0, [r4, #4]
 80048c8:	6863      	ldr	r3, [r4, #4]
 80048ca:	6123      	str	r3, [r4, #16]
 80048cc:	2300      	movs	r3, #0
 80048ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048d2:	e7aa      	b.n	800482a <_printf_i+0x146>
 80048d4:	6923      	ldr	r3, [r4, #16]
 80048d6:	4632      	mov	r2, r6
 80048d8:	4649      	mov	r1, r9
 80048da:	4640      	mov	r0, r8
 80048dc:	47d0      	blx	sl
 80048de:	3001      	adds	r0, #1
 80048e0:	d0ad      	beq.n	800483e <_printf_i+0x15a>
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	079b      	lsls	r3, r3, #30
 80048e6:	d413      	bmi.n	8004910 <_printf_i+0x22c>
 80048e8:	68e0      	ldr	r0, [r4, #12]
 80048ea:	9b03      	ldr	r3, [sp, #12]
 80048ec:	4298      	cmp	r0, r3
 80048ee:	bfb8      	it	lt
 80048f0:	4618      	movlt	r0, r3
 80048f2:	e7a6      	b.n	8004842 <_printf_i+0x15e>
 80048f4:	2301      	movs	r3, #1
 80048f6:	4632      	mov	r2, r6
 80048f8:	4649      	mov	r1, r9
 80048fa:	4640      	mov	r0, r8
 80048fc:	47d0      	blx	sl
 80048fe:	3001      	adds	r0, #1
 8004900:	d09d      	beq.n	800483e <_printf_i+0x15a>
 8004902:	3501      	adds	r5, #1
 8004904:	68e3      	ldr	r3, [r4, #12]
 8004906:	9903      	ldr	r1, [sp, #12]
 8004908:	1a5b      	subs	r3, r3, r1
 800490a:	42ab      	cmp	r3, r5
 800490c:	dcf2      	bgt.n	80048f4 <_printf_i+0x210>
 800490e:	e7eb      	b.n	80048e8 <_printf_i+0x204>
 8004910:	2500      	movs	r5, #0
 8004912:	f104 0619 	add.w	r6, r4, #25
 8004916:	e7f5      	b.n	8004904 <_printf_i+0x220>
 8004918:	08004a8d 	.word	0x08004a8d
 800491c:	08004a9e 	.word	0x08004a9e

08004920 <memmove>:
 8004920:	4288      	cmp	r0, r1
 8004922:	b510      	push	{r4, lr}
 8004924:	eb01 0402 	add.w	r4, r1, r2
 8004928:	d902      	bls.n	8004930 <memmove+0x10>
 800492a:	4284      	cmp	r4, r0
 800492c:	4623      	mov	r3, r4
 800492e:	d807      	bhi.n	8004940 <memmove+0x20>
 8004930:	1e43      	subs	r3, r0, #1
 8004932:	42a1      	cmp	r1, r4
 8004934:	d008      	beq.n	8004948 <memmove+0x28>
 8004936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800493a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800493e:	e7f8      	b.n	8004932 <memmove+0x12>
 8004940:	4402      	add	r2, r0
 8004942:	4601      	mov	r1, r0
 8004944:	428a      	cmp	r2, r1
 8004946:	d100      	bne.n	800494a <memmove+0x2a>
 8004948:	bd10      	pop	{r4, pc}
 800494a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800494e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004952:	e7f7      	b.n	8004944 <memmove+0x24>

08004954 <_sbrk_r>:
 8004954:	b538      	push	{r3, r4, r5, lr}
 8004956:	4d06      	ldr	r5, [pc, #24]	@ (8004970 <_sbrk_r+0x1c>)
 8004958:	2300      	movs	r3, #0
 800495a:	4604      	mov	r4, r0
 800495c:	4608      	mov	r0, r1
 800495e:	602b      	str	r3, [r5, #0]
 8004960:	f7fc f8fc 	bl	8000b5c <_sbrk>
 8004964:	1c43      	adds	r3, r0, #1
 8004966:	d102      	bne.n	800496e <_sbrk_r+0x1a>
 8004968:	682b      	ldr	r3, [r5, #0]
 800496a:	b103      	cbz	r3, 800496e <_sbrk_r+0x1a>
 800496c:	6023      	str	r3, [r4, #0]
 800496e:	bd38      	pop	{r3, r4, r5, pc}
 8004970:	2000029c 	.word	0x2000029c

08004974 <memcpy>:
 8004974:	440a      	add	r2, r1
 8004976:	4291      	cmp	r1, r2
 8004978:	f100 33ff 	add.w	r3, r0, #4294967295
 800497c:	d100      	bne.n	8004980 <memcpy+0xc>
 800497e:	4770      	bx	lr
 8004980:	b510      	push	{r4, lr}
 8004982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800498a:	4291      	cmp	r1, r2
 800498c:	d1f9      	bne.n	8004982 <memcpy+0xe>
 800498e:	bd10      	pop	{r4, pc}

08004990 <_realloc_r>:
 8004990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004994:	4607      	mov	r7, r0
 8004996:	4614      	mov	r4, r2
 8004998:	460d      	mov	r5, r1
 800499a:	b921      	cbnz	r1, 80049a6 <_realloc_r+0x16>
 800499c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049a0:	4611      	mov	r1, r2
 80049a2:	f7ff bc4d 	b.w	8004240 <_malloc_r>
 80049a6:	b92a      	cbnz	r2, 80049b4 <_realloc_r+0x24>
 80049a8:	f7ff fbde 	bl	8004168 <_free_r>
 80049ac:	4625      	mov	r5, r4
 80049ae:	4628      	mov	r0, r5
 80049b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b4:	f000 f81a 	bl	80049ec <_malloc_usable_size_r>
 80049b8:	4284      	cmp	r4, r0
 80049ba:	4606      	mov	r6, r0
 80049bc:	d802      	bhi.n	80049c4 <_realloc_r+0x34>
 80049be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049c2:	d8f4      	bhi.n	80049ae <_realloc_r+0x1e>
 80049c4:	4621      	mov	r1, r4
 80049c6:	4638      	mov	r0, r7
 80049c8:	f7ff fc3a 	bl	8004240 <_malloc_r>
 80049cc:	4680      	mov	r8, r0
 80049ce:	b908      	cbnz	r0, 80049d4 <_realloc_r+0x44>
 80049d0:	4645      	mov	r5, r8
 80049d2:	e7ec      	b.n	80049ae <_realloc_r+0x1e>
 80049d4:	42b4      	cmp	r4, r6
 80049d6:	4622      	mov	r2, r4
 80049d8:	4629      	mov	r1, r5
 80049da:	bf28      	it	cs
 80049dc:	4632      	movcs	r2, r6
 80049de:	f7ff ffc9 	bl	8004974 <memcpy>
 80049e2:	4629      	mov	r1, r5
 80049e4:	4638      	mov	r0, r7
 80049e6:	f7ff fbbf 	bl	8004168 <_free_r>
 80049ea:	e7f1      	b.n	80049d0 <_realloc_r+0x40>

080049ec <_malloc_usable_size_r>:
 80049ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049f0:	1f18      	subs	r0, r3, #4
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	bfbc      	itt	lt
 80049f6:	580b      	ldrlt	r3, [r1, r0]
 80049f8:	18c0      	addlt	r0, r0, r3
 80049fa:	4770      	bx	lr

080049fc <_init>:
 80049fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fe:	bf00      	nop
 8004a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a02:	bc08      	pop	{r3}
 8004a04:	469e      	mov	lr, r3
 8004a06:	4770      	bx	lr

08004a08 <_fini>:
 8004a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0a:	bf00      	nop
 8004a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0e:	bc08      	pop	{r3}
 8004a10:	469e      	mov	lr, r3
 8004a12:	4770      	bx	lr
