
DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e44  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08007fd8  08007fd8  00008fd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083c4  080083c4  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080083c4  080083c4  000093c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083cc  080083cc  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083cc  080083cc  000093cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083d0  080083d0  000093d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080083d4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001d4  080085a8  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  080085a8  0000a444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd21  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021dc  00000000  00000000  00019f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  0001c108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae3  00000000  00000000  0001cf38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a09  00000000  00000000  0001da1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fde5  00000000  00000000  00046424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe4a4  00000000  00000000  00056209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001546ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba4  00000000  00000000  001546f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00159294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007fbc 	.word	0x08007fbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007fbc 	.word	0x08007fbc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <__io_putchar>:
void MX_USART2_UART_Init(void);
void MX_GPIO_Init(void);

// printf redirection to UART2
int __io_putchar(int ch)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY); // send char
 8000edc:	1d39      	adds	r1, r7, #4
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4803      	ldr	r0, [pc, #12]	@ (8000ef4 <__io_putchar+0x20>)
 8000ee6:	f003 fe79 	bl	8004bdc <HAL_UART_Transmit>
    return ch; // return character
 8000eea:	687b      	ldr	r3, [r7, #4]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000268 	.word	0x20000268

08000ef8 <main>:

int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af02      	add	r7, sp, #8
    HAL_Init();                  // HAL init
 8000efe:	f000 fbf3 	bl	80016e8 <HAL_Init>
    SystemClock_Config();        // clock config
 8000f02:	f000 f857 	bl	8000fb4 <SystemClock_Config>
    MX_GPIO_Init();              // GPIO init
 8000f06:	f000 f931 	bl	800116c <MX_GPIO_Init>
    MX_USART2_UART_Init();       // UART init
 8000f0a:	f000 f90b 	bl	8001124 <MX_USART2_UART_Init>
    MX_DAC1_Init();              // DAC init
 8000f0e:	f000 f8e1 	bl	80010d4 <MX_DAC1_Init>
    MX_ADC1_Init();              // ADC init
 8000f12:	f000 f891 	bl	8001038 <MX_ADC1_Init>

    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // enable DAC
 8000f16:	2100      	movs	r1, #0
 8000f18:	4821      	ldr	r0, [pc, #132]	@ (8000fa0 <main+0xa8>)
 8000f1a:	f001 ffae 	bl	8002e7a <HAL_DAC_Start>

    while (1) // main loop
    {
        for (uint32_t val = 0; val <= 4095; val += 512) // DAC sweep
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	e037      	b.n	8000f94 <main+0x9c>
        {
            HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, val); // set DAC
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	481d      	ldr	r0, [pc, #116]	@ (8000fa0 <main+0xa8>)
 8000f2c:	f001 fff2 	bl	8002f14 <HAL_DAC_SetValue>
            HAL_Delay(10); // wait
 8000f30:	200a      	movs	r0, #10
 8000f32:	f000 fc55 	bl	80017e0 <HAL_Delay>

            HAL_ADC_Start(&hadc1);                            // start ADC
 8000f36:	481b      	ldr	r0, [pc, #108]	@ (8000fa4 <main+0xac>)
 8000f38:	f000 ffaa 	bl	8001e90 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // wait ADC
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f40:	4818      	ldr	r0, [pc, #96]	@ (8000fa4 <main+0xac>)
 8000f42:	f001 f85f 	bl	8002004 <HAL_ADC_PollForConversion>
            uint32_t adcVal = HAL_ADC_GetValue(&hadc1);       // read ADC
 8000f46:	4817      	ldr	r0, [pc, #92]	@ (8000fa4 <main+0xac>)
 8000f48:	f001 f934 	bl	80021b4 <HAL_ADC_GetValue>
 8000f4c:	60b8      	str	r0, [r7, #8]

            float voltage = (3.3f * adcVal) / 4095.0f;        // calc voltage
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	ee07 3a90 	vmov	s15, r3
 8000f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f58:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000fa8 <main+0xb0>
 8000f5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f60:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000fac <main+0xb4>
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	edc7 7a01 	vstr	s15, [r7, #4]

            printf("DAC: %lu -> ADC: %lu -> Voltage: %.2f V\r\n",
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff faeb 	bl	8000548 <__aeabi_f2d>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	e9cd 2300 	strd	r2, r3, [sp]
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	68f9      	ldr	r1, [r7, #12]
 8000f7e:	480c      	ldr	r0, [pc, #48]	@ (8000fb0 <main+0xb8>)
 8000f80:	f005 f8a0 	bl	80060c4 <iprintf>
                   val, adcVal, voltage); // print

            HAL_Delay(500); // delay
 8000f84:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f88:	f000 fc2a 	bl	80017e0 <HAL_Delay>
        for (uint32_t val = 0; val <= 4095; val += 512) // DAC sweep
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f9a:	d3c3      	bcc.n	8000f24 <main+0x2c>
 8000f9c:	e7bf      	b.n	8000f1e <main+0x26>
 8000f9e:	bf00      	nop
 8000fa0:	20000254 	.word	0x20000254
 8000fa4:	200001f0 	.word	0x200001f0
 8000fa8:	40533333 	.word	0x40533333
 8000fac:	457ff000 	.word	0x457ff000
 8000fb0:	08007fd8 	.word	0x08007fd8

08000fb4 <SystemClock_Config>:
        }
    }
}

void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b096      	sub	sp, #88	@ 0x58
 8000fb8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0}; // osc config
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	2244      	movs	r2, #68	@ 0x44
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f005 f8d3 	bl	800616e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0}; // clk config
 8000fc8:	463b      	mov	r3, r7
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]

    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1); // power scale
 8000fd6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fda:	f002 fa9f 	bl	800351c <HAL_PWREx_ControlVoltageScaling>

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI; // HSI
 8000fde:	2302      	movs	r3, #2
 8000fe0:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;                   // HSI on
 8000fe2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fe6:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT; // calib
 8000fe8:	2310      	movs	r3, #16
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;               // PLL on
 8000fec:	2302      	movs	r3, #2
 8000fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;       // PLL src HSI
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLM = 1;                            // PLLM=1
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLN = 10;                           // PLLN=10
 8000ff8:	230a      	movs	r3, #10
 8000ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;                // PLLP=7
 8000ffc:	2307      	movs	r3, #7
 8000ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;                // PLLQ=2
 8001000:	2302      	movs	r3, #2
 8001002:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;                // PLLR=2
 8001004:	2302      	movs	r3, #2
 8001006:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_RCC_OscConfig(&RCC_OscInitStruct);                     // apply osc
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4618      	mov	r0, r3
 800100e:	f002 fadb 	bl	80035c8 <HAL_RCC_OscConfig>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK |
 8001012:	230f      	movs	r3, #15
 8001014:	603b      	str	r3, [r7, #0]
                                  RCC_CLOCKTYPE_SYSCLK |
                                  RCC_CLOCKTYPE_PCLK1 |
                                  RCC_CLOCKTYPE_PCLK2; // clock types
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;  // sysclk PLL
 8001016:	2303      	movs	r3, #3
 8001018:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;         // AHB=1
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;          // APB1=1
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;          // APB2=1
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);  // apply clk
 8001026:	463b      	mov	r3, r7
 8001028:	2104      	movs	r1, #4
 800102a:	4618      	mov	r0, r3
 800102c:	f002 fea8 	bl	8003d80 <HAL_RCC_ClockConfig>
}
 8001030:	bf00      	nop
 8001032:	3758      	adds	r7, #88	@ 0x58
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	@ 0x28
 800103c:	af00      	add	r7, sp, #0
    ADC_MultiModeTypeDef multimode = {0};   // multi mode
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = {0};   // channel config
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	615a      	str	r2, [r3, #20]

    hadc1.Instance = ADC1;                               // ADC1
 800105a:	4b1b      	ldr	r3, [pc, #108]	@ (80010c8 <MX_ADC1_Init+0x90>)
 800105c:	4a1b      	ldr	r2, [pc, #108]	@ (80010cc <MX_ADC1_Init+0x94>)
 800105e:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;    // no prescaler
 8001060:	4b19      	ldr	r3, [pc, #100]	@ (80010c8 <MX_ADC1_Init+0x90>)
 8001062:	2200      	movs	r2, #0
 8001064:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;          // 12-bit
 8001066:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <MX_ADC1_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;          // right align
 800106c:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <MX_ADC1_Init+0x90>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;          // single channel
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <MX_ADC1_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;       // single conv
 8001078:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <MX_ADC1_Init+0x90>)
 800107a:	2204      	movs	r2, #4
 800107c:	615a      	str	r2, [r3, #20]
    hadc1.Init.ContinuousConvMode = DISABLE;             // single shot
 800107e:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <MX_ADC1_Init+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1;                      // 1 channel
 8001084:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <MX_ADC1_Init+0x90>)
 8001086:	2201      	movs	r2, #1
 8001088:	61da      	str	r2, [r3, #28]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;    // sw trigger
 800108a:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <MX_ADC1_Init+0x90>)
 800108c:	2200      	movs	r2, #0
 800108e:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_ADC_Init(&hadc1);                                // init ADC
 8001090:	480d      	ldr	r0, [pc, #52]	@ (80010c8 <MX_ADC1_Init+0x90>)
 8001092:	f000 fdad 	bl	8001bf0 <HAL_ADC_Init>

    multimode.Mode = ADC_MODE_INDEPENDENT;               // independent
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
    HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode);// apply mode
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	4809      	ldr	r0, [pc, #36]	@ (80010c8 <MX_ADC1_Init+0x90>)
 80010a2:	f001 fd33 	bl	8002b0c <HAL_ADCEx_MultiModeConfigChannel>

    sConfig.Channel = ADC_CHANNEL_5;                     // channel 5
 80010a6:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <MX_ADC1_Init+0x98>)
 80010a8:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;                   // rank 1
 80010aa:	2306      	movs	r3, #6
 80010ac:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;     // sample time
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;               // single end
 80010b2:	237f      	movs	r3, #127	@ 0x7f
 80010b4:	613b      	str	r3, [r7, #16]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);             // apply config
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	4619      	mov	r1, r3
 80010ba:	4803      	ldr	r0, [pc, #12]	@ (80010c8 <MX_ADC1_Init+0x90>)
 80010bc:	f001 f888 	bl	80021d0 <HAL_ADC_ConfigChannel>
}
 80010c0:	bf00      	nop
 80010c2:	3728      	adds	r7, #40	@ 0x28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200001f0 	.word	0x200001f0
 80010cc:	50040000 	.word	0x50040000
 80010d0:	14f00020 	.word	0x14f00020

080010d4 <MX_DAC1_Init>:

void MX_DAC1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	@ 0x28
 80010d8:	af00      	add	r7, sp, #0
    DAC_ChannelConfTypeDef sConfig = {0}; // DAC config
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2224      	movs	r2, #36	@ 0x24
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f005 f844 	bl	800616e <memset>

    hdac1.Instance = DAC1;                // DAC1
 80010e6:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <MX_DAC1_Init+0x48>)
 80010e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001120 <MX_DAC1_Init+0x4c>)
 80010ea:	601a      	str	r2, [r3, #0]
    HAL_DAC_Init(&hdac1);                 // init DAC
 80010ec:	480b      	ldr	r0, [pc, #44]	@ (800111c <MX_DAC1_Init+0x48>)
 80010ee:	f001 fea2 	bl	8002e36 <HAL_DAC_Init>

    sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;       // disable S/H
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
    sConfig.DAC_Trigger = DAC_TRIGGER_NONE;                      // no trigger
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;          // buffer on
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
    sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;// internal conn
 80010fe:	2301      	movs	r3, #1
 8001100:	613b      	str	r3, [r7, #16]
    sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;             // factory trim
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
    HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1);      // config DAC
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2200      	movs	r2, #0
 800110a:	4619      	mov	r1, r3
 800110c:	4803      	ldr	r0, [pc, #12]	@ (800111c <MX_DAC1_Init+0x48>)
 800110e:	f001 ff26 	bl	8002f5e <HAL_DAC_ConfigChannel>
}
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	@ 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000254 	.word	0x20000254
 8001120:	40007400 	.word	0x40007400

08001124 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;               // UART2
 8001128:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <MX_USART2_UART_Init+0x40>)
 800112a:	4a0f      	ldr	r2, [pc, #60]	@ (8001168 <MX_USART2_UART_Init+0x44>)
 800112c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;          // baud
 800112e:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <MX_USART2_UART_Init+0x40>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B; // 8-bit
 8001136:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <MX_USART2_UART_Init+0x40>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;      // 1 stop
 800113c:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <MX_USART2_UART_Init+0x40>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;       // no parity
 8001142:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <MX_USART2_UART_Init+0x40>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;          // TX/RX
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <MX_USART2_UART_Init+0x40>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE; // no flow
 800114e:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <MX_USART2_UART_Init+0x40>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16; // oversample
 8001154:	4b03      	ldr	r3, [pc, #12]	@ (8001164 <MX_USART2_UART_Init+0x40>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
    HAL_UART_Init(&huart2);                 // init UART
 800115a:	4802      	ldr	r0, [pc, #8]	@ (8001164 <MX_USART2_UART_Init+0x40>)
 800115c:	f003 fcf0 	bl	8004b40 <HAL_UART_Init>
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000268 	.word	0x20000268
 8001168:	40004400 	.word	0x40004400

0800116c <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	@ 0x28
 8001170:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0}; // GPIO config
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();   // clk GPIOC
 8001182:	4b28      	ldr	r3, [pc, #160]	@ (8001224 <MX_GPIO_Init+0xb8>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001186:	4a27      	ldr	r2, [pc, #156]	@ (8001224 <MX_GPIO_Init+0xb8>)
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800118e:	4b25      	ldr	r3, [pc, #148]	@ (8001224 <MX_GPIO_Init+0xb8>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();   // clk GPIOH
 800119a:	4b22      	ldr	r3, [pc, #136]	@ (8001224 <MX_GPIO_Init+0xb8>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	4a21      	ldr	r2, [pc, #132]	@ (8001224 <MX_GPIO_Init+0xb8>)
 80011a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001224 <MX_GPIO_Init+0xb8>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();   // clk GPIOA
 80011b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <MX_GPIO_Init+0xb8>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001224 <MX_GPIO_Init+0xb8>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011be:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <MX_GPIO_Init+0xb8>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();   // clk GPIOB
 80011ca:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <MX_GPIO_Init+0xb8>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	4a15      	ldr	r2, [pc, #84]	@ (8001224 <MX_GPIO_Init+0xb8>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d6:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <MX_GPIO_Init+0xb8>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = LD2_Pin;                 // LED pin
 80011e2:	2320      	movs	r3, #32
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;    // output
 80011e6:	2301      	movs	r3, #1
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;            // no pull
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;   // low speed
 80011ee:	2300      	movs	r3, #0
 80011f0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);// init LED
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011fc:	f001 ffd6 	bl	80031ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B1_Pin;                  // button pin
 8001200:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;   // falling edge
 8001206:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800120a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;            // no pull
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct); // init button
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4804      	ldr	r0, [pc, #16]	@ (8001228 <MX_GPIO_Init+0xbc>)
 8001218:	f001 ffc8 	bl	80031ac <HAL_GPIO_Init>
}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	@ 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40021000 	.word	0x40021000
 8001228:	48000800 	.word	0x48000800

0800122c <Error_Handler>:

void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
    __disable_irq(); // disable IRQ
    while (1) {}     // infinite loop
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <Error_Handler+0x8>

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <HAL_MspInit+0x44>)
 8001240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001242:	4a0e      	ldr	r2, [pc, #56]	@ (800127c <HAL_MspInit+0x44>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6613      	str	r3, [r2, #96]	@ 0x60
 800124a:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <HAL_MspInit+0x44>)
 800124c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	4b09      	ldr	r3, [pc, #36]	@ (800127c <HAL_MspInit+0x44>)
 8001258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125a:	4a08      	ldr	r2, [pc, #32]	@ (800127c <HAL_MspInit+0x44>)
 800125c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001260:	6593      	str	r3, [r2, #88]	@ 0x58
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_MspInit+0x44>)
 8001264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000

08001280 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b0ac      	sub	sp, #176	@ 0xb0
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2288      	movs	r2, #136	@ 0x88
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f004 ff64 	bl	800616e <memset>
  if(hadc->Instance==ADC1)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a27      	ldr	r2, [pc, #156]	@ (8001348 <HAL_ADC_MspInit+0xc8>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d147      	bne.n	8001340 <HAL_ADC_MspInit+0xc0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80012b4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80012b6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80012ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80012be:	2302      	movs	r3, #2
 80012c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80012c2:	2301      	movs	r3, #1
 80012c4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80012c6:	2308      	movs	r3, #8
 80012c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80012ca:	2307      	movs	r3, #7
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80012ce:	2302      	movs	r3, #2
 80012d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80012d2:	2302      	movs	r3, #2
 80012d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80012d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80012da:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 ff71 	bl	80041c8 <HAL_RCCEx_PeriphCLKConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80012ec:	f7ff ff9e 	bl	800122c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80012f0:	4b16      	ldr	r3, [pc, #88]	@ (800134c <HAL_ADC_MspInit+0xcc>)
 80012f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f4:	4a15      	ldr	r2, [pc, #84]	@ (800134c <HAL_ADC_MspInit+0xcc>)
 80012f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012fc:	4b13      	ldr	r3, [pc, #76]	@ (800134c <HAL_ADC_MspInit+0xcc>)
 80012fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001300:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001308:	4b10      	ldr	r3, [pc, #64]	@ (800134c <HAL_ADC_MspInit+0xcc>)
 800130a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130c:	4a0f      	ldr	r2, [pc, #60]	@ (800134c <HAL_ADC_MspInit+0xcc>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001314:	4b0d      	ldr	r3, [pc, #52]	@ (800134c <HAL_ADC_MspInit+0xcc>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001320:	2301      	movs	r3, #1
 8001322:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001326:	230b      	movs	r3, #11
 8001328:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001332:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001336:	4619      	mov	r1, r3
 8001338:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800133c:	f001 ff36 	bl	80031ac <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001340:	bf00      	nop
 8001342:	37b0      	adds	r7, #176	@ 0xb0
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	50040000 	.word	0x50040000
 800134c:	40021000 	.word	0x40021000

08001350 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	@ 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a15      	ldr	r2, [pc, #84]	@ (80013c4 <HAL_DAC_MspInit+0x74>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d124      	bne.n	80013bc <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <HAL_DAC_MspInit+0x78>)
 8001374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001376:	4a14      	ldr	r2, [pc, #80]	@ (80013c8 <HAL_DAC_MspInit+0x78>)
 8001378:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800137c:	6593      	str	r3, [r2, #88]	@ 0x58
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <HAL_DAC_MspInit+0x78>)
 8001380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001382:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <HAL_DAC_MspInit+0x78>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	4a0e      	ldr	r2, [pc, #56]	@ (80013c8 <HAL_DAC_MspInit+0x78>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001396:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <HAL_DAC_MspInit+0x78>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013a2:	2310      	movs	r3, #16
 80013a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a6:	2303      	movs	r3, #3
 80013a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b8:	f001 fef8 	bl	80031ac <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 80013bc:	bf00      	nop
 80013be:	3728      	adds	r7, #40	@ 0x28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40007400 	.word	0x40007400
 80013c8:	40021000 	.word	0x40021000

080013cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b0ac      	sub	sp, #176	@ 0xb0
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2288      	movs	r2, #136	@ 0x88
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f004 febe 	bl	800616e <memset>
  if(huart->Instance==USART2)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a21      	ldr	r2, [pc, #132]	@ (800147c <HAL_UART_MspInit+0xb0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d13b      	bne.n	8001474 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013fc:	2302      	movs	r3, #2
 80013fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001400:	2300      	movs	r3, #0
 8001402:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4618      	mov	r0, r3
 800140a:	f002 fedd 	bl	80041c8 <HAL_RCCEx_PeriphCLKConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001414:	f7ff ff0a 	bl	800122c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001418:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <HAL_UART_MspInit+0xb4>)
 800141a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141c:	4a18      	ldr	r2, [pc, #96]	@ (8001480 <HAL_UART_MspInit+0xb4>)
 800141e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001422:	6593      	str	r3, [r2, #88]	@ 0x58
 8001424:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <HAL_UART_MspInit+0xb4>)
 8001426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b13      	ldr	r3, [pc, #76]	@ (8001480 <HAL_UART_MspInit+0xb4>)
 8001432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001434:	4a12      	ldr	r2, [pc, #72]	@ (8001480 <HAL_UART_MspInit+0xb4>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143c:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <HAL_UART_MspInit+0xb4>)
 800143e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001448:	230c      	movs	r3, #12
 800144a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001460:	2307      	movs	r3, #7
 8001462:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800146a:	4619      	mov	r1, r3
 800146c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001470:	f001 fe9c 	bl	80031ac <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001474:	bf00      	nop
 8001476:	37b0      	adds	r7, #176	@ 0xb0
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40004400 	.word	0x40004400
 8001480:	40021000 	.word	0x40021000

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <NMI_Handler+0x4>

0800148c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <HardFault_Handler+0x4>

08001494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <MemManage_Handler+0x4>

0800149c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <BusFault_Handler+0x4>

080014a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <UsageFault_Handler+0x4>

080014ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014da:	f000 f961 	bl	80017a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  return 1;
 80014e6:	2301      	movs	r3, #1
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <_kill>:

int _kill(int pid, int sig)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014fc:	f004 fe8a 	bl	8006214 <__errno>
 8001500:	4603      	mov	r3, r0
 8001502:	2216      	movs	r2, #22
 8001504:	601a      	str	r2, [r3, #0]
  return -1;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <_exit>:

void _exit (int status)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800151a:	f04f 31ff 	mov.w	r1, #4294967295
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ffe7 	bl	80014f2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <_exit+0x12>

08001528 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	e00a      	b.n	8001550 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800153a:	f3af 8000 	nop.w
 800153e:	4601      	mov	r1, r0
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	60ba      	str	r2, [r7, #8]
 8001546:	b2ca      	uxtb	r2, r1
 8001548:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3301      	adds	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	429a      	cmp	r2, r3
 8001556:	dbf0      	blt.n	800153a <_read+0x12>
  }

  return len;
 8001558:	687b      	ldr	r3, [r7, #4]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	e009      	b.n	8001588 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	60ba      	str	r2, [r7, #8]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fca9 	bl	8000ed4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	429a      	cmp	r2, r3
 800158e:	dbf1      	blt.n	8001574 <_write+0x12>
  }
  return len;
 8001590:	687b      	ldr	r3, [r7, #4]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <_close>:

int _close(int file)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015c2:	605a      	str	r2, [r3, #4]
  return 0;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <_isatty>:

int _isatty(int file)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800160c:	4a14      	ldr	r2, [pc, #80]	@ (8001660 <_sbrk+0x5c>)
 800160e:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <_sbrk+0x60>)
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001618:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001620:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <_sbrk+0x64>)
 8001622:	4a12      	ldr	r2, [pc, #72]	@ (800166c <_sbrk+0x68>)
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d207      	bcs.n	8001644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001634:	f004 fdee 	bl	8006214 <__errno>
 8001638:	4603      	mov	r3, r0
 800163a:	220c      	movs	r2, #12
 800163c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163e:	f04f 33ff 	mov.w	r3, #4294967295
 8001642:	e009      	b.n	8001658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001644:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164a:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	4a05      	ldr	r2, [pc, #20]	@ (8001668 <_sbrk+0x64>)
 8001654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20018000 	.word	0x20018000
 8001664:	00000400 	.word	0x00000400
 8001668:	200002f0 	.word	0x200002f0
 800166c:	20000448 	.word	0x20000448

08001670 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001674:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <SystemInit+0x20>)
 8001676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800167a:	4a05      	ldr	r2, [pc, #20]	@ (8001690 <SystemInit+0x20>)
 800167c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001694:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001698:	f7ff ffea 	bl	8001670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800169c:	480c      	ldr	r0, [pc, #48]	@ (80016d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800169e:	490d      	ldr	r1, [pc, #52]	@ (80016d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016a0:	4a0d      	ldr	r2, [pc, #52]	@ (80016d8 <LoopForever+0xe>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a4:	e002      	b.n	80016ac <LoopCopyDataInit>

080016a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016aa:	3304      	adds	r3, #4

080016ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b0:	d3f9      	bcc.n	80016a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b2:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80016b4:	4c0a      	ldr	r4, [pc, #40]	@ (80016e0 <LoopForever+0x16>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b8:	e001      	b.n	80016be <LoopFillZerobss>

080016ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016bc:	3204      	adds	r2, #4

080016be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c0:	d3fb      	bcc.n	80016ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016c2:	f004 fdad 	bl	8006220 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016c6:	f7ff fc17 	bl	8000ef8 <main>

080016ca <LoopForever>:

LoopForever:
    b LoopForever
 80016ca:	e7fe      	b.n	80016ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80016d8:	080083d4 	.word	0x080083d4
  ldr r2, =_sbss
 80016dc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80016e0:	20000444 	.word	0x20000444

080016e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016e4:	e7fe      	b.n	80016e4 <ADC1_2_IRQHandler>
	...

080016e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <HAL_Init+0x3c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001724 <HAL_Init+0x3c>)
 80016f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016fc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016fe:	2003      	movs	r0, #3
 8001700:	f001 fb66 	bl	8002dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001704:	2000      	movs	r0, #0
 8001706:	f000 f80f 	bl	8001728 <HAL_InitTick>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	71fb      	strb	r3, [r7, #7]
 8001714:	e001      	b.n	800171a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001716:	f7ff fd8f 	bl	8001238 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800171a:	79fb      	ldrb	r3, [r7, #7]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40022000 	.word	0x40022000

08001728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001734:	4b17      	ldr	r3, [pc, #92]	@ (8001794 <HAL_InitTick+0x6c>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d023      	beq.n	8001784 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800173c:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <HAL_InitTick+0x70>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <HAL_InitTick+0x6c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800174a:	fbb3 f3f1 	udiv	r3, r3, r1
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f001 fb63 	bl	8002e1e <HAL_SYSTICK_Config>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10f      	bne.n	800177e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b0f      	cmp	r3, #15
 8001762:	d809      	bhi.n	8001778 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001764:	2200      	movs	r2, #0
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	f04f 30ff 	mov.w	r0, #4294967295
 800176c:	f001 fb3b 	bl	8002de6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001770:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <HAL_InitTick+0x74>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e007      	b.n	8001788 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	73fb      	strb	r3, [r7, #15]
 800177c:	e004      	b.n	8001788 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	73fb      	strb	r3, [r7, #15]
 8001782:	e001      	b.n	8001788 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000008 	.word	0x20000008
 8001798:	20000000 	.word	0x20000000
 800179c:	20000004 	.word	0x20000004

080017a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <HAL_IncTick+0x20>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <HAL_IncTick+0x24>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <HAL_IncTick+0x24>)
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000008 	.word	0x20000008
 80017c4:	200002f4 	.word	0x200002f4

080017c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return uwTick;
 80017cc:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <HAL_GetTick+0x14>)
 80017ce:	681b      	ldr	r3, [r3, #0]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	200002f4 	.word	0x200002f4

080017e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e8:	f7ff ffee 	bl	80017c8 <HAL_GetTick>
 80017ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f8:	d005      	beq.n	8001806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <HAL_Delay+0x44>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4413      	add	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001806:	bf00      	nop
 8001808:	f7ff ffde 	bl	80017c8 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	429a      	cmp	r2, r3
 8001816:	d8f7      	bhi.n	8001808 <HAL_Delay+0x28>
  {
  }
}
 8001818:	bf00      	nop
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000008 	.word	0x20000008

08001828 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	431a      	orrs	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	609a      	str	r2, [r3, #8]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	609a      	str	r2, [r3, #8]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	3360      	adds	r3, #96	@ 0x60
 80018a2:	461a      	mov	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <LL_ADC_SetOffset+0x44>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	4313      	orrs	r3, r2
 80018c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018c8:	bf00      	nop
 80018ca:	371c      	adds	r7, #28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	03fff000 	.word	0x03fff000

080018d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3360      	adds	r3, #96	@ 0x60
 80018e6:	461a      	mov	r2, r3
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001904:	b480      	push	{r7}
 8001906:	b087      	sub	sp, #28
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	3360      	adds	r3, #96	@ 0x60
 8001914:	461a      	mov	r2, r3
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	431a      	orrs	r2, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800192e:	bf00      	nop
 8001930:	371c      	adds	r7, #28
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3330      	adds	r3, #48	@ 0x30
 8001970:	461a      	mov	r2, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	4413      	add	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	211f      	movs	r1, #31
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	401a      	ands	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	0e9b      	lsrs	r3, r3, #26
 8001998:	f003 011f 	and.w	r1, r3, #31
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	431a      	orrs	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019ac:	bf00      	nop
 80019ae:	371c      	adds	r7, #28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3314      	adds	r3, #20
 80019c8:	461a      	mov	r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	0e5b      	lsrs	r3, r3, #25
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	4413      	add	r3, r2
 80019d6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	0d1b      	lsrs	r3, r3, #20
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	2107      	movs	r1, #7
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	401a      	ands	r2, r3
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	0d1b      	lsrs	r3, r3, #20
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	431a      	orrs	r2, r3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a02:	bf00      	nop
 8001a04:	371c      	adds	r7, #28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f003 0318 	and.w	r3, r3, #24
 8001a32:	4908      	ldr	r1, [pc, #32]	@ (8001a54 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a34:	40d9      	lsrs	r1, r3
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	400b      	ands	r3, r1
 8001a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	0007ffff 	.word	0x0007ffff

08001a58 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 031f 	and.w	r3, r3, #31
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001aa0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6093      	str	r3, [r2, #8]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ac4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ac8:	d101      	bne.n	8001ace <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001aec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001af0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b18:	d101      	bne.n	8001b1e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b40:	f043 0201 	orr.w	r2, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <LL_ADC_IsEnabled+0x18>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <LL_ADC_IsEnabled+0x1a>
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b8a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b8e:	f043 0204 	orr.w	r2, r3, #4
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d101      	bne.n	8001bba <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d101      	bne.n	8001be0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b089      	sub	sp, #36	@ 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e130      	b.n	8001e6c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d109      	bne.n	8001c2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff fb31 	bl	8001280 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff3f 	bl	8001ab4 <LL_ADC_IsDeepPowerDownEnabled>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d004      	beq.n	8001c46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff25 	bl	8001a90 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff5a 	bl	8001b04 <LL_ADC_IsInternalRegulatorEnabled>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d115      	bne.n	8001c82 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff ff3e 	bl	8001adc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c60:	4b84      	ldr	r3, [pc, #528]	@ (8001e74 <HAL_ADC_Init+0x284>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	099b      	lsrs	r3, r3, #6
 8001c66:	4a84      	ldr	r2, [pc, #528]	@ (8001e78 <HAL_ADC_Init+0x288>)
 8001c68:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6c:	099b      	lsrs	r3, r3, #6
 8001c6e:	3301      	adds	r3, #1
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c74:	e002      	b.n	8001c7c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f9      	bne.n	8001c76 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff3c 	bl	8001b04 <LL_ADC_IsInternalRegulatorEnabled>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10d      	bne.n	8001cae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c96:	f043 0210 	orr.w	r2, r3, #16
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca2:	f043 0201 	orr.w	r2, r3, #1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ff75 	bl	8001ba2 <LL_ADC_REG_IsConversionOngoing>
 8001cb8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f040 80c9 	bne.w	8001e5a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 80c5 	bne.w	8001e5a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001cd8:	f043 0202 	orr.w	r2, r3, #2
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff35 	bl	8001b54 <LL_ADC_IsEnabled>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d115      	bne.n	8001d1c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cf0:	4862      	ldr	r0, [pc, #392]	@ (8001e7c <HAL_ADC_Init+0x28c>)
 8001cf2:	f7ff ff2f 	bl	8001b54 <LL_ADC_IsEnabled>
 8001cf6:	4604      	mov	r4, r0
 8001cf8:	4861      	ldr	r0, [pc, #388]	@ (8001e80 <HAL_ADC_Init+0x290>)
 8001cfa:	f7ff ff2b 	bl	8001b54 <LL_ADC_IsEnabled>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	431c      	orrs	r4, r3
 8001d02:	4860      	ldr	r0, [pc, #384]	@ (8001e84 <HAL_ADC_Init+0x294>)
 8001d04:	f7ff ff26 	bl	8001b54 <LL_ADC_IsEnabled>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4323      	orrs	r3, r4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d105      	bne.n	8001d1c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	4619      	mov	r1, r3
 8001d16:	485c      	ldr	r0, [pc, #368]	@ (8001e88 <HAL_ADC_Init+0x298>)
 8001d18:	f7ff fd86 	bl	8001828 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	7e5b      	ldrb	r3, [r3, #25]
 8001d20:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d26:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d2c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d32:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d3a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d106      	bne.n	8001d58 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	045b      	lsls	r3, r3, #17
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d009      	beq.n	8001d74 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d64:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	4b44      	ldr	r3, [pc, #272]	@ (8001e8c <HAL_ADC_Init+0x29c>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6812      	ldr	r2, [r2, #0]
 8001d82:	69b9      	ldr	r1, [r7, #24]
 8001d84:	430b      	orrs	r3, r1
 8001d86:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff1b 	bl	8001bc8 <LL_ADC_INJ_IsConversionOngoing>
 8001d92:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d13d      	bne.n	8001e16 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d13a      	bne.n	8001e16 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001da4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001dac:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001dbc:	f023 0302 	bic.w	r3, r3, #2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	69b9      	ldr	r1, [r7, #24]
 8001dc6:	430b      	orrs	r3, r1
 8001dc8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d118      	bne.n	8001e06 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001dde:	f023 0304 	bic.w	r3, r3, #4
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001dea:	4311      	orrs	r1, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001df0:	4311      	orrs	r1, r2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001df6:	430a      	orrs	r2, r1
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	611a      	str	r2, [r3, #16]
 8001e04:	e007      	b.n	8001e16 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0201 	bic.w	r2, r2, #1
 8001e14:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d10c      	bne.n	8001e38 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e24:	f023 010f 	bic.w	r1, r3, #15
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	1e5a      	subs	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e36:	e007      	b.n	8001e48 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 020f 	bic.w	r2, r2, #15
 8001e46:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4c:	f023 0303 	bic.w	r3, r3, #3
 8001e50:	f043 0201 	orr.w	r2, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e58:	e007      	b.n	8001e6a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e5e:	f043 0210 	orr.w	r2, r3, #16
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3724      	adds	r7, #36	@ 0x24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd90      	pop	{r4, r7, pc}
 8001e74:	20000000 	.word	0x20000000
 8001e78:	053e2d63 	.word	0x053e2d63
 8001e7c:	50040000 	.word	0x50040000
 8001e80:	50040100 	.word	0x50040100
 8001e84:	50040200 	.word	0x50040200
 8001e88:	50040300 	.word	0x50040300
 8001e8c:	fff0c007 	.word	0xfff0c007

08001e90 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e98:	4857      	ldr	r0, [pc, #348]	@ (8001ff8 <HAL_ADC_Start+0x168>)
 8001e9a:	f7ff fddd 	bl	8001a58 <LL_ADC_GetMultimode>
 8001e9e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fe7c 	bl	8001ba2 <LL_ADC_REG_IsConversionOngoing>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f040 809c 	bne.w	8001fea <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_ADC_Start+0x30>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e097      	b.n	8001ff0 <HAL_ADC_Start+0x160>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 fd73 	bl	80029b4 <ADC_Enable>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ed2:	7dfb      	ldrb	r3, [r7, #23]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f040 8083 	bne.w	8001fe0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ede:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ee2:	f023 0301 	bic.w	r3, r3, #1
 8001ee6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a42      	ldr	r2, [pc, #264]	@ (8001ffc <HAL_ADC_Start+0x16c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d002      	beq.n	8001efe <HAL_ADC_Start+0x6e>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	e000      	b.n	8001f00 <HAL_ADC_Start+0x70>
 8001efe:	4b40      	ldr	r3, [pc, #256]	@ (8002000 <HAL_ADC_Start+0x170>)
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d002      	beq.n	8001f0e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d105      	bne.n	8001f1a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f12:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f26:	d106      	bne.n	8001f36 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2c:	f023 0206 	bic.w	r2, r3, #6
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f34:	e002      	b.n	8001f3c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	221c      	movs	r2, #28
 8001f42:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a2a      	ldr	r2, [pc, #168]	@ (8001ffc <HAL_ADC_Start+0x16c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d002      	beq.n	8001f5c <HAL_ADC_Start+0xcc>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	e000      	b.n	8001f5e <HAL_ADC_Start+0xce>
 8001f5c:	4b28      	ldr	r3, [pc, #160]	@ (8002000 <HAL_ADC_Start+0x170>)
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d008      	beq.n	8001f78 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	2b05      	cmp	r3, #5
 8001f70:	d002      	beq.n	8001f78 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	2b09      	cmp	r3, #9
 8001f76:	d114      	bne.n	8001fa2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d007      	beq.n	8001f96 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f8a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f8e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fded 	bl	8001b7a <LL_ADC_REG_StartConversion>
 8001fa0:	e025      	b.n	8001fee <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a12      	ldr	r2, [pc, #72]	@ (8001ffc <HAL_ADC_Start+0x16c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d002      	beq.n	8001fbe <HAL_ADC_Start+0x12e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	e000      	b.n	8001fc0 <HAL_ADC_Start+0x130>
 8001fbe:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <HAL_ADC_Start+0x170>)
 8001fc0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00f      	beq.n	8001fee <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001fd6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	655a      	str	r2, [r3, #84]	@ 0x54
 8001fde:	e006      	b.n	8001fee <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001fe8:	e001      	b.n	8001fee <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fea:	2302      	movs	r3, #2
 8001fec:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	50040300 	.word	0x50040300
 8001ffc:	50040100 	.word	0x50040100
 8002000:	50040000 	.word	0x50040000

08002004 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800200e:	4866      	ldr	r0, [pc, #408]	@ (80021a8 <HAL_ADC_PollForConversion+0x1a4>)
 8002010:	f7ff fd22 	bl	8001a58 <LL_ADC_GetMultimode>
 8002014:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	2b08      	cmp	r3, #8
 800201c:	d102      	bne.n	8002024 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800201e:	2308      	movs	r3, #8
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	e02a      	b.n	800207a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2b05      	cmp	r3, #5
 800202e:	d002      	beq.n	8002036 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2b09      	cmp	r3, #9
 8002034:	d111      	bne.n	800205a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d007      	beq.n	8002054 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002048:	f043 0220 	orr.w	r2, r3, #32
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0a4      	b.n	800219e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002054:	2304      	movs	r3, #4
 8002056:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002058:	e00f      	b.n	800207a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800205a:	4853      	ldr	r0, [pc, #332]	@ (80021a8 <HAL_ADC_PollForConversion+0x1a4>)
 800205c:	f7ff fd0a 	bl	8001a74 <LL_ADC_GetMultiDMATransfer>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800206a:	f043 0220 	orr.w	r2, r3, #32
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e093      	b.n	800219e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002076:	2304      	movs	r3, #4
 8002078:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800207a:	f7ff fba5 	bl	80017c8 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002080:	e021      	b.n	80020c6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002088:	d01d      	beq.n	80020c6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800208a:	f7ff fb9d 	bl	80017c8 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d302      	bcc.n	80020a0 <HAL_ADC_PollForConversion+0x9c>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d112      	bne.n	80020c6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10b      	bne.n	80020c6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b2:	f043 0204 	orr.w	r2, r3, #4
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e06b      	b.n	800219e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0d6      	beq.n	8002082 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fc28 	bl	800193a <LL_ADC_REG_IsTriggerSourceSWStart>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d01c      	beq.n	800212a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	7e5b      	ldrb	r3, [r3, #25]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d118      	bne.n	800212a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b08      	cmp	r3, #8
 8002104:	d111      	bne.n	800212a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800210a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002116:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d105      	bne.n	800212a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002122:	f043 0201 	orr.w	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a1f      	ldr	r2, [pc, #124]	@ (80021ac <HAL_ADC_PollForConversion+0x1a8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d002      	beq.n	800213a <HAL_ADC_PollForConversion+0x136>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	e000      	b.n	800213c <HAL_ADC_PollForConversion+0x138>
 800213a:	4b1d      	ldr	r3, [pc, #116]	@ (80021b0 <HAL_ADC_PollForConversion+0x1ac>)
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	4293      	cmp	r3, r2
 8002142:	d008      	beq.n	8002156 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2b05      	cmp	r3, #5
 800214e:	d002      	beq.n	8002156 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2b09      	cmp	r3, #9
 8002154:	d104      	bne.n	8002160 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	e00c      	b.n	800217a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a11      	ldr	r2, [pc, #68]	@ (80021ac <HAL_ADC_PollForConversion+0x1a8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d002      	beq.n	8002170 <HAL_ADC_PollForConversion+0x16c>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	e000      	b.n	8002172 <HAL_ADC_PollForConversion+0x16e>
 8002170:	4b0f      	ldr	r3, [pc, #60]	@ (80021b0 <HAL_ADC_PollForConversion+0x1ac>)
 8002172:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	2b08      	cmp	r3, #8
 800217e:	d104      	bne.n	800218a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2208      	movs	r2, #8
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	e008      	b.n	800219c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d103      	bne.n	800219c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	220c      	movs	r2, #12
 800219a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3720      	adds	r7, #32
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	50040300 	.word	0x50040300
 80021ac:	50040100 	.word	0x50040100
 80021b0:	50040000 	.word	0x50040000

080021b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b0b6      	sub	sp, #216	@ 0xd8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x22>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e3c9      	b.n	8002986 <HAL_ADC_ConfigChannel+0x7b6>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fccf 	bl	8001ba2 <LL_ADC_REG_IsConversionOngoing>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	f040 83aa 	bne.w	8002960 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b05      	cmp	r3, #5
 800221a:	d824      	bhi.n	8002266 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	3b02      	subs	r3, #2
 8002222:	2b03      	cmp	r3, #3
 8002224:	d81b      	bhi.n	800225e <HAL_ADC_ConfigChannel+0x8e>
 8002226:	a201      	add	r2, pc, #4	@ (adr r2, 800222c <HAL_ADC_ConfigChannel+0x5c>)
 8002228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222c:	0800223d 	.word	0x0800223d
 8002230:	08002245 	.word	0x08002245
 8002234:	0800224d 	.word	0x0800224d
 8002238:	08002255 	.word	0x08002255
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800223c:	230c      	movs	r3, #12
 800223e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002242:	e010      	b.n	8002266 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002244:	2312      	movs	r3, #18
 8002246:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800224a:	e00c      	b.n	8002266 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800224c:	2318      	movs	r3, #24
 800224e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002252:	e008      	b.n	8002266 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002254:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002258:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800225c:	e003      	b.n	8002266 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800225e:	2306      	movs	r3, #6
 8002260:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002264:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002274:	f7ff fb74 	bl	8001960 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fc90 	bl	8001ba2 <LL_ADC_REG_IsConversionOngoing>
 8002282:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fc9c 	bl	8001bc8 <LL_ADC_INJ_IsConversionOngoing>
 8002290:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002294:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002298:	2b00      	cmp	r3, #0
 800229a:	f040 81a4 	bne.w	80025e6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800229e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f040 819f 	bne.w	80025e6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	6819      	ldr	r1, [r3, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	461a      	mov	r2, r3
 80022b6:	f7ff fb7f 	bl	80019b8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	695a      	ldr	r2, [r3, #20]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	08db      	lsrs	r3, r3, #3
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d00a      	beq.n	80022f2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	6919      	ldr	r1, [r3, #16]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022ec:	f7ff fad0 	bl	8001890 <LL_ADC_SetOffset>
 80022f0:	e179      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff faed 	bl	80018d8 <LL_ADC_GetOffsetChannel>
 80022fe:	4603      	mov	r3, r0
 8002300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10a      	bne.n	800231e <HAL_ADC_ConfigChannel+0x14e>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff fae2 	bl	80018d8 <LL_ADC_GetOffsetChannel>
 8002314:	4603      	mov	r3, r0
 8002316:	0e9b      	lsrs	r3, r3, #26
 8002318:	f003 021f 	and.w	r2, r3, #31
 800231c:	e01e      	b.n	800235c <HAL_ADC_ConfigChannel+0x18c>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fad7 	bl	80018d8 <LL_ADC_GetOffsetChannel>
 800232a:	4603      	mov	r3, r0
 800232c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002334:	fa93 f3a3 	rbit	r3, r3
 8002338:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800233c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002340:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002344:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800234c:	2320      	movs	r3, #32
 800234e:	e004      	b.n	800235a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002350:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002354:	fab3 f383 	clz	r3, r3
 8002358:	b2db      	uxtb	r3, r3
 800235a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002364:	2b00      	cmp	r3, #0
 8002366:	d105      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x1a4>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	0e9b      	lsrs	r3, r3, #26
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	e018      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x1d6>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002388:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800238c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002390:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002398:	2320      	movs	r3, #32
 800239a:	e004      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800239c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80023a0:	fab3 f383 	clz	r3, r3
 80023a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d106      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff faa6 	bl	8001904 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2101      	movs	r1, #1
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fa8a 	bl	80018d8 <LL_ADC_GetOffsetChannel>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10a      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x214>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2101      	movs	r1, #1
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fa7f 	bl	80018d8 <LL_ADC_GetOffsetChannel>
 80023da:	4603      	mov	r3, r0
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	f003 021f 	and.w	r2, r3, #31
 80023e2:	e01e      	b.n	8002422 <HAL_ADC_ConfigChannel+0x252>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2101      	movs	r1, #1
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff fa74 	bl	80018d8 <LL_ADC_GetOffsetChannel>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023fa:	fa93 f3a3 	rbit	r3, r3
 80023fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002402:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002406:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800240a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002412:	2320      	movs	r3, #32
 8002414:	e004      	b.n	8002420 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002416:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242a:	2b00      	cmp	r3, #0
 800242c:	d105      	bne.n	800243a <HAL_ADC_ConfigChannel+0x26a>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	0e9b      	lsrs	r3, r3, #26
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	e018      	b.n	800246c <HAL_ADC_ConfigChannel+0x29c>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800244e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002452:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002456:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800245e:	2320      	movs	r3, #32
 8002460:	e004      	b.n	800246c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002462:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800246c:	429a      	cmp	r2, r3
 800246e:	d106      	bne.n	800247e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2200      	movs	r2, #0
 8002476:	2101      	movs	r1, #1
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fa43 	bl	8001904 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2102      	movs	r1, #2
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fa27 	bl	80018d8 <LL_ADC_GetOffsetChannel>
 800248a:	4603      	mov	r3, r0
 800248c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10a      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x2da>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2102      	movs	r1, #2
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fa1c 	bl	80018d8 <LL_ADC_GetOffsetChannel>
 80024a0:	4603      	mov	r3, r0
 80024a2:	0e9b      	lsrs	r3, r3, #26
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	e01e      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x318>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2102      	movs	r1, #2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fa11 	bl	80018d8 <LL_ADC_GetOffsetChannel>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80024c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80024d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80024d8:	2320      	movs	r3, #32
 80024da:	e004      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80024dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024e0:	fab3 f383 	clz	r3, r3
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d105      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x330>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	0e9b      	lsrs	r3, r3, #26
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	e014      	b.n	800252a <HAL_ADC_ConfigChannel+0x35a>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800250e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002510:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002514:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800251c:	2320      	movs	r3, #32
 800251e:	e004      	b.n	800252a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002520:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002524:	fab3 f383 	clz	r3, r3
 8002528:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800252a:	429a      	cmp	r2, r3
 800252c:	d106      	bne.n	800253c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2200      	movs	r2, #0
 8002534:	2102      	movs	r1, #2
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff f9e4 	bl	8001904 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2103      	movs	r1, #3
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff f9c8 	bl	80018d8 <LL_ADC_GetOffsetChannel>
 8002548:	4603      	mov	r3, r0
 800254a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10a      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x398>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2103      	movs	r1, #3
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff f9bd 	bl	80018d8 <LL_ADC_GetOffsetChannel>
 800255e:	4603      	mov	r3, r0
 8002560:	0e9b      	lsrs	r3, r3, #26
 8002562:	f003 021f 	and.w	r2, r3, #31
 8002566:	e017      	b.n	8002598 <HAL_ADC_ConfigChannel+0x3c8>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2103      	movs	r1, #3
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff f9b2 	bl	80018d8 <LL_ADC_GetOffsetChannel>
 8002574:	4603      	mov	r3, r0
 8002576:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002580:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002582:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002584:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800258a:	2320      	movs	r3, #32
 800258c:	e003      	b.n	8002596 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800258e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002590:	fab3 f383 	clz	r3, r3
 8002594:	b2db      	uxtb	r3, r3
 8002596:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d105      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x3e0>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	0e9b      	lsrs	r3, r3, #26
 80025aa:	f003 031f 	and.w	r3, r3, #31
 80025ae:	e011      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x404>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025b8:	fa93 f3a3 	rbit	r3, r3
 80025bc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80025be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80025c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80025c8:	2320      	movs	r3, #32
 80025ca:	e003      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80025cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d106      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2200      	movs	r2, #0
 80025de:	2103      	movs	r1, #3
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff f98f 	bl	8001904 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fab2 	bl	8001b54 <LL_ADC_IsEnabled>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f040 8140 	bne.w	8002878 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	6819      	ldr	r1, [r3, #0]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	461a      	mov	r2, r3
 8002606:	f7ff fa03 	bl	8001a10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	4a8f      	ldr	r2, [pc, #572]	@ (800284c <HAL_ADC_ConfigChannel+0x67c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	f040 8131 	bne.w	8002878 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10b      	bne.n	800263e <HAL_ADC_ConfigChannel+0x46e>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	0e9b      	lsrs	r3, r3, #26
 800262c:	3301      	adds	r3, #1
 800262e:	f003 031f 	and.w	r3, r3, #31
 8002632:	2b09      	cmp	r3, #9
 8002634:	bf94      	ite	ls
 8002636:	2301      	movls	r3, #1
 8002638:	2300      	movhi	r3, #0
 800263a:	b2db      	uxtb	r3, r3
 800263c:	e019      	b.n	8002672 <HAL_ADC_ConfigChannel+0x4a2>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800264c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800264e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002650:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002656:	2320      	movs	r3, #32
 8002658:	e003      	b.n	8002662 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800265a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800265c:	fab3 f383 	clz	r3, r3
 8002660:	b2db      	uxtb	r3, r3
 8002662:	3301      	adds	r3, #1
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	2b09      	cmp	r3, #9
 800266a:	bf94      	ite	ls
 800266c:	2301      	movls	r3, #1
 800266e:	2300      	movhi	r3, #0
 8002670:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002672:	2b00      	cmp	r3, #0
 8002674:	d079      	beq.n	800276a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267e:	2b00      	cmp	r3, #0
 8002680:	d107      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x4c2>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	0e9b      	lsrs	r3, r3, #26
 8002688:	3301      	adds	r3, #1
 800268a:	069b      	lsls	r3, r3, #26
 800268c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002690:	e015      	b.n	80026be <HAL_ADC_ConfigChannel+0x4ee>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80026a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026a2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80026a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80026aa:	2320      	movs	r3, #32
 80026ac:	e003      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80026ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	3301      	adds	r3, #1
 80026b8:	069b      	lsls	r3, r3, #26
 80026ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d109      	bne.n	80026de <HAL_ADC_ConfigChannel+0x50e>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	0e9b      	lsrs	r3, r3, #26
 80026d0:	3301      	adds	r3, #1
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	2101      	movs	r1, #1
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	e017      	b.n	800270e <HAL_ADC_ConfigChannel+0x53e>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80026ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026ee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80026f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80026f6:	2320      	movs	r3, #32
 80026f8:	e003      	b.n	8002702 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80026fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	3301      	adds	r3, #1
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	2101      	movs	r1, #1
 800270a:	fa01 f303 	lsl.w	r3, r1, r3
 800270e:	ea42 0103 	orr.w	r1, r2, r3
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10a      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x564>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	0e9b      	lsrs	r3, r3, #26
 8002724:	3301      	adds	r3, #1
 8002726:	f003 021f 	and.w	r2, r3, #31
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	051b      	lsls	r3, r3, #20
 8002732:	e018      	b.n	8002766 <HAL_ADC_ConfigChannel+0x596>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800273c:	fa93 f3a3 	rbit	r3, r3
 8002740:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002744:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800274c:	2320      	movs	r3, #32
 800274e:	e003      	b.n	8002758 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	3301      	adds	r3, #1
 800275a:	f003 021f 	and.w	r2, r3, #31
 800275e:	4613      	mov	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4413      	add	r3, r2
 8002764:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002766:	430b      	orrs	r3, r1
 8002768:	e081      	b.n	800286e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002772:	2b00      	cmp	r3, #0
 8002774:	d107      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x5b6>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	0e9b      	lsrs	r3, r3, #26
 800277c:	3301      	adds	r3, #1
 800277e:	069b      	lsls	r3, r3, #26
 8002780:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002784:	e015      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x5e2>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002796:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800279e:	2320      	movs	r3, #32
 80027a0:	e003      	b.n	80027aa <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80027a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	3301      	adds	r3, #1
 80027ac:	069b      	lsls	r3, r3, #26
 80027ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d109      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x602>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	0e9b      	lsrs	r3, r3, #26
 80027c4:	3301      	adds	r3, #1
 80027c6:	f003 031f 	and.w	r3, r3, #31
 80027ca:	2101      	movs	r1, #1
 80027cc:	fa01 f303 	lsl.w	r3, r1, r3
 80027d0:	e017      	b.n	8002802 <HAL_ADC_ConfigChannel+0x632>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	fa93 f3a3 	rbit	r3, r3
 80027de:	61bb      	str	r3, [r7, #24]
  return result;
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80027ea:	2320      	movs	r3, #32
 80027ec:	e003      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	fab3 f383 	clz	r3, r3
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	3301      	adds	r3, #1
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	2101      	movs	r1, #1
 80027fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002802:	ea42 0103 	orr.w	r1, r2, r3
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10d      	bne.n	800282e <HAL_ADC_ConfigChannel+0x65e>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	0e9b      	lsrs	r3, r3, #26
 8002818:	3301      	adds	r3, #1
 800281a:	f003 021f 	and.w	r2, r3, #31
 800281e:	4613      	mov	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4413      	add	r3, r2
 8002824:	3b1e      	subs	r3, #30
 8002826:	051b      	lsls	r3, r3, #20
 8002828:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800282c:	e01e      	b.n	800286c <HAL_ADC_ConfigChannel+0x69c>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	60fb      	str	r3, [r7, #12]
  return result;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d104      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002846:	2320      	movs	r3, #32
 8002848:	e006      	b.n	8002858 <HAL_ADC_ConfigChannel+0x688>
 800284a:	bf00      	nop
 800284c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	3301      	adds	r3, #1
 800285a:	f003 021f 	and.w	r2, r3, #31
 800285e:	4613      	mov	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	4413      	add	r3, r2
 8002864:	3b1e      	subs	r3, #30
 8002866:	051b      	lsls	r3, r3, #20
 8002868:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800286c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002872:	4619      	mov	r1, r3
 8002874:	f7ff f8a0 	bl	80019b8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4b44      	ldr	r3, [pc, #272]	@ (8002990 <HAL_ADC_ConfigChannel+0x7c0>)
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d07a      	beq.n	800297a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002884:	4843      	ldr	r0, [pc, #268]	@ (8002994 <HAL_ADC_ConfigChannel+0x7c4>)
 8002886:	f7fe fff5 	bl	8001874 <LL_ADC_GetCommonPathInternalCh>
 800288a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a41      	ldr	r2, [pc, #260]	@ (8002998 <HAL_ADC_ConfigChannel+0x7c8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d12c      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002898:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800289c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d126      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a3c      	ldr	r2, [pc, #240]	@ (800299c <HAL_ADC_ConfigChannel+0x7cc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d004      	beq.n	80028b8 <HAL_ADC_ConfigChannel+0x6e8>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a3b      	ldr	r2, [pc, #236]	@ (80029a0 <HAL_ADC_ConfigChannel+0x7d0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d15d      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028c0:	4619      	mov	r1, r3
 80028c2:	4834      	ldr	r0, [pc, #208]	@ (8002994 <HAL_ADC_ConfigChannel+0x7c4>)
 80028c4:	f7fe ffc3 	bl	800184e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028c8:	4b36      	ldr	r3, [pc, #216]	@ (80029a4 <HAL_ADC_ConfigChannel+0x7d4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	099b      	lsrs	r3, r3, #6
 80028ce:	4a36      	ldr	r2, [pc, #216]	@ (80029a8 <HAL_ADC_ConfigChannel+0x7d8>)
 80028d0:	fba2 2303 	umull	r2, r3, r2, r3
 80028d4:	099b      	lsrs	r3, r3, #6
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	4613      	mov	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80028e2:	e002      	b.n	80028ea <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f9      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028f0:	e040      	b.n	8002974 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a2d      	ldr	r2, [pc, #180]	@ (80029ac <HAL_ADC_ConfigChannel+0x7dc>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d118      	bne.n	800292e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002900:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d112      	bne.n	800292e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a23      	ldr	r2, [pc, #140]	@ (800299c <HAL_ADC_ConfigChannel+0x7cc>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d004      	beq.n	800291c <HAL_ADC_ConfigChannel+0x74c>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a22      	ldr	r2, [pc, #136]	@ (80029a0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d12d      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800291c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002920:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002924:	4619      	mov	r1, r3
 8002926:	481b      	ldr	r0, [pc, #108]	@ (8002994 <HAL_ADC_ConfigChannel+0x7c4>)
 8002928:	f7fe ff91 	bl	800184e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800292c:	e024      	b.n	8002978 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1f      	ldr	r2, [pc, #124]	@ (80029b0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d120      	bne.n	800297a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002938:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800293c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d11a      	bne.n	800297a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a14      	ldr	r2, [pc, #80]	@ (800299c <HAL_ADC_ConfigChannel+0x7cc>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d115      	bne.n	800297a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800294e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002952:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002956:	4619      	mov	r1, r3
 8002958:	480e      	ldr	r0, [pc, #56]	@ (8002994 <HAL_ADC_ConfigChannel+0x7c4>)
 800295a:	f7fe ff78 	bl	800184e <LL_ADC_SetCommonPathInternalCh>
 800295e:	e00c      	b.n	800297a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002964:	f043 0220 	orr.w	r2, r3, #32
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002972:	e002      	b.n	800297a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002974:	bf00      	nop
 8002976:	e000      	b.n	800297a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002978:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002982:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002986:	4618      	mov	r0, r3
 8002988:	37d8      	adds	r7, #216	@ 0xd8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	80080000 	.word	0x80080000
 8002994:	50040300 	.word	0x50040300
 8002998:	c7520000 	.word	0xc7520000
 800299c:	50040000 	.word	0x50040000
 80029a0:	50040200 	.word	0x50040200
 80029a4:	20000000 	.word	0x20000000
 80029a8:	053e2d63 	.word	0x053e2d63
 80029ac:	cb840000 	.word	0xcb840000
 80029b0:	80000001 	.word	0x80000001

080029b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029bc:	2300      	movs	r3, #0
 80029be:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff f8c5 	bl	8001b54 <LL_ADC_IsEnabled>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d169      	bne.n	8002aa4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	4b36      	ldr	r3, [pc, #216]	@ (8002ab0 <ADC_Enable+0xfc>)
 80029d8:	4013      	ands	r3, r2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00d      	beq.n	80029fa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e2:	f043 0210 	orr.w	r2, r3, #16
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ee:	f043 0201 	orr.w	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e055      	b.n	8002aa6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff f894 	bl	8001b2c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a04:	482b      	ldr	r0, [pc, #172]	@ (8002ab4 <ADC_Enable+0x100>)
 8002a06:	f7fe ff35 	bl	8001874 <LL_ADC_GetCommonPathInternalCh>
 8002a0a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d013      	beq.n	8002a3c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a14:	4b28      	ldr	r3, [pc, #160]	@ (8002ab8 <ADC_Enable+0x104>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	099b      	lsrs	r3, r3, #6
 8002a1a:	4a28      	ldr	r2, [pc, #160]	@ (8002abc <ADC_Enable+0x108>)
 8002a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a20:	099b      	lsrs	r3, r3, #6
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a2e:	e002      	b.n	8002a36 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f9      	bne.n	8002a30 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a3c:	f7fe fec4 	bl	80017c8 <HAL_GetTick>
 8002a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a42:	e028      	b.n	8002a96 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff f883 	bl	8001b54 <LL_ADC_IsEnabled>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d104      	bne.n	8002a5e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff f867 	bl	8001b2c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a5e:	f7fe feb3 	bl	80017c8 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d914      	bls.n	8002a96 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d00d      	beq.n	8002a96 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a7e:	f043 0210 	orr.w	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8a:	f043 0201 	orr.w	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e007      	b.n	8002aa6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d1cf      	bne.n	8002a44 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	8000003f 	.word	0x8000003f
 8002ab4:	50040300 	.word	0x50040300
 8002ab8:	20000000 	.word	0x20000000
 8002abc:	053e2d63 	.word	0x053e2d63

08002ac0 <LL_ADC_IsEnabled>:
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <LL_ADC_IsEnabled+0x18>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <LL_ADC_IsEnabled+0x1a>
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d101      	bne.n	8002afe <LL_ADC_REG_IsConversionOngoing+0x18>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b09f      	sub	sp, #124	@ 0x7c
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e093      	b.n	8002c52 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002b32:	2300      	movs	r3, #0
 8002b34:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002b36:	2300      	movs	r3, #0
 8002b38:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a47      	ldr	r2, [pc, #284]	@ (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d102      	bne.n	8002b4a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b44:	4b46      	ldr	r3, [pc, #280]	@ (8002c60 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	e001      	b.n	8002b4e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10b      	bne.n	8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b58:	f043 0220 	orr.w	r2, r3, #32
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e072      	b.n	8002c52 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff ffb9 	bl	8002ae6 <LL_ADC_REG_IsConversionOngoing>
 8002b74:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff ffb3 	bl	8002ae6 <LL_ADC_REG_IsConversionOngoing>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d154      	bne.n	8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002b86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d151      	bne.n	8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b8c:	4b35      	ldr	r3, [pc, #212]	@ (8002c64 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002b8e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d02c      	beq.n	8002bf2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6859      	ldr	r1, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002baa:	035b      	lsls	r3, r3, #13
 8002bac:	430b      	orrs	r3, r1
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bb2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bb4:	4829      	ldr	r0, [pc, #164]	@ (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002bb6:	f7ff ff83 	bl	8002ac0 <LL_ADC_IsEnabled>
 8002bba:	4604      	mov	r4, r0
 8002bbc:	4828      	ldr	r0, [pc, #160]	@ (8002c60 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002bbe:	f7ff ff7f 	bl	8002ac0 <LL_ADC_IsEnabled>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	431c      	orrs	r4, r3
 8002bc6:	4828      	ldr	r0, [pc, #160]	@ (8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002bc8:	f7ff ff7a 	bl	8002ac0 <LL_ADC_IsEnabled>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	4323      	orrs	r3, r4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d137      	bne.n	8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002bd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002bdc:	f023 030f 	bic.w	r3, r3, #15
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	6811      	ldr	r1, [r2, #0]
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	6892      	ldr	r2, [r2, #8]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	431a      	orrs	r2, r3
 8002bec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bee:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bf0:	e028      	b.n	8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002bf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bfc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bfe:	4817      	ldr	r0, [pc, #92]	@ (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c00:	f7ff ff5e 	bl	8002ac0 <LL_ADC_IsEnabled>
 8002c04:	4604      	mov	r4, r0
 8002c06:	4816      	ldr	r0, [pc, #88]	@ (8002c60 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c08:	f7ff ff5a 	bl	8002ac0 <LL_ADC_IsEnabled>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	431c      	orrs	r4, r3
 8002c10:	4815      	ldr	r0, [pc, #84]	@ (8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002c12:	f7ff ff55 	bl	8002ac0 <LL_ADC_IsEnabled>
 8002c16:	4603      	mov	r3, r0
 8002c18:	4323      	orrs	r3, r4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d112      	bne.n	8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002c26:	f023 030f 	bic.w	r3, r3, #15
 8002c2a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c2c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c2e:	e009      	b.n	8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c34:	f043 0220 	orr.w	r2, r3, #32
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002c42:	e000      	b.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c4e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	377c      	adds	r7, #124	@ 0x7c
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd90      	pop	{r4, r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	50040000 	.word	0x50040000
 8002c60:	50040100 	.word	0x50040100
 8002c64:	50040300 	.word	0x50040300
 8002c68:	50040200 	.word	0x50040200

08002c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c9e:	4a04      	ldr	r2, [pc, #16]	@ (8002cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	60d3      	str	r3, [r2, #12]
}
 8002ca4:	bf00      	nop
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb8:	4b04      	ldr	r3, [pc, #16]	@ (8002ccc <__NVIC_GetPriorityGrouping+0x18>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	f003 0307 	and.w	r3, r3, #7
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	6039      	str	r1, [r7, #0]
 8002cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	db0a      	blt.n	8002cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	490c      	ldr	r1, [pc, #48]	@ (8002d1c <__NVIC_SetPriority+0x4c>)
 8002cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cee:	0112      	lsls	r2, r2, #4
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf8:	e00a      	b.n	8002d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	4908      	ldr	r1, [pc, #32]	@ (8002d20 <__NVIC_SetPriority+0x50>)
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	3b04      	subs	r3, #4
 8002d08:	0112      	lsls	r2, r2, #4
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	761a      	strb	r2, [r3, #24]
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	e000e100 	.word	0xe000e100
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b089      	sub	sp, #36	@ 0x24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f1c3 0307 	rsb	r3, r3, #7
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	bf28      	it	cs
 8002d42:	2304      	movcs	r3, #4
 8002d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	2b06      	cmp	r3, #6
 8002d4c:	d902      	bls.n	8002d54 <NVIC_EncodePriority+0x30>
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3b03      	subs	r3, #3
 8002d52:	e000      	b.n	8002d56 <NVIC_EncodePriority+0x32>
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d58:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43da      	mvns	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	401a      	ands	r2, r3
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	43d9      	mvns	r1, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d7c:	4313      	orrs	r3, r2
         );
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3724      	adds	r7, #36	@ 0x24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d9c:	d301      	bcc.n	8002da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e00f      	b.n	8002dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002da2:	4a0a      	ldr	r2, [pc, #40]	@ (8002dcc <SysTick_Config+0x40>)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002daa:	210f      	movs	r1, #15
 8002dac:	f04f 30ff 	mov.w	r0, #4294967295
 8002db0:	f7ff ff8e 	bl	8002cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db4:	4b05      	ldr	r3, [pc, #20]	@ (8002dcc <SysTick_Config+0x40>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dba:	4b04      	ldr	r3, [pc, #16]	@ (8002dcc <SysTick_Config+0x40>)
 8002dbc:	2207      	movs	r2, #7
 8002dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	e000e010 	.word	0xe000e010

08002dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff ff47 	bl	8002c6c <__NVIC_SetPriorityGrouping>
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b086      	sub	sp, #24
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	4603      	mov	r3, r0
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
 8002df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002df8:	f7ff ff5c 	bl	8002cb4 <__NVIC_GetPriorityGrouping>
 8002dfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	6978      	ldr	r0, [r7, #20]
 8002e04:	f7ff ff8e 	bl	8002d24 <NVIC_EncodePriority>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e0e:	4611      	mov	r1, r2
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff5d 	bl	8002cd0 <__NVIC_SetPriority>
}
 8002e16:	bf00      	nop
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff ffb0 	bl	8002d8c <SysTick_Config>
 8002e2c:	4603      	mov	r3, r0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e014      	b.n	8002e72 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	791b      	ldrb	r3, [r3, #4]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d105      	bne.n	8002e5e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7fe fa79 	bl	8001350 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2202      	movs	r2, #2
 8002e62:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	795b      	ldrb	r3, [r3, #5]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_DAC_Start+0x16>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e03b      	b.n	8002f08 <HAL_DAC_Start+0x8e>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2202      	movs	r2, #2
 8002e9a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6819      	ldr	r1, [r3, #0]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10f      	bne.n	8002eda <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d118      	bne.n	8002efa <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	605a      	str	r2, [r3, #4]
 8002ed8:	e00f      	b.n	8002efa <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002ee4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ee8:	d107      	bne.n	8002efa <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0202 	orr.w	r2, r2, #2
 8002ef8:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d105      	bne.n	8002f3e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4413      	add	r3, r2
 8002f38:	3308      	adds	r3, #8
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	e004      	b.n	8002f48 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4413      	add	r3, r2
 8002f44:	3314      	adds	r3, #20
 8002f46:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	371c      	adds	r7, #28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b088      	sub	sp, #32
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	795b      	ldrb	r3, [r3, #5]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_DAC_ConfigChannel+0x1c>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e114      	b.n	80031a4 <HAL_DAC_ConfigChannel+0x246>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2202      	movs	r2, #2
 8002f84:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	f040 8081 	bne.w	8003092 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002f90:	f7fe fc1a 	bl	80017c8 <HAL_GetTick>
 8002f94:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d140      	bne.n	800301e <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f9c:	e018      	b.n	8002fd0 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f9e:	f7fe fc13 	bl	80017c8 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d911      	bls.n	8002fd0 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f043 0208 	orr.w	r2, r3, #8
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2203      	movs	r2, #3
 8002fca:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e0e9      	b.n	80031a4 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1df      	bne.n	8002f9e <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002fde:	2001      	movs	r0, #1
 8002fe0:	f7fe fbfe 	bl	80017e0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	6992      	ldr	r2, [r2, #24]
 8002fec:	641a      	str	r2, [r3, #64]	@ 0x40
 8002fee:	e023      	b.n	8003038 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ff0:	f7fe fbea 	bl	80017c8 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d90f      	bls.n	800301e <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003004:	2b00      	cmp	r3, #0
 8003006:	da0a      	bge.n	800301e <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f043 0208 	orr.w	r2, r3, #8
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2203      	movs	r2, #3
 8003018:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e0c2      	b.n	80031a4 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003024:	2b00      	cmp	r3, #0
 8003026:	dbe3      	blt.n	8002ff0 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003028:	2001      	movs	r0, #1
 800302a:	f7fe fbd9 	bl	80017e0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	6992      	ldr	r2, [r2, #24]
 8003036:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003048:	fa01 f303 	lsl.w	r3, r1, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	ea02 0103 	and.w	r1, r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	409a      	lsls	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	21ff      	movs	r1, #255	@ 0xff
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	ea02 0103 	and.w	r1, r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	6a1a      	ldr	r2, [r3, #32]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	409a      	lsls	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d11d      	bne.n	80030d6 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a0:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	221f      	movs	r2, #31
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030dc:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2207      	movs	r2, #7
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f003 0310 	and.w	r3, r3, #16
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6819      	ldr	r1, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43da      	mvns	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	400a      	ands	r2, r1
 800313a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43db      	mvns	r3, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4013      	ands	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6819      	ldr	r1, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f003 0310 	and.w	r3, r3, #16
 8003186:	22c0      	movs	r2, #192	@ 0xc0
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43da      	mvns	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	400a      	ands	r2, r1
 8003194:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2201      	movs	r2, #1
 800319a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3720      	adds	r7, #32
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ba:	e17f      	b.n	80034bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	2101      	movs	r1, #1
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	fa01 f303 	lsl.w	r3, r1, r3
 80031c8:	4013      	ands	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8171 	beq.w	80034b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d005      	beq.n	80031ec <HAL_GPIO_Init+0x40>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d130      	bne.n	800324e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	2203      	movs	r2, #3
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4013      	ands	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003222:	2201      	movs	r2, #1
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	f003 0201 	and.w	r2, r3, #1
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	2b03      	cmp	r3, #3
 8003258:	d118      	bne.n	800328c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003260:	2201      	movs	r2, #1
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4013      	ands	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	08db      	lsrs	r3, r3, #3
 8003276:	f003 0201 	and.w	r2, r3, #1
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	2b03      	cmp	r3, #3
 8003296:	d017      	beq.n	80032c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	2203      	movs	r2, #3
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4013      	ands	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d123      	bne.n	800331c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	08da      	lsrs	r2, r3, #3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3208      	adds	r2, #8
 80032dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	220f      	movs	r2, #15
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4013      	ands	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	08da      	lsrs	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3208      	adds	r2, #8
 8003316:	6939      	ldr	r1, [r7, #16]
 8003318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	2203      	movs	r2, #3
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 0203 	and.w	r2, r3, #3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80ac 	beq.w	80034b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800335e:	4b5f      	ldr	r3, [pc, #380]	@ (80034dc <HAL_GPIO_Init+0x330>)
 8003360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003362:	4a5e      	ldr	r2, [pc, #376]	@ (80034dc <HAL_GPIO_Init+0x330>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	6613      	str	r3, [r2, #96]	@ 0x60
 800336a:	4b5c      	ldr	r3, [pc, #368]	@ (80034dc <HAL_GPIO_Init+0x330>)
 800336c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003376:	4a5a      	ldr	r2, [pc, #360]	@ (80034e0 <HAL_GPIO_Init+0x334>)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	3302      	adds	r3, #2
 800337e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003382:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	220f      	movs	r2, #15
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4013      	ands	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80033a0:	d025      	beq.n	80033ee <HAL_GPIO_Init+0x242>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a4f      	ldr	r2, [pc, #316]	@ (80034e4 <HAL_GPIO_Init+0x338>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d01f      	beq.n	80033ea <HAL_GPIO_Init+0x23e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a4e      	ldr	r2, [pc, #312]	@ (80034e8 <HAL_GPIO_Init+0x33c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d019      	beq.n	80033e6 <HAL_GPIO_Init+0x23a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a4d      	ldr	r2, [pc, #308]	@ (80034ec <HAL_GPIO_Init+0x340>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_GPIO_Init+0x236>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a4c      	ldr	r2, [pc, #304]	@ (80034f0 <HAL_GPIO_Init+0x344>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00d      	beq.n	80033de <HAL_GPIO_Init+0x232>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a4b      	ldr	r2, [pc, #300]	@ (80034f4 <HAL_GPIO_Init+0x348>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d007      	beq.n	80033da <HAL_GPIO_Init+0x22e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a4a      	ldr	r2, [pc, #296]	@ (80034f8 <HAL_GPIO_Init+0x34c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d101      	bne.n	80033d6 <HAL_GPIO_Init+0x22a>
 80033d2:	2306      	movs	r3, #6
 80033d4:	e00c      	b.n	80033f0 <HAL_GPIO_Init+0x244>
 80033d6:	2307      	movs	r3, #7
 80033d8:	e00a      	b.n	80033f0 <HAL_GPIO_Init+0x244>
 80033da:	2305      	movs	r3, #5
 80033dc:	e008      	b.n	80033f0 <HAL_GPIO_Init+0x244>
 80033de:	2304      	movs	r3, #4
 80033e0:	e006      	b.n	80033f0 <HAL_GPIO_Init+0x244>
 80033e2:	2303      	movs	r3, #3
 80033e4:	e004      	b.n	80033f0 <HAL_GPIO_Init+0x244>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e002      	b.n	80033f0 <HAL_GPIO_Init+0x244>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <HAL_GPIO_Init+0x244>
 80033ee:	2300      	movs	r3, #0
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	f002 0203 	and.w	r2, r2, #3
 80033f6:	0092      	lsls	r2, r2, #2
 80033f8:	4093      	lsls	r3, r2
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003400:	4937      	ldr	r1, [pc, #220]	@ (80034e0 <HAL_GPIO_Init+0x334>)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	089b      	lsrs	r3, r3, #2
 8003406:	3302      	adds	r3, #2
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800340e:	4b3b      	ldr	r3, [pc, #236]	@ (80034fc <HAL_GPIO_Init+0x350>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	43db      	mvns	r3, r3
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4013      	ands	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003432:	4a32      	ldr	r2, [pc, #200]	@ (80034fc <HAL_GPIO_Init+0x350>)
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003438:	4b30      	ldr	r3, [pc, #192]	@ (80034fc <HAL_GPIO_Init+0x350>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	43db      	mvns	r3, r3
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4013      	ands	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800345c:	4a27      	ldr	r2, [pc, #156]	@ (80034fc <HAL_GPIO_Init+0x350>)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003462:	4b26      	ldr	r3, [pc, #152]	@ (80034fc <HAL_GPIO_Init+0x350>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	43db      	mvns	r3, r3
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4013      	ands	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003486:	4a1d      	ldr	r2, [pc, #116]	@ (80034fc <HAL_GPIO_Init+0x350>)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800348c:	4b1b      	ldr	r3, [pc, #108]	@ (80034fc <HAL_GPIO_Init+0x350>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	43db      	mvns	r3, r3
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4013      	ands	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034b0:	4a12      	ldr	r2, [pc, #72]	@ (80034fc <HAL_GPIO_Init+0x350>)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	3301      	adds	r3, #1
 80034ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	fa22 f303 	lsr.w	r3, r2, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f47f ae78 	bne.w	80031bc <HAL_GPIO_Init+0x10>
  }
}
 80034cc:	bf00      	nop
 80034ce:	bf00      	nop
 80034d0:	371c      	adds	r7, #28
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40010000 	.word	0x40010000
 80034e4:	48000400 	.word	0x48000400
 80034e8:	48000800 	.word	0x48000800
 80034ec:	48000c00 	.word	0x48000c00
 80034f0:	48001000 	.word	0x48001000
 80034f4:	48001400 	.word	0x48001400
 80034f8:	48001800 	.word	0x48001800
 80034fc:	40010400 	.word	0x40010400

08003500 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003504:	4b04      	ldr	r3, [pc, #16]	@ (8003518 <HAL_PWREx_GetVoltageRange+0x18>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40007000 	.word	0x40007000

0800351c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800352a:	d130      	bne.n	800358e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800352c:	4b23      	ldr	r3, [pc, #140]	@ (80035bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003538:	d038      	beq.n	80035ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800353a:	4b20      	ldr	r3, [pc, #128]	@ (80035bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003542:	4a1e      	ldr	r2, [pc, #120]	@ (80035bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003544:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003548:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800354a:	4b1d      	ldr	r3, [pc, #116]	@ (80035c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2232      	movs	r2, #50	@ 0x32
 8003550:	fb02 f303 	mul.w	r3, r2, r3
 8003554:	4a1b      	ldr	r2, [pc, #108]	@ (80035c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	0c9b      	lsrs	r3, r3, #18
 800355c:	3301      	adds	r3, #1
 800355e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003560:	e002      	b.n	8003568 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	3b01      	subs	r3, #1
 8003566:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003568:	4b14      	ldr	r3, [pc, #80]	@ (80035bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003570:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003574:	d102      	bne.n	800357c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f2      	bne.n	8003562 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800357c:	4b0f      	ldr	r3, [pc, #60]	@ (80035bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003588:	d110      	bne.n	80035ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e00f      	b.n	80035ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800358e:	4b0b      	ldr	r3, [pc, #44]	@ (80035bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800359a:	d007      	beq.n	80035ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800359c:	4b07      	ldr	r3, [pc, #28]	@ (80035bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035a4:	4a05      	ldr	r2, [pc, #20]	@ (80035bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40007000 	.word	0x40007000
 80035c0:	20000000 	.word	0x20000000
 80035c4:	431bde83 	.word	0x431bde83

080035c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e3ca      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035da:	4b97      	ldr	r3, [pc, #604]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 030c 	and.w	r3, r3, #12
 80035e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035e4:	4b94      	ldr	r3, [pc, #592]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0303 	and.w	r3, r3, #3
 80035ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0310 	and.w	r3, r3, #16
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 80e4 	beq.w	80037c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d007      	beq.n	8003612 <HAL_RCC_OscConfig+0x4a>
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	2b0c      	cmp	r3, #12
 8003606:	f040 808b 	bne.w	8003720 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2b01      	cmp	r3, #1
 800360e:	f040 8087 	bne.w	8003720 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003612:	4b89      	ldr	r3, [pc, #548]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <HAL_RCC_OscConfig+0x62>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e3a2      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1a      	ldr	r2, [r3, #32]
 800362e:	4b82      	ldr	r3, [pc, #520]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d004      	beq.n	8003644 <HAL_RCC_OscConfig+0x7c>
 800363a:	4b7f      	ldr	r3, [pc, #508]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003642:	e005      	b.n	8003650 <HAL_RCC_OscConfig+0x88>
 8003644:	4b7c      	ldr	r3, [pc, #496]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003646:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003650:	4293      	cmp	r3, r2
 8003652:	d223      	bcs.n	800369c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	4618      	mov	r0, r3
 800365a:	f000 fd55 	bl	8004108 <RCC_SetFlashLatencyFromMSIRange>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e383      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003668:	4b73      	ldr	r3, [pc, #460]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a72      	ldr	r2, [pc, #456]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800366e:	f043 0308 	orr.w	r3, r3, #8
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	4b70      	ldr	r3, [pc, #448]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	496d      	ldr	r1, [pc, #436]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003686:	4b6c      	ldr	r3, [pc, #432]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	4968      	ldr	r1, [pc, #416]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003696:	4313      	orrs	r3, r2
 8003698:	604b      	str	r3, [r1, #4]
 800369a:	e025      	b.n	80036e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800369c:	4b66      	ldr	r3, [pc, #408]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a65      	ldr	r2, [pc, #404]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80036a2:	f043 0308 	orr.w	r3, r3, #8
 80036a6:	6013      	str	r3, [r2, #0]
 80036a8:	4b63      	ldr	r3, [pc, #396]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	4960      	ldr	r1, [pc, #384]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036ba:	4b5f      	ldr	r3, [pc, #380]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	495b      	ldr	r1, [pc, #364]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d109      	bne.n	80036e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fd15 	bl	8004108 <RCC_SetFlashLatencyFromMSIRange>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e343      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036e8:	f000 fc4a 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 80036ec:	4602      	mov	r2, r0
 80036ee:	4b52      	ldr	r3, [pc, #328]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	4950      	ldr	r1, [pc, #320]	@ (800383c <HAL_RCC_OscConfig+0x274>)
 80036fa:	5ccb      	ldrb	r3, [r1, r3]
 80036fc:	f003 031f 	and.w	r3, r3, #31
 8003700:	fa22 f303 	lsr.w	r3, r2, r3
 8003704:	4a4e      	ldr	r2, [pc, #312]	@ (8003840 <HAL_RCC_OscConfig+0x278>)
 8003706:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003708:	4b4e      	ldr	r3, [pc, #312]	@ (8003844 <HAL_RCC_OscConfig+0x27c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f7fe f80b 	bl	8001728 <HAL_InitTick>
 8003712:	4603      	mov	r3, r0
 8003714:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d052      	beq.n	80037c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	e327      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d032      	beq.n	800378e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003728:	4b43      	ldr	r3, [pc, #268]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a42      	ldr	r2, [pc, #264]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003734:	f7fe f848 	bl	80017c8 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800373c:	f7fe f844 	bl	80017c8 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e310      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800374e:	4b3a      	ldr	r3, [pc, #232]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800375a:	4b37      	ldr	r3, [pc, #220]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a36      	ldr	r2, [pc, #216]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003760:	f043 0308 	orr.w	r3, r3, #8
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	4b34      	ldr	r3, [pc, #208]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	4931      	ldr	r1, [pc, #196]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003774:	4313      	orrs	r3, r2
 8003776:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003778:	4b2f      	ldr	r3, [pc, #188]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	492c      	ldr	r1, [pc, #176]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003788:	4313      	orrs	r3, r2
 800378a:	604b      	str	r3, [r1, #4]
 800378c:	e01a      	b.n	80037c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800378e:	4b2a      	ldr	r3, [pc, #168]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a29      	ldr	r2, [pc, #164]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003794:	f023 0301 	bic.w	r3, r3, #1
 8003798:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800379a:	f7fe f815 	bl	80017c8 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037a2:	f7fe f811 	bl	80017c8 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e2dd      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037b4:	4b20      	ldr	r3, [pc, #128]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1f0      	bne.n	80037a2 <HAL_RCC_OscConfig+0x1da>
 80037c0:	e000      	b.n	80037c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d074      	beq.n	80038ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d005      	beq.n	80037e2 <HAL_RCC_OscConfig+0x21a>
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	2b0c      	cmp	r3, #12
 80037da:	d10e      	bne.n	80037fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d10b      	bne.n	80037fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e2:	4b15      	ldr	r3, [pc, #84]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d064      	beq.n	80038b8 <HAL_RCC_OscConfig+0x2f0>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d160      	bne.n	80038b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e2ba      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003802:	d106      	bne.n	8003812 <HAL_RCC_OscConfig+0x24a>
 8003804:	4b0c      	ldr	r3, [pc, #48]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a0b      	ldr	r2, [pc, #44]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800380a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	e026      	b.n	8003860 <HAL_RCC_OscConfig+0x298>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800381a:	d115      	bne.n	8003848 <HAL_RCC_OscConfig+0x280>
 800381c:	4b06      	ldr	r3, [pc, #24]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a05      	ldr	r2, [pc, #20]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003822:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	4b03      	ldr	r3, [pc, #12]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a02      	ldr	r2, [pc, #8]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800382e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	e014      	b.n	8003860 <HAL_RCC_OscConfig+0x298>
 8003836:	bf00      	nop
 8003838:	40021000 	.word	0x40021000
 800383c:	08008004 	.word	0x08008004
 8003840:	20000000 	.word	0x20000000
 8003844:	20000004 	.word	0x20000004
 8003848:	4ba0      	ldr	r3, [pc, #640]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a9f      	ldr	r2, [pc, #636]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 800384e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	4b9d      	ldr	r3, [pc, #628]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a9c      	ldr	r2, [pc, #624]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 800385a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800385e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d013      	beq.n	8003890 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7fd ffae 	bl	80017c8 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003870:	f7fd ffaa 	bl	80017c8 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	@ 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e276      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003882:	4b92      	ldr	r3, [pc, #584]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0x2a8>
 800388e:	e014      	b.n	80038ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003890:	f7fd ff9a 	bl	80017c8 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003898:	f7fd ff96 	bl	80017c8 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	@ 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e262      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038aa:	4b88      	ldr	r3, [pc, #544]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0x2d0>
 80038b6:	e000      	b.n	80038ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d060      	beq.n	8003988 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d005      	beq.n	80038d8 <HAL_RCC_OscConfig+0x310>
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b0c      	cmp	r3, #12
 80038d0:	d119      	bne.n	8003906 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d116      	bne.n	8003906 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038d8:	4b7c      	ldr	r3, [pc, #496]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_RCC_OscConfig+0x328>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e23f      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f0:	4b76      	ldr	r3, [pc, #472]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	061b      	lsls	r3, r3, #24
 80038fe:	4973      	ldr	r1, [pc, #460]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003900:	4313      	orrs	r3, r2
 8003902:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003904:	e040      	b.n	8003988 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d023      	beq.n	8003956 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800390e:	4b6f      	ldr	r3, [pc, #444]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a6e      	ldr	r2, [pc, #440]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391a:	f7fd ff55 	bl	80017c8 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003922:	f7fd ff51 	bl	80017c8 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e21d      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003934:	4b65      	ldr	r3, [pc, #404]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003940:	4b62      	ldr	r3, [pc, #392]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	061b      	lsls	r3, r3, #24
 800394e:	495f      	ldr	r1, [pc, #380]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003950:	4313      	orrs	r3, r2
 8003952:	604b      	str	r3, [r1, #4]
 8003954:	e018      	b.n	8003988 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003956:	4b5d      	ldr	r3, [pc, #372]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a5c      	ldr	r2, [pc, #368]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 800395c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003962:	f7fd ff31 	bl	80017c8 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800396a:	f7fd ff2d 	bl	80017c8 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e1f9      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800397c:	4b53      	ldr	r3, [pc, #332]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f0      	bne.n	800396a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d03c      	beq.n	8003a0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01c      	beq.n	80039d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800399c:	4b4b      	ldr	r3, [pc, #300]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 800399e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039a2:	4a4a      	ldr	r2, [pc, #296]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ac:	f7fd ff0c 	bl	80017c8 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b4:	f7fd ff08 	bl	80017c8 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e1d4      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039c6:	4b41      	ldr	r3, [pc, #260]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 80039c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0ef      	beq.n	80039b4 <HAL_RCC_OscConfig+0x3ec>
 80039d4:	e01b      	b.n	8003a0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d6:	4b3d      	ldr	r3, [pc, #244]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 80039d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039dc:	4a3b      	ldr	r2, [pc, #236]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 80039de:	f023 0301 	bic.w	r3, r3, #1
 80039e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e6:	f7fd feef 	bl	80017c8 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ee:	f7fd feeb 	bl	80017c8 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e1b7      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a00:	4b32      	ldr	r3, [pc, #200]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1ef      	bne.n	80039ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 80a6 	beq.w	8003b68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a20:	4b2a      	ldr	r3, [pc, #168]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10d      	bne.n	8003a48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a2c:	4b27      	ldr	r3, [pc, #156]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a30:	4a26      	ldr	r2, [pc, #152]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003a32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a38:	4b24      	ldr	r3, [pc, #144]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a44:	2301      	movs	r3, #1
 8003a46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a48:	4b21      	ldr	r3, [pc, #132]	@ (8003ad0 <HAL_RCC_OscConfig+0x508>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d118      	bne.n	8003a86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a54:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad0 <HAL_RCC_OscConfig+0x508>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad0 <HAL_RCC_OscConfig+0x508>)
 8003a5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a60:	f7fd feb2 	bl	80017c8 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a68:	f7fd feae 	bl	80017c8 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e17a      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a7a:	4b15      	ldr	r3, [pc, #84]	@ (8003ad0 <HAL_RCC_OscConfig+0x508>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d108      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x4d8>
 8003a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a94:	4a0d      	ldr	r2, [pc, #52]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a9e:	e029      	b.n	8003af4 <HAL_RCC_OscConfig+0x52c>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b05      	cmp	r3, #5
 8003aa6:	d115      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x50c>
 8003aa8:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aae:	4a07      	ldr	r2, [pc, #28]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003ab0:	f043 0304 	orr.w	r3, r3, #4
 8003ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ab8:	4b04      	ldr	r3, [pc, #16]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abe:	4a03      	ldr	r2, [pc, #12]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ac8:	e014      	b.n	8003af4 <HAL_RCC_OscConfig+0x52c>
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	40007000 	.word	0x40007000
 8003ad4:	4b9c      	ldr	r3, [pc, #624]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ada:	4a9b      	ldr	r2, [pc, #620]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ae4:	4b98      	ldr	r3, [pc, #608]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aea:	4a97      	ldr	r2, [pc, #604]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003aec:	f023 0304 	bic.w	r3, r3, #4
 8003af0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d016      	beq.n	8003b2a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afc:	f7fd fe64 	bl	80017c8 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b02:	e00a      	b.n	8003b1a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b04:	f7fd fe60 	bl	80017c8 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e12a      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b1a:	4b8b      	ldr	r3, [pc, #556]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0ed      	beq.n	8003b04 <HAL_RCC_OscConfig+0x53c>
 8003b28:	e015      	b.n	8003b56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2a:	f7fd fe4d 	bl	80017c8 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b30:	e00a      	b.n	8003b48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b32:	f7fd fe49 	bl	80017c8 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e113      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b48:	4b7f      	ldr	r3, [pc, #508]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1ed      	bne.n	8003b32 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b56:	7ffb      	ldrb	r3, [r7, #31]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b5c:	4b7a      	ldr	r3, [pc, #488]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b60:	4a79      	ldr	r2, [pc, #484]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003b62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b66:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80fe 	beq.w	8003d6e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	f040 80d0 	bne.w	8003d1c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b7c:	4b72      	ldr	r3, [pc, #456]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f003 0203 	and.w	r2, r3, #3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d130      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d127      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d11f      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003bbc:	2a07      	cmp	r2, #7
 8003bbe:	bf14      	ite	ne
 8003bc0:	2201      	movne	r2, #1
 8003bc2:	2200      	moveq	r2, #0
 8003bc4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d113      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd4:	085b      	lsrs	r3, r3, #1
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d109      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	3b01      	subs	r3, #1
 8003bec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d06e      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b0c      	cmp	r3, #12
 8003bf6:	d069      	beq.n	8003ccc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bf8:	4b53      	ldr	r3, [pc, #332]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d105      	bne.n	8003c10 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c04:	4b50      	ldr	r3, [pc, #320]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e0ad      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c14:	4b4c      	ldr	r3, [pc, #304]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a4b      	ldr	r2, [pc, #300]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003c1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c1e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c20:	f7fd fdd2 	bl	80017c8 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c28:	f7fd fdce 	bl	80017c8 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e09a      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c3a:	4b43      	ldr	r3, [pc, #268]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c46:	4b40      	ldr	r3, [pc, #256]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	4b40      	ldr	r3, [pc, #256]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c56:	3a01      	subs	r2, #1
 8003c58:	0112      	lsls	r2, r2, #4
 8003c5a:	4311      	orrs	r1, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c60:	0212      	lsls	r2, r2, #8
 8003c62:	4311      	orrs	r1, r2
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c68:	0852      	lsrs	r2, r2, #1
 8003c6a:	3a01      	subs	r2, #1
 8003c6c:	0552      	lsls	r2, r2, #21
 8003c6e:	4311      	orrs	r1, r2
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c74:	0852      	lsrs	r2, r2, #1
 8003c76:	3a01      	subs	r2, #1
 8003c78:	0652      	lsls	r2, r2, #25
 8003c7a:	4311      	orrs	r1, r2
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c80:	0912      	lsrs	r2, r2, #4
 8003c82:	0452      	lsls	r2, r2, #17
 8003c84:	430a      	orrs	r2, r1
 8003c86:	4930      	ldr	r1, [pc, #192]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a2d      	ldr	r2, [pc, #180]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003c92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c98:	4b2b      	ldr	r3, [pc, #172]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	4a2a      	ldr	r2, [pc, #168]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003c9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ca2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ca4:	f7fd fd90 	bl	80017c8 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fd fd8c 	bl	80017c8 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e058      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cbe:	4b22      	ldr	r3, [pc, #136]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cca:	e050      	b.n	8003d6e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e04f      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d148      	bne.n	8003d6e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a19      	ldr	r2, [pc, #100]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ce6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ce8:	4b17      	ldr	r3, [pc, #92]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4a16      	ldr	r2, [pc, #88]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003cee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cf2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cf4:	f7fd fd68 	bl	80017c8 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfc:	f7fd fd64 	bl	80017c8 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e030      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0x734>
 8003d1a:	e028      	b.n	8003d6e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	2b0c      	cmp	r3, #12
 8003d20:	d023      	beq.n	8003d6a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d22:	4b09      	ldr	r3, [pc, #36]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a08      	ldr	r2, [pc, #32]	@ (8003d48 <HAL_RCC_OscConfig+0x780>)
 8003d28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2e:	f7fd fd4b 	bl	80017c8 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d34:	e00c      	b.n	8003d50 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d36:	f7fd fd47 	bl	80017c8 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d905      	bls.n	8003d50 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e013      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d50:	4b09      	ldr	r3, [pc, #36]	@ (8003d78 <HAL_RCC_OscConfig+0x7b0>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1ec      	bne.n	8003d36 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d5c:	4b06      	ldr	r3, [pc, #24]	@ (8003d78 <HAL_RCC_OscConfig+0x7b0>)
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	4905      	ldr	r1, [pc, #20]	@ (8003d78 <HAL_RCC_OscConfig+0x7b0>)
 8003d62:	4b06      	ldr	r3, [pc, #24]	@ (8003d7c <HAL_RCC_OscConfig+0x7b4>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	60cb      	str	r3, [r1, #12]
 8003d68:	e001      	b.n	8003d6e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3720      	adds	r7, #32
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	feeefffc 	.word	0xfeeefffc

08003d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0e7      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d94:	4b75      	ldr	r3, [pc, #468]	@ (8003f6c <HAL_RCC_ClockConfig+0x1ec>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d910      	bls.n	8003dc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da2:	4b72      	ldr	r3, [pc, #456]	@ (8003f6c <HAL_RCC_ClockConfig+0x1ec>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 0207 	bic.w	r2, r3, #7
 8003daa:	4970      	ldr	r1, [pc, #448]	@ (8003f6c <HAL_RCC_ClockConfig+0x1ec>)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db2:	4b6e      	ldr	r3, [pc, #440]	@ (8003f6c <HAL_RCC_ClockConfig+0x1ec>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0cf      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d010      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	4b66      	ldr	r3, [pc, #408]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d908      	bls.n	8003df2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de0:	4b63      	ldr	r3, [pc, #396]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	4960      	ldr	r1, [pc, #384]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d04c      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d107      	bne.n	8003e16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e06:	4b5a      	ldr	r3, [pc, #360]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d121      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e0a6      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d107      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e1e:	4b54      	ldr	r3, [pc, #336]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d115      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e09a      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d107      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e36:	4b4e      	ldr	r3, [pc, #312]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d109      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e08e      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e46:	4b4a      	ldr	r3, [pc, #296]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e086      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e56:	4b46      	ldr	r3, [pc, #280]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f023 0203 	bic.w	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	4943      	ldr	r1, [pc, #268]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e68:	f7fd fcae 	bl	80017c8 <HAL_GetTick>
 8003e6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e70:	f7fd fcaa 	bl	80017c8 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e06e      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e86:	4b3a      	ldr	r3, [pc, #232]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 020c 	and.w	r2, r3, #12
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d1eb      	bne.n	8003e70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d010      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	4b31      	ldr	r3, [pc, #196]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d208      	bcs.n	8003ec6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb4:	4b2e      	ldr	r3, [pc, #184]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	492b      	ldr	r1, [pc, #172]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ec6:	4b29      	ldr	r3, [pc, #164]	@ (8003f6c <HAL_RCC_ClockConfig+0x1ec>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d210      	bcs.n	8003ef6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed4:	4b25      	ldr	r3, [pc, #148]	@ (8003f6c <HAL_RCC_ClockConfig+0x1ec>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f023 0207 	bic.w	r2, r3, #7
 8003edc:	4923      	ldr	r1, [pc, #140]	@ (8003f6c <HAL_RCC_ClockConfig+0x1ec>)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee4:	4b21      	ldr	r3, [pc, #132]	@ (8003f6c <HAL_RCC_ClockConfig+0x1ec>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d001      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e036      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d008      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f02:	4b1b      	ldr	r3, [pc, #108]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	4918      	ldr	r1, [pc, #96]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d009      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f20:	4b13      	ldr	r3, [pc, #76]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	4910      	ldr	r1, [pc, #64]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f34:	f000 f824 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f70 <HAL_RCC_ClockConfig+0x1f0>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	091b      	lsrs	r3, r3, #4
 8003f40:	f003 030f 	and.w	r3, r3, #15
 8003f44:	490b      	ldr	r1, [pc, #44]	@ (8003f74 <HAL_RCC_ClockConfig+0x1f4>)
 8003f46:	5ccb      	ldrb	r3, [r1, r3]
 8003f48:	f003 031f 	and.w	r3, r3, #31
 8003f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f50:	4a09      	ldr	r2, [pc, #36]	@ (8003f78 <HAL_RCC_ClockConfig+0x1f8>)
 8003f52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f54:	4b09      	ldr	r3, [pc, #36]	@ (8003f7c <HAL_RCC_ClockConfig+0x1fc>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fd fbe5 	bl	8001728 <HAL_InitTick>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f62:	7afb      	ldrb	r3, [r7, #11]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40022000 	.word	0x40022000
 8003f70:	40021000 	.word	0x40021000
 8003f74:	08008004 	.word	0x08008004
 8003f78:	20000000 	.word	0x20000000
 8003f7c:	20000004 	.word	0x20000004

08003f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b089      	sub	sp, #36	@ 0x24
 8003f84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	61fb      	str	r3, [r7, #28]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f8e:	4b3e      	ldr	r3, [pc, #248]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
 8003f96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f98:	4b3b      	ldr	r3, [pc, #236]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	2b0c      	cmp	r3, #12
 8003fac:	d121      	bne.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d11e      	bne.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fb4:	4b34      	ldr	r3, [pc, #208]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d107      	bne.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003fc0:	4b31      	ldr	r3, [pc, #196]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fc6:	0a1b      	lsrs	r3, r3, #8
 8003fc8:	f003 030f 	and.w	r3, r3, #15
 8003fcc:	61fb      	str	r3, [r7, #28]
 8003fce:	e005      	b.n	8003fdc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fd0:	4b2d      	ldr	r3, [pc, #180]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fdc:	4a2b      	ldr	r2, [pc, #172]	@ (800408c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10d      	bne.n	8004008 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ff0:	e00a      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d102      	bne.n	8003ffe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ff8:	4b25      	ldr	r3, [pc, #148]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ffa:	61bb      	str	r3, [r7, #24]
 8003ffc:	e004      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	2b08      	cmp	r3, #8
 8004002:	d101      	bne.n	8004008 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004004:	4b23      	ldr	r3, [pc, #140]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x114>)
 8004006:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	2b0c      	cmp	r3, #12
 800400c:	d134      	bne.n	8004078 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800400e:	4b1e      	ldr	r3, [pc, #120]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x108>)
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d003      	beq.n	8004026 <HAL_RCC_GetSysClockFreq+0xa6>
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d003      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0xac>
 8004024:	e005      	b.n	8004032 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004026:	4b1a      	ldr	r3, [pc, #104]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x110>)
 8004028:	617b      	str	r3, [r7, #20]
      break;
 800402a:	e005      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800402c:	4b19      	ldr	r3, [pc, #100]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x114>)
 800402e:	617b      	str	r3, [r7, #20]
      break;
 8004030:	e002      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	617b      	str	r3, [r7, #20]
      break;
 8004036:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004038:	4b13      	ldr	r3, [pc, #76]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x108>)
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	091b      	lsrs	r3, r3, #4
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	3301      	adds	r3, #1
 8004044:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004046:	4b10      	ldr	r3, [pc, #64]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x108>)
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	0a1b      	lsrs	r3, r3, #8
 800404c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	fb03 f202 	mul.w	r2, r3, r2
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	fbb2 f3f3 	udiv	r3, r2, r3
 800405c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800405e:	4b0a      	ldr	r3, [pc, #40]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x108>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	0e5b      	lsrs	r3, r3, #25
 8004064:	f003 0303 	and.w	r3, r3, #3
 8004068:	3301      	adds	r3, #1
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	fbb2 f3f3 	udiv	r3, r2, r3
 8004076:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004078:	69bb      	ldr	r3, [r7, #24]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3724      	adds	r7, #36	@ 0x24
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
 800408c:	0800801c 	.word	0x0800801c
 8004090:	00f42400 	.word	0x00f42400
 8004094:	007a1200 	.word	0x007a1200

08004098 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800409c:	4b03      	ldr	r3, [pc, #12]	@ (80040ac <HAL_RCC_GetHCLKFreq+0x14>)
 800409e:	681b      	ldr	r3, [r3, #0]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	20000000 	.word	0x20000000

080040b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040b4:	f7ff fff0 	bl	8004098 <HAL_RCC_GetHCLKFreq>
 80040b8:	4602      	mov	r2, r0
 80040ba:	4b06      	ldr	r3, [pc, #24]	@ (80040d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	0a1b      	lsrs	r3, r3, #8
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	4904      	ldr	r1, [pc, #16]	@ (80040d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040c6:	5ccb      	ldrb	r3, [r1, r3]
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40021000 	.word	0x40021000
 80040d8:	08008014 	.word	0x08008014

080040dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040e0:	f7ff ffda 	bl	8004098 <HAL_RCC_GetHCLKFreq>
 80040e4:	4602      	mov	r2, r0
 80040e6:	4b06      	ldr	r3, [pc, #24]	@ (8004100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	0adb      	lsrs	r3, r3, #11
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	4904      	ldr	r1, [pc, #16]	@ (8004104 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040f2:	5ccb      	ldrb	r3, [r1, r3]
 80040f4:	f003 031f 	and.w	r3, r3, #31
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40021000 	.word	0x40021000
 8004104:	08008014 	.word	0x08008014

08004108 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004114:	4b2a      	ldr	r3, [pc, #168]	@ (80041c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004120:	f7ff f9ee 	bl	8003500 <HAL_PWREx_GetVoltageRange>
 8004124:	6178      	str	r0, [r7, #20]
 8004126:	e014      	b.n	8004152 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004128:	4b25      	ldr	r3, [pc, #148]	@ (80041c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800412a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800412c:	4a24      	ldr	r2, [pc, #144]	@ (80041c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800412e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004132:	6593      	str	r3, [r2, #88]	@ 0x58
 8004134:	4b22      	ldr	r3, [pc, #136]	@ (80041c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004140:	f7ff f9de 	bl	8003500 <HAL_PWREx_GetVoltageRange>
 8004144:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004146:	4b1e      	ldr	r3, [pc, #120]	@ (80041c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414a:	4a1d      	ldr	r2, [pc, #116]	@ (80041c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800414c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004150:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004158:	d10b      	bne.n	8004172 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b80      	cmp	r3, #128	@ 0x80
 800415e:	d919      	bls.n	8004194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2ba0      	cmp	r3, #160	@ 0xa0
 8004164:	d902      	bls.n	800416c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004166:	2302      	movs	r3, #2
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	e013      	b.n	8004194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800416c:	2301      	movs	r3, #1
 800416e:	613b      	str	r3, [r7, #16]
 8004170:	e010      	b.n	8004194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b80      	cmp	r3, #128	@ 0x80
 8004176:	d902      	bls.n	800417e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004178:	2303      	movs	r3, #3
 800417a:	613b      	str	r3, [r7, #16]
 800417c:	e00a      	b.n	8004194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b80      	cmp	r3, #128	@ 0x80
 8004182:	d102      	bne.n	800418a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004184:	2302      	movs	r3, #2
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	e004      	b.n	8004194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b70      	cmp	r3, #112	@ 0x70
 800418e:	d101      	bne.n	8004194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004190:	2301      	movs	r3, #1
 8004192:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004194:	4b0b      	ldr	r3, [pc, #44]	@ (80041c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f023 0207 	bic.w	r2, r3, #7
 800419c:	4909      	ldr	r1, [pc, #36]	@ (80041c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041a4:	4b07      	ldr	r3, [pc, #28]	@ (80041c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d001      	beq.n	80041b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40021000 	.word	0x40021000
 80041c4:	40022000 	.word	0x40022000

080041c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041d0:	2300      	movs	r3, #0
 80041d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041d4:	2300      	movs	r3, #0
 80041d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d041      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041e8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80041ec:	d02a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80041ee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80041f2:	d824      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80041f8:	d008      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80041fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80041fe:	d81e      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004204:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004208:	d010      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800420a:	e018      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800420c:	4b86      	ldr	r3, [pc, #536]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4a85      	ldr	r2, [pc, #532]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004216:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004218:	e015      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3304      	adds	r3, #4
 800421e:	2100      	movs	r1, #0
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fabb 	bl	800479c <RCCEx_PLLSAI1_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800422a:	e00c      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3320      	adds	r3, #32
 8004230:	2100      	movs	r1, #0
 8004232:	4618      	mov	r0, r3
 8004234:	f000 fba6 	bl	8004984 <RCCEx_PLLSAI2_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800423c:	e003      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	74fb      	strb	r3, [r7, #19]
      break;
 8004242:	e000      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004244:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004246:	7cfb      	ldrb	r3, [r7, #19]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10b      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800424c:	4b76      	ldr	r3, [pc, #472]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004252:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800425a:	4973      	ldr	r1, [pc, #460]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004262:	e001      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004264:	7cfb      	ldrb	r3, [r7, #19]
 8004266:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d041      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004278:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800427c:	d02a      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800427e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004282:	d824      	bhi.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004284:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004288:	d008      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800428a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800428e:	d81e      	bhi.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004294:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004298:	d010      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800429a:	e018      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800429c:	4b62      	ldr	r3, [pc, #392]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4a61      	ldr	r2, [pc, #388]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042a8:	e015      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3304      	adds	r3, #4
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fa73 	bl	800479c <RCCEx_PLLSAI1_Config>
 80042b6:	4603      	mov	r3, r0
 80042b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042ba:	e00c      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3320      	adds	r3, #32
 80042c0:	2100      	movs	r1, #0
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fb5e 	bl	8004984 <RCCEx_PLLSAI2_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042cc:	e003      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	74fb      	strb	r3, [r7, #19]
      break;
 80042d2:	e000      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80042d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042d6:	7cfb      	ldrb	r3, [r7, #19]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10b      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042dc:	4b52      	ldr	r3, [pc, #328]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042ea:	494f      	ldr	r1, [pc, #316]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80042f2:	e001      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f4:	7cfb      	ldrb	r3, [r7, #19]
 80042f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80a0 	beq.w	8004446 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004306:	2300      	movs	r3, #0
 8004308:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800430a:	4b47      	ldr	r3, [pc, #284]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800431a:	2300      	movs	r3, #0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00d      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004320:	4b41      	ldr	r3, [pc, #260]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004324:	4a40      	ldr	r2, [pc, #256]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004326:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800432a:	6593      	str	r3, [r2, #88]	@ 0x58
 800432c:	4b3e      	ldr	r3, [pc, #248]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800432e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004330:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004334:	60bb      	str	r3, [r7, #8]
 8004336:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004338:	2301      	movs	r3, #1
 800433a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800433c:	4b3b      	ldr	r3, [pc, #236]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a3a      	ldr	r2, [pc, #232]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004346:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004348:	f7fd fa3e 	bl	80017c8 <HAL_GetTick>
 800434c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800434e:	e009      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004350:	f7fd fa3a 	bl	80017c8 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d902      	bls.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	74fb      	strb	r3, [r7, #19]
        break;
 8004362:	e005      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004364:	4b31      	ldr	r3, [pc, #196]	@ (800442c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0ef      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004370:	7cfb      	ldrb	r3, [r7, #19]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d15c      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004376:	4b2c      	ldr	r3, [pc, #176]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800437c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004380:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d01f      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	429a      	cmp	r2, r3
 8004392:	d019      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004394:	4b24      	ldr	r3, [pc, #144]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800439a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800439e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043a0:	4b21      	ldr	r3, [pc, #132]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a6:	4a20      	ldr	r2, [pc, #128]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043c0:	4a19      	ldr	r2, [pc, #100]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d016      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d2:	f7fd f9f9 	bl	80017c8 <HAL_GetTick>
 80043d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d8:	e00b      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043da:	f7fd f9f5 	bl	80017c8 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d902      	bls.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	74fb      	strb	r3, [r7, #19]
            break;
 80043f0:	e006      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0ec      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004400:	7cfb      	ldrb	r3, [r7, #19]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10c      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004406:	4b08      	ldr	r3, [pc, #32]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004416:	4904      	ldr	r1, [pc, #16]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800441e:	e009      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004420:	7cfb      	ldrb	r3, [r7, #19]
 8004422:	74bb      	strb	r3, [r7, #18]
 8004424:	e006      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000
 800442c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004430:	7cfb      	ldrb	r3, [r7, #19]
 8004432:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004434:	7c7b      	ldrb	r3, [r7, #17]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d105      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800443a:	4b9e      	ldr	r3, [pc, #632]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800443e:	4a9d      	ldr	r2, [pc, #628]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004440:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004444:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004452:	4b98      	ldr	r3, [pc, #608]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004458:	f023 0203 	bic.w	r2, r3, #3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004460:	4994      	ldr	r1, [pc, #592]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004474:	4b8f      	ldr	r3, [pc, #572]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800447a:	f023 020c 	bic.w	r2, r3, #12
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004482:	498c      	ldr	r1, [pc, #560]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004496:	4b87      	ldr	r3, [pc, #540]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800449c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a4:	4983      	ldr	r1, [pc, #524]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044b8:	4b7e      	ldr	r3, [pc, #504]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c6:	497b      	ldr	r1, [pc, #492]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0310 	and.w	r3, r3, #16
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044da:	4b76      	ldr	r3, [pc, #472]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044e8:	4972      	ldr	r1, [pc, #456]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0320 	and.w	r3, r3, #32
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044fc:	4b6d      	ldr	r3, [pc, #436]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004502:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800450a:	496a      	ldr	r1, [pc, #424]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450c:	4313      	orrs	r3, r2
 800450e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800451e:	4b65      	ldr	r3, [pc, #404]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004524:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800452c:	4961      	ldr	r1, [pc, #388]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00a      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004540:	4b5c      	ldr	r3, [pc, #368]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004546:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800454e:	4959      	ldr	r1, [pc, #356]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004562:	4b54      	ldr	r3, [pc, #336]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004568:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004570:	4950      	ldr	r1, [pc, #320]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004584:	4b4b      	ldr	r3, [pc, #300]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800458a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004592:	4948      	ldr	r1, [pc, #288]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045a6:	4b43      	ldr	r3, [pc, #268]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b4:	493f      	ldr	r1, [pc, #252]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d028      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045c8:	4b3a      	ldr	r3, [pc, #232]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045d6:	4937      	ldr	r1, [pc, #220]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045e6:	d106      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045e8:	4b32      	ldr	r3, [pc, #200]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	4a31      	ldr	r2, [pc, #196]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045f2:	60d3      	str	r3, [r2, #12]
 80045f4:	e011      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045fe:	d10c      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3304      	adds	r3, #4
 8004604:	2101      	movs	r1, #1
 8004606:	4618      	mov	r0, r3
 8004608:	f000 f8c8 	bl	800479c <RCCEx_PLLSAI1_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004610:	7cfb      	ldrb	r3, [r7, #19]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004616:	7cfb      	ldrb	r3, [r7, #19]
 8004618:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d028      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004626:	4b23      	ldr	r3, [pc, #140]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004634:	491f      	ldr	r1, [pc, #124]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004640:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004644:	d106      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004646:	4b1b      	ldr	r3, [pc, #108]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	4a1a      	ldr	r2, [pc, #104]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004650:	60d3      	str	r3, [r2, #12]
 8004652:	e011      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004658:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800465c:	d10c      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3304      	adds	r3, #4
 8004662:	2101      	movs	r1, #1
 8004664:	4618      	mov	r0, r3
 8004666:	f000 f899 	bl	800479c <RCCEx_PLLSAI1_Config>
 800466a:	4603      	mov	r3, r0
 800466c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800466e:	7cfb      	ldrb	r3, [r7, #19]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004674:	7cfb      	ldrb	r3, [r7, #19]
 8004676:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d02b      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004684:	4b0b      	ldr	r3, [pc, #44]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004692:	4908      	ldr	r1, [pc, #32]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800469e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046a2:	d109      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046a4:	4b03      	ldr	r3, [pc, #12]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	4a02      	ldr	r2, [pc, #8]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046ae:	60d3      	str	r3, [r2, #12]
 80046b0:	e014      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80046b2:	bf00      	nop
 80046b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046c0:	d10c      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3304      	adds	r3, #4
 80046c6:	2101      	movs	r1, #1
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 f867 	bl	800479c <RCCEx_PLLSAI1_Config>
 80046ce:	4603      	mov	r3, r0
 80046d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046d2:	7cfb      	ldrb	r3, [r7, #19]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80046d8:	7cfb      	ldrb	r3, [r7, #19]
 80046da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d02f      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046f6:	4928      	ldr	r1, [pc, #160]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004702:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004706:	d10d      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3304      	adds	r3, #4
 800470c:	2102      	movs	r1, #2
 800470e:	4618      	mov	r0, r3
 8004710:	f000 f844 	bl	800479c <RCCEx_PLLSAI1_Config>
 8004714:	4603      	mov	r3, r0
 8004716:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004718:	7cfb      	ldrb	r3, [r7, #19]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d014      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800471e:	7cfb      	ldrb	r3, [r7, #19]
 8004720:	74bb      	strb	r3, [r7, #18]
 8004722:	e011      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004728:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800472c:	d10c      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3320      	adds	r3, #32
 8004732:	2102      	movs	r1, #2
 8004734:	4618      	mov	r0, r3
 8004736:	f000 f925 	bl	8004984 <RCCEx_PLLSAI2_Config>
 800473a:	4603      	mov	r3, r0
 800473c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800473e:	7cfb      	ldrb	r3, [r7, #19]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004744:	7cfb      	ldrb	r3, [r7, #19]
 8004746:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004754:	4b10      	ldr	r3, [pc, #64]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004762:	490d      	ldr	r1, [pc, #52]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00b      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004776:	4b08      	ldr	r3, [pc, #32]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800477c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004786:	4904      	ldr	r1, [pc, #16]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800478e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40021000 	.word	0x40021000

0800479c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047aa:	4b75      	ldr	r3, [pc, #468]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d018      	beq.n	80047e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047b6:	4b72      	ldr	r3, [pc, #456]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f003 0203 	and.w	r2, r3, #3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d10d      	bne.n	80047e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
       ||
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047ce:	4b6c      	ldr	r3, [pc, #432]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	091b      	lsrs	r3, r3, #4
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
       ||
 80047de:	429a      	cmp	r2, r3
 80047e0:	d047      	beq.n	8004872 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	73fb      	strb	r3, [r7, #15]
 80047e6:	e044      	b.n	8004872 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d018      	beq.n	8004822 <RCCEx_PLLSAI1_Config+0x86>
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d825      	bhi.n	8004840 <RCCEx_PLLSAI1_Config+0xa4>
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d002      	beq.n	80047fe <RCCEx_PLLSAI1_Config+0x62>
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d009      	beq.n	8004810 <RCCEx_PLLSAI1_Config+0x74>
 80047fc:	e020      	b.n	8004840 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047fe:	4b60      	ldr	r3, [pc, #384]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d11d      	bne.n	8004846 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800480e:	e01a      	b.n	8004846 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004810:	4b5b      	ldr	r3, [pc, #364]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004818:	2b00      	cmp	r3, #0
 800481a:	d116      	bne.n	800484a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004820:	e013      	b.n	800484a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004822:	4b57      	ldr	r3, [pc, #348]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10f      	bne.n	800484e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800482e:	4b54      	ldr	r3, [pc, #336]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800483e:	e006      	b.n	800484e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
      break;
 8004844:	e004      	b.n	8004850 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004846:	bf00      	nop
 8004848:	e002      	b.n	8004850 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800484a:	bf00      	nop
 800484c:	e000      	b.n	8004850 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800484e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10d      	bne.n	8004872 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004856:	4b4a      	ldr	r3, [pc, #296]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6819      	ldr	r1, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	3b01      	subs	r3, #1
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	430b      	orrs	r3, r1
 800486c:	4944      	ldr	r1, [pc, #272]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 800486e:	4313      	orrs	r3, r2
 8004870:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004872:	7bfb      	ldrb	r3, [r7, #15]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d17d      	bne.n	8004974 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004878:	4b41      	ldr	r3, [pc, #260]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a40      	ldr	r2, [pc, #256]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 800487e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004882:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004884:	f7fc ffa0 	bl	80017c8 <HAL_GetTick>
 8004888:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800488a:	e009      	b.n	80048a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800488c:	f7fc ff9c 	bl	80017c8 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d902      	bls.n	80048a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	73fb      	strb	r3, [r7, #15]
        break;
 800489e:	e005      	b.n	80048ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048a0:	4b37      	ldr	r3, [pc, #220]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1ef      	bne.n	800488c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d160      	bne.n	8004974 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d111      	bne.n	80048dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048b8:	4b31      	ldr	r3, [pc, #196]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80048c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6892      	ldr	r2, [r2, #8]
 80048c8:	0211      	lsls	r1, r2, #8
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	68d2      	ldr	r2, [r2, #12]
 80048ce:	0912      	lsrs	r2, r2, #4
 80048d0:	0452      	lsls	r2, r2, #17
 80048d2:	430a      	orrs	r2, r1
 80048d4:	492a      	ldr	r1, [pc, #168]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	610b      	str	r3, [r1, #16]
 80048da:	e027      	b.n	800492c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d112      	bne.n	8004908 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048e2:	4b27      	ldr	r3, [pc, #156]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80048ea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6892      	ldr	r2, [r2, #8]
 80048f2:	0211      	lsls	r1, r2, #8
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6912      	ldr	r2, [r2, #16]
 80048f8:	0852      	lsrs	r2, r2, #1
 80048fa:	3a01      	subs	r2, #1
 80048fc:	0552      	lsls	r2, r2, #21
 80048fe:	430a      	orrs	r2, r1
 8004900:	491f      	ldr	r1, [pc, #124]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004902:	4313      	orrs	r3, r2
 8004904:	610b      	str	r3, [r1, #16]
 8004906:	e011      	b.n	800492c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004908:	4b1d      	ldr	r3, [pc, #116]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004910:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6892      	ldr	r2, [r2, #8]
 8004918:	0211      	lsls	r1, r2, #8
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6952      	ldr	r2, [r2, #20]
 800491e:	0852      	lsrs	r2, r2, #1
 8004920:	3a01      	subs	r2, #1
 8004922:	0652      	lsls	r2, r2, #25
 8004924:	430a      	orrs	r2, r1
 8004926:	4916      	ldr	r1, [pc, #88]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004928:	4313      	orrs	r3, r2
 800492a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800492c:	4b14      	ldr	r3, [pc, #80]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a13      	ldr	r2, [pc, #76]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004932:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004936:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004938:	f7fc ff46 	bl	80017c8 <HAL_GetTick>
 800493c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800493e:	e009      	b.n	8004954 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004940:	f7fc ff42 	bl	80017c8 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d902      	bls.n	8004954 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	73fb      	strb	r3, [r7, #15]
          break;
 8004952:	e005      	b.n	8004960 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004954:	4b0a      	ldr	r3, [pc, #40]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0ef      	beq.n	8004940 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004960:	7bfb      	ldrb	r3, [r7, #15]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d106      	bne.n	8004974 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004966:	4b06      	ldr	r3, [pc, #24]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004968:	691a      	ldr	r2, [r3, #16]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	4904      	ldr	r1, [pc, #16]	@ (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004970:	4313      	orrs	r3, r2
 8004972:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004974:	7bfb      	ldrb	r3, [r7, #15]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40021000 	.word	0x40021000

08004984 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004992:	4b6a      	ldr	r3, [pc, #424]	@ (8004b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d018      	beq.n	80049d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800499e:	4b67      	ldr	r3, [pc, #412]	@ (8004b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f003 0203 	and.w	r2, r3, #3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d10d      	bne.n	80049ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
       ||
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d009      	beq.n	80049ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80049b6:	4b61      	ldr	r3, [pc, #388]	@ (8004b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	091b      	lsrs	r3, r3, #4
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
       ||
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d047      	beq.n	8004a5a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	73fb      	strb	r3, [r7, #15]
 80049ce:	e044      	b.n	8004a5a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d018      	beq.n	8004a0a <RCCEx_PLLSAI2_Config+0x86>
 80049d8:	2b03      	cmp	r3, #3
 80049da:	d825      	bhi.n	8004a28 <RCCEx_PLLSAI2_Config+0xa4>
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d002      	beq.n	80049e6 <RCCEx_PLLSAI2_Config+0x62>
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d009      	beq.n	80049f8 <RCCEx_PLLSAI2_Config+0x74>
 80049e4:	e020      	b.n	8004a28 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049e6:	4b55      	ldr	r3, [pc, #340]	@ (8004b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d11d      	bne.n	8004a2e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049f6:	e01a      	b.n	8004a2e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049f8:	4b50      	ldr	r3, [pc, #320]	@ (8004b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d116      	bne.n	8004a32 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a08:	e013      	b.n	8004a32 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a0a:	4b4c      	ldr	r3, [pc, #304]	@ (8004b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10f      	bne.n	8004a36 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a16:	4b49      	ldr	r3, [pc, #292]	@ (8004b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d109      	bne.n	8004a36 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a26:	e006      	b.n	8004a36 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a2c:	e004      	b.n	8004a38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a2e:	bf00      	nop
 8004a30:	e002      	b.n	8004a38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a32:	bf00      	nop
 8004a34:	e000      	b.n	8004a38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a36:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10d      	bne.n	8004a5a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6819      	ldr	r1, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	430b      	orrs	r3, r1
 8004a54:	4939      	ldr	r1, [pc, #228]	@ (8004b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d167      	bne.n	8004b30 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a60:	4b36      	ldr	r3, [pc, #216]	@ (8004b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a35      	ldr	r2, [pc, #212]	@ (8004b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a6c:	f7fc feac 	bl	80017c8 <HAL_GetTick>
 8004a70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a72:	e009      	b.n	8004a88 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a74:	f7fc fea8 	bl	80017c8 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d902      	bls.n	8004a88 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	73fb      	strb	r3, [r7, #15]
        break;
 8004a86:	e005      	b.n	8004a94 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a88:	4b2c      	ldr	r3, [pc, #176]	@ (8004b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1ef      	bne.n	8004a74 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d14a      	bne.n	8004b30 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d111      	bne.n	8004ac4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004aa0:	4b26      	ldr	r3, [pc, #152]	@ (8004b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004aa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6892      	ldr	r2, [r2, #8]
 8004ab0:	0211      	lsls	r1, r2, #8
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	68d2      	ldr	r2, [r2, #12]
 8004ab6:	0912      	lsrs	r2, r2, #4
 8004ab8:	0452      	lsls	r2, r2, #17
 8004aba:	430a      	orrs	r2, r1
 8004abc:	491f      	ldr	r1, [pc, #124]	@ (8004b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	614b      	str	r3, [r1, #20]
 8004ac2:	e011      	b.n	8004ae8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8004b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004acc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6892      	ldr	r2, [r2, #8]
 8004ad4:	0211      	lsls	r1, r2, #8
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6912      	ldr	r2, [r2, #16]
 8004ada:	0852      	lsrs	r2, r2, #1
 8004adc:	3a01      	subs	r2, #1
 8004ade:	0652      	lsls	r2, r2, #25
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	4916      	ldr	r1, [pc, #88]	@ (8004b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ae8:	4b14      	ldr	r3, [pc, #80]	@ (8004b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a13      	ldr	r2, [pc, #76]	@ (8004b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004af2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af4:	f7fc fe68 	bl	80017c8 <HAL_GetTick>
 8004af8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004afa:	e009      	b.n	8004b10 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004afc:	f7fc fe64 	bl	80017c8 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d902      	bls.n	8004b10 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	73fb      	strb	r3, [r7, #15]
          break;
 8004b0e:	e005      	b.n	8004b1c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b10:	4b0a      	ldr	r3, [pc, #40]	@ (8004b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0ef      	beq.n	8004afc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b22:	4b06      	ldr	r3, [pc, #24]	@ (8004b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b24:	695a      	ldr	r2, [r3, #20]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	4904      	ldr	r1, [pc, #16]	@ (8004b3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40021000 	.word	0x40021000

08004b40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e040      	b.n	8004bd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fc fc32 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2224      	movs	r2, #36	@ 0x24
 8004b6c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0201 	bic.w	r2, r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fb6a 	bl	8005260 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f8af 	bl	8004cf0 <UART_SetConfig>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e01b      	b.n	8004bd4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004baa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 fbe9 	bl	80053a4 <UART_CheckIdleState>
 8004bd2:	4603      	mov	r3, r0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08a      	sub	sp, #40	@ 0x28
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	4613      	mov	r3, r2
 8004bea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	d177      	bne.n	8004ce4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <HAL_UART_Transmit+0x24>
 8004bfa:	88fb      	ldrh	r3, [r7, #6]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e070      	b.n	8004ce6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2221      	movs	r2, #33	@ 0x21
 8004c10:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c12:	f7fc fdd9 	bl	80017c8 <HAL_GetTick>
 8004c16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	88fa      	ldrh	r2, [r7, #6]
 8004c1c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	88fa      	ldrh	r2, [r7, #6]
 8004c24:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c30:	d108      	bne.n	8004c44 <HAL_UART_Transmit+0x68>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d104      	bne.n	8004c44 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	e003      	b.n	8004c4c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c4c:	e02f      	b.n	8004cae <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2200      	movs	r2, #0
 8004c56:	2180      	movs	r1, #128	@ 0x80
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 fc4b 	bl	80054f4 <UART_WaitOnFlagUntilTimeout>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d004      	beq.n	8004c6e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e03b      	b.n	8004ce6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10b      	bne.n	8004c8c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	881a      	ldrh	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c80:	b292      	uxth	r2, r2
 8004c82:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	3302      	adds	r3, #2
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	e007      	b.n	8004c9c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	781a      	ldrb	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1c9      	bne.n	8004c4e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	2140      	movs	r1, #64	@ 0x40
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 fc15 	bl	80054f4 <UART_WaitOnFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d004      	beq.n	8004cda <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e005      	b.n	8004ce6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	e000      	b.n	8004ce6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004ce4:	2302      	movs	r3, #2
  }
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3720      	adds	r7, #32
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cf4:	b08a      	sub	sp, #40	@ 0x28
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	4ba4      	ldr	r3, [pc, #656]	@ (8004fb0 <UART_SetConfig+0x2c0>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	6812      	ldr	r2, [r2, #0]
 8004d26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a99      	ldr	r2, [pc, #612]	@ (8004fb4 <UART_SetConfig+0x2c4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d004      	beq.n	8004d5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a90      	ldr	r2, [pc, #576]	@ (8004fb8 <UART_SetConfig+0x2c8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d126      	bne.n	8004dc8 <UART_SetConfig+0xd8>
 8004d7a:	4b90      	ldr	r3, [pc, #576]	@ (8004fbc <UART_SetConfig+0x2cc>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d80:	f003 0303 	and.w	r3, r3, #3
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d81b      	bhi.n	8004dc0 <UART_SetConfig+0xd0>
 8004d88:	a201      	add	r2, pc, #4	@ (adr r2, 8004d90 <UART_SetConfig+0xa0>)
 8004d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8e:	bf00      	nop
 8004d90:	08004da1 	.word	0x08004da1
 8004d94:	08004db1 	.word	0x08004db1
 8004d98:	08004da9 	.word	0x08004da9
 8004d9c:	08004db9 	.word	0x08004db9
 8004da0:	2301      	movs	r3, #1
 8004da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004da6:	e116      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004da8:	2302      	movs	r3, #2
 8004daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dae:	e112      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004db0:	2304      	movs	r3, #4
 8004db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004db6:	e10e      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004db8:	2308      	movs	r3, #8
 8004dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dbe:	e10a      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004dc0:	2310      	movs	r3, #16
 8004dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dc6:	e106      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a7c      	ldr	r2, [pc, #496]	@ (8004fc0 <UART_SetConfig+0x2d0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d138      	bne.n	8004e44 <UART_SetConfig+0x154>
 8004dd2:	4b7a      	ldr	r3, [pc, #488]	@ (8004fbc <UART_SetConfig+0x2cc>)
 8004dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd8:	f003 030c 	and.w	r3, r3, #12
 8004ddc:	2b0c      	cmp	r3, #12
 8004dde:	d82d      	bhi.n	8004e3c <UART_SetConfig+0x14c>
 8004de0:	a201      	add	r2, pc, #4	@ (adr r2, 8004de8 <UART_SetConfig+0xf8>)
 8004de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de6:	bf00      	nop
 8004de8:	08004e1d 	.word	0x08004e1d
 8004dec:	08004e3d 	.word	0x08004e3d
 8004df0:	08004e3d 	.word	0x08004e3d
 8004df4:	08004e3d 	.word	0x08004e3d
 8004df8:	08004e2d 	.word	0x08004e2d
 8004dfc:	08004e3d 	.word	0x08004e3d
 8004e00:	08004e3d 	.word	0x08004e3d
 8004e04:	08004e3d 	.word	0x08004e3d
 8004e08:	08004e25 	.word	0x08004e25
 8004e0c:	08004e3d 	.word	0x08004e3d
 8004e10:	08004e3d 	.word	0x08004e3d
 8004e14:	08004e3d 	.word	0x08004e3d
 8004e18:	08004e35 	.word	0x08004e35
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e22:	e0d8      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004e24:	2302      	movs	r3, #2
 8004e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e2a:	e0d4      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004e2c:	2304      	movs	r3, #4
 8004e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e32:	e0d0      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004e34:	2308      	movs	r3, #8
 8004e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e3a:	e0cc      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004e3c:	2310      	movs	r3, #16
 8004e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e42:	e0c8      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a5e      	ldr	r2, [pc, #376]	@ (8004fc4 <UART_SetConfig+0x2d4>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d125      	bne.n	8004e9a <UART_SetConfig+0x1aa>
 8004e4e:	4b5b      	ldr	r3, [pc, #364]	@ (8004fbc <UART_SetConfig+0x2cc>)
 8004e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e58:	2b30      	cmp	r3, #48	@ 0x30
 8004e5a:	d016      	beq.n	8004e8a <UART_SetConfig+0x19a>
 8004e5c:	2b30      	cmp	r3, #48	@ 0x30
 8004e5e:	d818      	bhi.n	8004e92 <UART_SetConfig+0x1a2>
 8004e60:	2b20      	cmp	r3, #32
 8004e62:	d00a      	beq.n	8004e7a <UART_SetConfig+0x18a>
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	d814      	bhi.n	8004e92 <UART_SetConfig+0x1a2>
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d002      	beq.n	8004e72 <UART_SetConfig+0x182>
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d008      	beq.n	8004e82 <UART_SetConfig+0x192>
 8004e70:	e00f      	b.n	8004e92 <UART_SetConfig+0x1a2>
 8004e72:	2300      	movs	r3, #0
 8004e74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e78:	e0ad      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e80:	e0a9      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004e82:	2304      	movs	r3, #4
 8004e84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e88:	e0a5      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004e8a:	2308      	movs	r3, #8
 8004e8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e90:	e0a1      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004e92:	2310      	movs	r3, #16
 8004e94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e98:	e09d      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a4a      	ldr	r2, [pc, #296]	@ (8004fc8 <UART_SetConfig+0x2d8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d125      	bne.n	8004ef0 <UART_SetConfig+0x200>
 8004ea4:	4b45      	ldr	r3, [pc, #276]	@ (8004fbc <UART_SetConfig+0x2cc>)
 8004ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eaa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004eae:	2bc0      	cmp	r3, #192	@ 0xc0
 8004eb0:	d016      	beq.n	8004ee0 <UART_SetConfig+0x1f0>
 8004eb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004eb4:	d818      	bhi.n	8004ee8 <UART_SetConfig+0x1f8>
 8004eb6:	2b80      	cmp	r3, #128	@ 0x80
 8004eb8:	d00a      	beq.n	8004ed0 <UART_SetConfig+0x1e0>
 8004eba:	2b80      	cmp	r3, #128	@ 0x80
 8004ebc:	d814      	bhi.n	8004ee8 <UART_SetConfig+0x1f8>
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <UART_SetConfig+0x1d8>
 8004ec2:	2b40      	cmp	r3, #64	@ 0x40
 8004ec4:	d008      	beq.n	8004ed8 <UART_SetConfig+0x1e8>
 8004ec6:	e00f      	b.n	8004ee8 <UART_SetConfig+0x1f8>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ece:	e082      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ed6:	e07e      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004ed8:	2304      	movs	r3, #4
 8004eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ede:	e07a      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004ee0:	2308      	movs	r3, #8
 8004ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ee6:	e076      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004ee8:	2310      	movs	r3, #16
 8004eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eee:	e072      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a35      	ldr	r2, [pc, #212]	@ (8004fcc <UART_SetConfig+0x2dc>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d12a      	bne.n	8004f50 <UART_SetConfig+0x260>
 8004efa:	4b30      	ldr	r3, [pc, #192]	@ (8004fbc <UART_SetConfig+0x2cc>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f08:	d01a      	beq.n	8004f40 <UART_SetConfig+0x250>
 8004f0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f0e:	d81b      	bhi.n	8004f48 <UART_SetConfig+0x258>
 8004f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f14:	d00c      	beq.n	8004f30 <UART_SetConfig+0x240>
 8004f16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f1a:	d815      	bhi.n	8004f48 <UART_SetConfig+0x258>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <UART_SetConfig+0x238>
 8004f20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f24:	d008      	beq.n	8004f38 <UART_SetConfig+0x248>
 8004f26:	e00f      	b.n	8004f48 <UART_SetConfig+0x258>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f2e:	e052      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004f30:	2302      	movs	r3, #2
 8004f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f36:	e04e      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f3e:	e04a      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004f40:	2308      	movs	r3, #8
 8004f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f46:	e046      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004f48:	2310      	movs	r3, #16
 8004f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f4e:	e042      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a17      	ldr	r2, [pc, #92]	@ (8004fb4 <UART_SetConfig+0x2c4>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d13a      	bne.n	8004fd0 <UART_SetConfig+0x2e0>
 8004f5a:	4b18      	ldr	r3, [pc, #96]	@ (8004fbc <UART_SetConfig+0x2cc>)
 8004f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f68:	d01a      	beq.n	8004fa0 <UART_SetConfig+0x2b0>
 8004f6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f6e:	d81b      	bhi.n	8004fa8 <UART_SetConfig+0x2b8>
 8004f70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f74:	d00c      	beq.n	8004f90 <UART_SetConfig+0x2a0>
 8004f76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f7a:	d815      	bhi.n	8004fa8 <UART_SetConfig+0x2b8>
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <UART_SetConfig+0x298>
 8004f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f84:	d008      	beq.n	8004f98 <UART_SetConfig+0x2a8>
 8004f86:	e00f      	b.n	8004fa8 <UART_SetConfig+0x2b8>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f8e:	e022      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004f90:	2302      	movs	r3, #2
 8004f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f96:	e01e      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004f98:	2304      	movs	r3, #4
 8004f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f9e:	e01a      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004fa0:	2308      	movs	r3, #8
 8004fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fa6:	e016      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004fa8:	2310      	movs	r3, #16
 8004faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fae:	e012      	b.n	8004fd6 <UART_SetConfig+0x2e6>
 8004fb0:	efff69f3 	.word	0xefff69f3
 8004fb4:	40008000 	.word	0x40008000
 8004fb8:	40013800 	.word	0x40013800
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	40004400 	.word	0x40004400
 8004fc4:	40004800 	.word	0x40004800
 8004fc8:	40004c00 	.word	0x40004c00
 8004fcc:	40005000 	.word	0x40005000
 8004fd0:	2310      	movs	r3, #16
 8004fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a9f      	ldr	r2, [pc, #636]	@ (8005258 <UART_SetConfig+0x568>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d17a      	bne.n	80050d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fe0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d824      	bhi.n	8005032 <UART_SetConfig+0x342>
 8004fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ff0 <UART_SetConfig+0x300>)
 8004fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fee:	bf00      	nop
 8004ff0:	08005015 	.word	0x08005015
 8004ff4:	08005033 	.word	0x08005033
 8004ff8:	0800501d 	.word	0x0800501d
 8004ffc:	08005033 	.word	0x08005033
 8005000:	08005023 	.word	0x08005023
 8005004:	08005033 	.word	0x08005033
 8005008:	08005033 	.word	0x08005033
 800500c:	08005033 	.word	0x08005033
 8005010:	0800502b 	.word	0x0800502b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005014:	f7ff f84c 	bl	80040b0 <HAL_RCC_GetPCLK1Freq>
 8005018:	61f8      	str	r0, [r7, #28]
        break;
 800501a:	e010      	b.n	800503e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800501c:	4b8f      	ldr	r3, [pc, #572]	@ (800525c <UART_SetConfig+0x56c>)
 800501e:	61fb      	str	r3, [r7, #28]
        break;
 8005020:	e00d      	b.n	800503e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005022:	f7fe ffad 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 8005026:	61f8      	str	r0, [r7, #28]
        break;
 8005028:	e009      	b.n	800503e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800502a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800502e:	61fb      	str	r3, [r7, #28]
        break;
 8005030:	e005      	b.n	800503e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800503c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 80fb 	beq.w	800523c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	4613      	mov	r3, r2
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	4413      	add	r3, r2
 8005050:	69fa      	ldr	r2, [r7, #28]
 8005052:	429a      	cmp	r2, r3
 8005054:	d305      	bcc.n	8005062 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800505c:	69fa      	ldr	r2, [r7, #28]
 800505e:	429a      	cmp	r2, r3
 8005060:	d903      	bls.n	800506a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005068:	e0e8      	b.n	800523c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	2200      	movs	r2, #0
 800506e:	461c      	mov	r4, r3
 8005070:	4615      	mov	r5, r2
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	022b      	lsls	r3, r5, #8
 800507c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005080:	0222      	lsls	r2, r4, #8
 8005082:	68f9      	ldr	r1, [r7, #12]
 8005084:	6849      	ldr	r1, [r1, #4]
 8005086:	0849      	lsrs	r1, r1, #1
 8005088:	2000      	movs	r0, #0
 800508a:	4688      	mov	r8, r1
 800508c:	4681      	mov	r9, r0
 800508e:	eb12 0a08 	adds.w	sl, r2, r8
 8005092:	eb43 0b09 	adc.w	fp, r3, r9
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	603b      	str	r3, [r7, #0]
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050a4:	4650      	mov	r0, sl
 80050a6:	4659      	mov	r1, fp
 80050a8:	f7fb fd7e 	bl	8000ba8 <__aeabi_uldivmod>
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	4613      	mov	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050ba:	d308      	bcc.n	80050ce <UART_SetConfig+0x3de>
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050c2:	d204      	bcs.n	80050ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	60da      	str	r2, [r3, #12]
 80050cc:	e0b6      	b.n	800523c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80050d4:	e0b2      	b.n	800523c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050de:	d15e      	bne.n	800519e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80050e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d828      	bhi.n	800513a <UART_SetConfig+0x44a>
 80050e8:	a201      	add	r2, pc, #4	@ (adr r2, 80050f0 <UART_SetConfig+0x400>)
 80050ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ee:	bf00      	nop
 80050f0:	08005115 	.word	0x08005115
 80050f4:	0800511d 	.word	0x0800511d
 80050f8:	08005125 	.word	0x08005125
 80050fc:	0800513b 	.word	0x0800513b
 8005100:	0800512b 	.word	0x0800512b
 8005104:	0800513b 	.word	0x0800513b
 8005108:	0800513b 	.word	0x0800513b
 800510c:	0800513b 	.word	0x0800513b
 8005110:	08005133 	.word	0x08005133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005114:	f7fe ffcc 	bl	80040b0 <HAL_RCC_GetPCLK1Freq>
 8005118:	61f8      	str	r0, [r7, #28]
        break;
 800511a:	e014      	b.n	8005146 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800511c:	f7fe ffde 	bl	80040dc <HAL_RCC_GetPCLK2Freq>
 8005120:	61f8      	str	r0, [r7, #28]
        break;
 8005122:	e010      	b.n	8005146 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005124:	4b4d      	ldr	r3, [pc, #308]	@ (800525c <UART_SetConfig+0x56c>)
 8005126:	61fb      	str	r3, [r7, #28]
        break;
 8005128:	e00d      	b.n	8005146 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800512a:	f7fe ff29 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 800512e:	61f8      	str	r0, [r7, #28]
        break;
 8005130:	e009      	b.n	8005146 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005132:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005136:	61fb      	str	r3, [r7, #28]
        break;
 8005138:	e005      	b.n	8005146 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800513a:	2300      	movs	r3, #0
 800513c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005144:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d077      	beq.n	800523c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	005a      	lsls	r2, r3, #1
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	085b      	lsrs	r3, r3, #1
 8005156:	441a      	add	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005160:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2b0f      	cmp	r3, #15
 8005166:	d916      	bls.n	8005196 <UART_SetConfig+0x4a6>
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800516e:	d212      	bcs.n	8005196 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	b29b      	uxth	r3, r3
 8005174:	f023 030f 	bic.w	r3, r3, #15
 8005178:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	085b      	lsrs	r3, r3, #1
 800517e:	b29b      	uxth	r3, r3
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	b29a      	uxth	r2, r3
 8005186:	8afb      	ldrh	r3, [r7, #22]
 8005188:	4313      	orrs	r3, r2
 800518a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	8afa      	ldrh	r2, [r7, #22]
 8005192:	60da      	str	r2, [r3, #12]
 8005194:	e052      	b.n	800523c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800519c:	e04e      	b.n	800523c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800519e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d827      	bhi.n	80051f6 <UART_SetConfig+0x506>
 80051a6:	a201      	add	r2, pc, #4	@ (adr r2, 80051ac <UART_SetConfig+0x4bc>)
 80051a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ac:	080051d1 	.word	0x080051d1
 80051b0:	080051d9 	.word	0x080051d9
 80051b4:	080051e1 	.word	0x080051e1
 80051b8:	080051f7 	.word	0x080051f7
 80051bc:	080051e7 	.word	0x080051e7
 80051c0:	080051f7 	.word	0x080051f7
 80051c4:	080051f7 	.word	0x080051f7
 80051c8:	080051f7 	.word	0x080051f7
 80051cc:	080051ef 	.word	0x080051ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d0:	f7fe ff6e 	bl	80040b0 <HAL_RCC_GetPCLK1Freq>
 80051d4:	61f8      	str	r0, [r7, #28]
        break;
 80051d6:	e014      	b.n	8005202 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051d8:	f7fe ff80 	bl	80040dc <HAL_RCC_GetPCLK2Freq>
 80051dc:	61f8      	str	r0, [r7, #28]
        break;
 80051de:	e010      	b.n	8005202 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e0:	4b1e      	ldr	r3, [pc, #120]	@ (800525c <UART_SetConfig+0x56c>)
 80051e2:	61fb      	str	r3, [r7, #28]
        break;
 80051e4:	e00d      	b.n	8005202 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051e6:	f7fe fecb 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 80051ea:	61f8      	str	r0, [r7, #28]
        break;
 80051ec:	e009      	b.n	8005202 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051f2:	61fb      	str	r3, [r7, #28]
        break;
 80051f4:	e005      	b.n	8005202 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005200:	bf00      	nop
    }

    if (pclk != 0U)
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d019      	beq.n	800523c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	085a      	lsrs	r2, r3, #1
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	441a      	add	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	fbb2 f3f3 	udiv	r3, r2, r3
 800521a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	2b0f      	cmp	r3, #15
 8005220:	d909      	bls.n	8005236 <UART_SetConfig+0x546>
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005228:	d205      	bcs.n	8005236 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	60da      	str	r2, [r3, #12]
 8005234:	e002      	b.n	800523c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005248:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800524c:	4618      	mov	r0, r3
 800524e:	3728      	adds	r7, #40	@ 0x28
 8005250:	46bd      	mov	sp, r7
 8005252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005256:	bf00      	nop
 8005258:	40008000 	.word	0x40008000
 800525c:	00f42400 	.word	0x00f42400

08005260 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526c:	f003 0308 	and.w	r3, r3, #8
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00a      	beq.n	800528a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00a      	beq.n	80052ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f4:	f003 0310 	and.w	r3, r3, #16
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005316:	f003 0320 	and.w	r3, r3, #32
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01a      	beq.n	8005376 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800535e:	d10a      	bne.n	8005376 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	605a      	str	r2, [r3, #4]
  }
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b098      	sub	sp, #96	@ 0x60
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053b4:	f7fc fa08 	bl	80017c8 <HAL_GetTick>
 80053b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d12e      	bne.n	8005426 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053d0:	2200      	movs	r2, #0
 80053d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f88c 	bl	80054f4 <UART_WaitOnFlagUntilTimeout>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d021      	beq.n	8005426 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	461a      	mov	r2, r3
 80053fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005400:	647b      	str	r3, [r7, #68]	@ 0x44
 8005402:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005406:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800540e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e6      	bne.n	80053e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e062      	b.n	80054ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b04      	cmp	r3, #4
 8005432:	d149      	bne.n	80054c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005434:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800543c:	2200      	movs	r2, #0
 800543e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f856 	bl	80054f4 <UART_WaitOnFlagUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d03c      	beq.n	80054c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005456:	e853 3f00 	ldrex	r3, [r3]
 800545a:	623b      	str	r3, [r7, #32]
   return(result);
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800546c:	633b      	str	r3, [r7, #48]	@ 0x30
 800546e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005472:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800547a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e6      	bne.n	800544e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3308      	adds	r3, #8
 8005486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0301 	bic.w	r3, r3, #1
 8005496:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3308      	adds	r3, #8
 800549e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054a0:	61fa      	str	r2, [r7, #28]
 80054a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a4:	69b9      	ldr	r1, [r7, #24]
 80054a6:	69fa      	ldr	r2, [r7, #28]
 80054a8:	e841 2300 	strex	r3, r2, [r1]
 80054ac:	617b      	str	r3, [r7, #20]
   return(result);
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e5      	bne.n	8005480 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e011      	b.n	80054ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2220      	movs	r2, #32
 80054cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3758      	adds	r7, #88	@ 0x58
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	603b      	str	r3, [r7, #0]
 8005500:	4613      	mov	r3, r2
 8005502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005504:	e04f      	b.n	80055a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550c:	d04b      	beq.n	80055a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800550e:	f7fc f95b 	bl	80017c8 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	429a      	cmp	r2, r3
 800551c:	d302      	bcc.n	8005524 <UART_WaitOnFlagUntilTimeout+0x30>
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e04e      	b.n	80055c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0304 	and.w	r3, r3, #4
 8005532:	2b00      	cmp	r3, #0
 8005534:	d037      	beq.n	80055a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b80      	cmp	r3, #128	@ 0x80
 800553a:	d034      	beq.n	80055a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b40      	cmp	r3, #64	@ 0x40
 8005540:	d031      	beq.n	80055a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f003 0308 	and.w	r3, r3, #8
 800554c:	2b08      	cmp	r3, #8
 800554e:	d110      	bne.n	8005572 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2208      	movs	r2, #8
 8005556:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 f838 	bl	80055ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2208      	movs	r2, #8
 8005562:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e029      	b.n	80055c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800557c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005580:	d111      	bne.n	80055a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800558a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 f81e 	bl	80055ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2220      	movs	r2, #32
 8005596:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e00f      	b.n	80055c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69da      	ldr	r2, [r3, #28]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4013      	ands	r3, r2
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	bf0c      	ite	eq
 80055b6:	2301      	moveq	r3, #1
 80055b8:	2300      	movne	r3, #0
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	461a      	mov	r2, r3
 80055be:	79fb      	ldrb	r3, [r7, #7]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d0a0      	beq.n	8005506 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b095      	sub	sp, #84	@ 0x54
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	461a      	mov	r2, r3
 80055f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80055f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055fc:	e841 2300 	strex	r3, r2, [r1]
 8005600:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e6      	bne.n	80055d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3308      	adds	r3, #8
 800560e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	e853 3f00 	ldrex	r3, [r3]
 8005616:	61fb      	str	r3, [r7, #28]
   return(result);
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f023 0301 	bic.w	r3, r3, #1
 800561e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3308      	adds	r3, #8
 8005626:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005628:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800562a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800562e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005630:	e841 2300 	strex	r3, r2, [r1]
 8005634:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e5      	bne.n	8005608 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005640:	2b01      	cmp	r3, #1
 8005642:	d118      	bne.n	8005676 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	e853 3f00 	ldrex	r3, [r3]
 8005650:	60bb      	str	r3, [r7, #8]
   return(result);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f023 0310 	bic.w	r3, r3, #16
 8005658:	647b      	str	r3, [r7, #68]	@ 0x44
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005662:	61bb      	str	r3, [r7, #24]
 8005664:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	6979      	ldr	r1, [r7, #20]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	613b      	str	r3, [r7, #16]
   return(result);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e6      	bne.n	8005644 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800568a:	bf00      	nop
 800568c:	3754      	adds	r7, #84	@ 0x54
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <__cvt>:
 8005696:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800569a:	ec57 6b10 	vmov	r6, r7, d0
 800569e:	2f00      	cmp	r7, #0
 80056a0:	460c      	mov	r4, r1
 80056a2:	4619      	mov	r1, r3
 80056a4:	463b      	mov	r3, r7
 80056a6:	bfbb      	ittet	lt
 80056a8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80056ac:	461f      	movlt	r7, r3
 80056ae:	2300      	movge	r3, #0
 80056b0:	232d      	movlt	r3, #45	@ 0x2d
 80056b2:	700b      	strb	r3, [r1, #0]
 80056b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056b6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80056ba:	4691      	mov	r9, r2
 80056bc:	f023 0820 	bic.w	r8, r3, #32
 80056c0:	bfbc      	itt	lt
 80056c2:	4632      	movlt	r2, r6
 80056c4:	4616      	movlt	r6, r2
 80056c6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80056ca:	d005      	beq.n	80056d8 <__cvt+0x42>
 80056cc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80056d0:	d100      	bne.n	80056d4 <__cvt+0x3e>
 80056d2:	3401      	adds	r4, #1
 80056d4:	2102      	movs	r1, #2
 80056d6:	e000      	b.n	80056da <__cvt+0x44>
 80056d8:	2103      	movs	r1, #3
 80056da:	ab03      	add	r3, sp, #12
 80056dc:	9301      	str	r3, [sp, #4]
 80056de:	ab02      	add	r3, sp, #8
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	ec47 6b10 	vmov	d0, r6, r7
 80056e6:	4653      	mov	r3, sl
 80056e8:	4622      	mov	r2, r4
 80056ea:	f000 fe49 	bl	8006380 <_dtoa_r>
 80056ee:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80056f2:	4605      	mov	r5, r0
 80056f4:	d119      	bne.n	800572a <__cvt+0x94>
 80056f6:	f019 0f01 	tst.w	r9, #1
 80056fa:	d00e      	beq.n	800571a <__cvt+0x84>
 80056fc:	eb00 0904 	add.w	r9, r0, r4
 8005700:	2200      	movs	r2, #0
 8005702:	2300      	movs	r3, #0
 8005704:	4630      	mov	r0, r6
 8005706:	4639      	mov	r1, r7
 8005708:	f7fb f9de 	bl	8000ac8 <__aeabi_dcmpeq>
 800570c:	b108      	cbz	r0, 8005712 <__cvt+0x7c>
 800570e:	f8cd 900c 	str.w	r9, [sp, #12]
 8005712:	2230      	movs	r2, #48	@ 0x30
 8005714:	9b03      	ldr	r3, [sp, #12]
 8005716:	454b      	cmp	r3, r9
 8005718:	d31e      	bcc.n	8005758 <__cvt+0xc2>
 800571a:	9b03      	ldr	r3, [sp, #12]
 800571c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800571e:	1b5b      	subs	r3, r3, r5
 8005720:	4628      	mov	r0, r5
 8005722:	6013      	str	r3, [r2, #0]
 8005724:	b004      	add	sp, #16
 8005726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800572a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800572e:	eb00 0904 	add.w	r9, r0, r4
 8005732:	d1e5      	bne.n	8005700 <__cvt+0x6a>
 8005734:	7803      	ldrb	r3, [r0, #0]
 8005736:	2b30      	cmp	r3, #48	@ 0x30
 8005738:	d10a      	bne.n	8005750 <__cvt+0xba>
 800573a:	2200      	movs	r2, #0
 800573c:	2300      	movs	r3, #0
 800573e:	4630      	mov	r0, r6
 8005740:	4639      	mov	r1, r7
 8005742:	f7fb f9c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005746:	b918      	cbnz	r0, 8005750 <__cvt+0xba>
 8005748:	f1c4 0401 	rsb	r4, r4, #1
 800574c:	f8ca 4000 	str.w	r4, [sl]
 8005750:	f8da 3000 	ldr.w	r3, [sl]
 8005754:	4499      	add	r9, r3
 8005756:	e7d3      	b.n	8005700 <__cvt+0x6a>
 8005758:	1c59      	adds	r1, r3, #1
 800575a:	9103      	str	r1, [sp, #12]
 800575c:	701a      	strb	r2, [r3, #0]
 800575e:	e7d9      	b.n	8005714 <__cvt+0x7e>

08005760 <__exponent>:
 8005760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005762:	2900      	cmp	r1, #0
 8005764:	bfba      	itte	lt
 8005766:	4249      	neglt	r1, r1
 8005768:	232d      	movlt	r3, #45	@ 0x2d
 800576a:	232b      	movge	r3, #43	@ 0x2b
 800576c:	2909      	cmp	r1, #9
 800576e:	7002      	strb	r2, [r0, #0]
 8005770:	7043      	strb	r3, [r0, #1]
 8005772:	dd29      	ble.n	80057c8 <__exponent+0x68>
 8005774:	f10d 0307 	add.w	r3, sp, #7
 8005778:	461d      	mov	r5, r3
 800577a:	270a      	movs	r7, #10
 800577c:	461a      	mov	r2, r3
 800577e:	fbb1 f6f7 	udiv	r6, r1, r7
 8005782:	fb07 1416 	mls	r4, r7, r6, r1
 8005786:	3430      	adds	r4, #48	@ 0x30
 8005788:	f802 4c01 	strb.w	r4, [r2, #-1]
 800578c:	460c      	mov	r4, r1
 800578e:	2c63      	cmp	r4, #99	@ 0x63
 8005790:	f103 33ff 	add.w	r3, r3, #4294967295
 8005794:	4631      	mov	r1, r6
 8005796:	dcf1      	bgt.n	800577c <__exponent+0x1c>
 8005798:	3130      	adds	r1, #48	@ 0x30
 800579a:	1e94      	subs	r4, r2, #2
 800579c:	f803 1c01 	strb.w	r1, [r3, #-1]
 80057a0:	1c41      	adds	r1, r0, #1
 80057a2:	4623      	mov	r3, r4
 80057a4:	42ab      	cmp	r3, r5
 80057a6:	d30a      	bcc.n	80057be <__exponent+0x5e>
 80057a8:	f10d 0309 	add.w	r3, sp, #9
 80057ac:	1a9b      	subs	r3, r3, r2
 80057ae:	42ac      	cmp	r4, r5
 80057b0:	bf88      	it	hi
 80057b2:	2300      	movhi	r3, #0
 80057b4:	3302      	adds	r3, #2
 80057b6:	4403      	add	r3, r0
 80057b8:	1a18      	subs	r0, r3, r0
 80057ba:	b003      	add	sp, #12
 80057bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057be:	f813 6b01 	ldrb.w	r6, [r3], #1
 80057c2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80057c6:	e7ed      	b.n	80057a4 <__exponent+0x44>
 80057c8:	2330      	movs	r3, #48	@ 0x30
 80057ca:	3130      	adds	r1, #48	@ 0x30
 80057cc:	7083      	strb	r3, [r0, #2]
 80057ce:	70c1      	strb	r1, [r0, #3]
 80057d0:	1d03      	adds	r3, r0, #4
 80057d2:	e7f1      	b.n	80057b8 <__exponent+0x58>

080057d4 <_printf_float>:
 80057d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d8:	b08d      	sub	sp, #52	@ 0x34
 80057da:	460c      	mov	r4, r1
 80057dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80057e0:	4616      	mov	r6, r2
 80057e2:	461f      	mov	r7, r3
 80057e4:	4605      	mov	r5, r0
 80057e6:	f000 fccb 	bl	8006180 <_localeconv_r>
 80057ea:	6803      	ldr	r3, [r0, #0]
 80057ec:	9304      	str	r3, [sp, #16]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fa fd3e 	bl	8000270 <strlen>
 80057f4:	2300      	movs	r3, #0
 80057f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80057f8:	f8d8 3000 	ldr.w	r3, [r8]
 80057fc:	9005      	str	r0, [sp, #20]
 80057fe:	3307      	adds	r3, #7
 8005800:	f023 0307 	bic.w	r3, r3, #7
 8005804:	f103 0208 	add.w	r2, r3, #8
 8005808:	f894 a018 	ldrb.w	sl, [r4, #24]
 800580c:	f8d4 b000 	ldr.w	fp, [r4]
 8005810:	f8c8 2000 	str.w	r2, [r8]
 8005814:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005818:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800581c:	9307      	str	r3, [sp, #28]
 800581e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005822:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005826:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800582a:	4b9c      	ldr	r3, [pc, #624]	@ (8005a9c <_printf_float+0x2c8>)
 800582c:	f04f 32ff 	mov.w	r2, #4294967295
 8005830:	f7fb f97c 	bl	8000b2c <__aeabi_dcmpun>
 8005834:	bb70      	cbnz	r0, 8005894 <_printf_float+0xc0>
 8005836:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800583a:	4b98      	ldr	r3, [pc, #608]	@ (8005a9c <_printf_float+0x2c8>)
 800583c:	f04f 32ff 	mov.w	r2, #4294967295
 8005840:	f7fb f956 	bl	8000af0 <__aeabi_dcmple>
 8005844:	bb30      	cbnz	r0, 8005894 <_printf_float+0xc0>
 8005846:	2200      	movs	r2, #0
 8005848:	2300      	movs	r3, #0
 800584a:	4640      	mov	r0, r8
 800584c:	4649      	mov	r1, r9
 800584e:	f7fb f945 	bl	8000adc <__aeabi_dcmplt>
 8005852:	b110      	cbz	r0, 800585a <_printf_float+0x86>
 8005854:	232d      	movs	r3, #45	@ 0x2d
 8005856:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800585a:	4a91      	ldr	r2, [pc, #580]	@ (8005aa0 <_printf_float+0x2cc>)
 800585c:	4b91      	ldr	r3, [pc, #580]	@ (8005aa4 <_printf_float+0x2d0>)
 800585e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005862:	bf8c      	ite	hi
 8005864:	4690      	movhi	r8, r2
 8005866:	4698      	movls	r8, r3
 8005868:	2303      	movs	r3, #3
 800586a:	6123      	str	r3, [r4, #16]
 800586c:	f02b 0304 	bic.w	r3, fp, #4
 8005870:	6023      	str	r3, [r4, #0]
 8005872:	f04f 0900 	mov.w	r9, #0
 8005876:	9700      	str	r7, [sp, #0]
 8005878:	4633      	mov	r3, r6
 800587a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800587c:	4621      	mov	r1, r4
 800587e:	4628      	mov	r0, r5
 8005880:	f000 f9d2 	bl	8005c28 <_printf_common>
 8005884:	3001      	adds	r0, #1
 8005886:	f040 808d 	bne.w	80059a4 <_printf_float+0x1d0>
 800588a:	f04f 30ff 	mov.w	r0, #4294967295
 800588e:	b00d      	add	sp, #52	@ 0x34
 8005890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005894:	4642      	mov	r2, r8
 8005896:	464b      	mov	r3, r9
 8005898:	4640      	mov	r0, r8
 800589a:	4649      	mov	r1, r9
 800589c:	f7fb f946 	bl	8000b2c <__aeabi_dcmpun>
 80058a0:	b140      	cbz	r0, 80058b4 <_printf_float+0xe0>
 80058a2:	464b      	mov	r3, r9
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	bfbc      	itt	lt
 80058a8:	232d      	movlt	r3, #45	@ 0x2d
 80058aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80058ae:	4a7e      	ldr	r2, [pc, #504]	@ (8005aa8 <_printf_float+0x2d4>)
 80058b0:	4b7e      	ldr	r3, [pc, #504]	@ (8005aac <_printf_float+0x2d8>)
 80058b2:	e7d4      	b.n	800585e <_printf_float+0x8a>
 80058b4:	6863      	ldr	r3, [r4, #4]
 80058b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80058ba:	9206      	str	r2, [sp, #24]
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	d13b      	bne.n	8005938 <_printf_float+0x164>
 80058c0:	2306      	movs	r3, #6
 80058c2:	6063      	str	r3, [r4, #4]
 80058c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80058c8:	2300      	movs	r3, #0
 80058ca:	6022      	str	r2, [r4, #0]
 80058cc:	9303      	str	r3, [sp, #12]
 80058ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80058d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80058d4:	ab09      	add	r3, sp, #36	@ 0x24
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	6861      	ldr	r1, [r4, #4]
 80058da:	ec49 8b10 	vmov	d0, r8, r9
 80058de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80058e2:	4628      	mov	r0, r5
 80058e4:	f7ff fed7 	bl	8005696 <__cvt>
 80058e8:	9b06      	ldr	r3, [sp, #24]
 80058ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80058ec:	2b47      	cmp	r3, #71	@ 0x47
 80058ee:	4680      	mov	r8, r0
 80058f0:	d129      	bne.n	8005946 <_printf_float+0x172>
 80058f2:	1cc8      	adds	r0, r1, #3
 80058f4:	db02      	blt.n	80058fc <_printf_float+0x128>
 80058f6:	6863      	ldr	r3, [r4, #4]
 80058f8:	4299      	cmp	r1, r3
 80058fa:	dd41      	ble.n	8005980 <_printf_float+0x1ac>
 80058fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8005900:	fa5f fa8a 	uxtb.w	sl, sl
 8005904:	3901      	subs	r1, #1
 8005906:	4652      	mov	r2, sl
 8005908:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800590c:	9109      	str	r1, [sp, #36]	@ 0x24
 800590e:	f7ff ff27 	bl	8005760 <__exponent>
 8005912:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005914:	1813      	adds	r3, r2, r0
 8005916:	2a01      	cmp	r2, #1
 8005918:	4681      	mov	r9, r0
 800591a:	6123      	str	r3, [r4, #16]
 800591c:	dc02      	bgt.n	8005924 <_printf_float+0x150>
 800591e:	6822      	ldr	r2, [r4, #0]
 8005920:	07d2      	lsls	r2, r2, #31
 8005922:	d501      	bpl.n	8005928 <_printf_float+0x154>
 8005924:	3301      	adds	r3, #1
 8005926:	6123      	str	r3, [r4, #16]
 8005928:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0a2      	beq.n	8005876 <_printf_float+0xa2>
 8005930:	232d      	movs	r3, #45	@ 0x2d
 8005932:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005936:	e79e      	b.n	8005876 <_printf_float+0xa2>
 8005938:	9a06      	ldr	r2, [sp, #24]
 800593a:	2a47      	cmp	r2, #71	@ 0x47
 800593c:	d1c2      	bne.n	80058c4 <_printf_float+0xf0>
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1c0      	bne.n	80058c4 <_printf_float+0xf0>
 8005942:	2301      	movs	r3, #1
 8005944:	e7bd      	b.n	80058c2 <_printf_float+0xee>
 8005946:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800594a:	d9db      	bls.n	8005904 <_printf_float+0x130>
 800594c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005950:	d118      	bne.n	8005984 <_printf_float+0x1b0>
 8005952:	2900      	cmp	r1, #0
 8005954:	6863      	ldr	r3, [r4, #4]
 8005956:	dd0b      	ble.n	8005970 <_printf_float+0x19c>
 8005958:	6121      	str	r1, [r4, #16]
 800595a:	b913      	cbnz	r3, 8005962 <_printf_float+0x18e>
 800595c:	6822      	ldr	r2, [r4, #0]
 800595e:	07d0      	lsls	r0, r2, #31
 8005960:	d502      	bpl.n	8005968 <_printf_float+0x194>
 8005962:	3301      	adds	r3, #1
 8005964:	440b      	add	r3, r1
 8005966:	6123      	str	r3, [r4, #16]
 8005968:	65a1      	str	r1, [r4, #88]	@ 0x58
 800596a:	f04f 0900 	mov.w	r9, #0
 800596e:	e7db      	b.n	8005928 <_printf_float+0x154>
 8005970:	b913      	cbnz	r3, 8005978 <_printf_float+0x1a4>
 8005972:	6822      	ldr	r2, [r4, #0]
 8005974:	07d2      	lsls	r2, r2, #31
 8005976:	d501      	bpl.n	800597c <_printf_float+0x1a8>
 8005978:	3302      	adds	r3, #2
 800597a:	e7f4      	b.n	8005966 <_printf_float+0x192>
 800597c:	2301      	movs	r3, #1
 800597e:	e7f2      	b.n	8005966 <_printf_float+0x192>
 8005980:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005986:	4299      	cmp	r1, r3
 8005988:	db05      	blt.n	8005996 <_printf_float+0x1c2>
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	6121      	str	r1, [r4, #16]
 800598e:	07d8      	lsls	r0, r3, #31
 8005990:	d5ea      	bpl.n	8005968 <_printf_float+0x194>
 8005992:	1c4b      	adds	r3, r1, #1
 8005994:	e7e7      	b.n	8005966 <_printf_float+0x192>
 8005996:	2900      	cmp	r1, #0
 8005998:	bfd4      	ite	le
 800599a:	f1c1 0202 	rsble	r2, r1, #2
 800599e:	2201      	movgt	r2, #1
 80059a0:	4413      	add	r3, r2
 80059a2:	e7e0      	b.n	8005966 <_printf_float+0x192>
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	055a      	lsls	r2, r3, #21
 80059a8:	d407      	bmi.n	80059ba <_printf_float+0x1e6>
 80059aa:	6923      	ldr	r3, [r4, #16]
 80059ac:	4642      	mov	r2, r8
 80059ae:	4631      	mov	r1, r6
 80059b0:	4628      	mov	r0, r5
 80059b2:	47b8      	blx	r7
 80059b4:	3001      	adds	r0, #1
 80059b6:	d12b      	bne.n	8005a10 <_printf_float+0x23c>
 80059b8:	e767      	b.n	800588a <_printf_float+0xb6>
 80059ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059be:	f240 80dd 	bls.w	8005b7c <_printf_float+0x3a8>
 80059c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80059c6:	2200      	movs	r2, #0
 80059c8:	2300      	movs	r3, #0
 80059ca:	f7fb f87d 	bl	8000ac8 <__aeabi_dcmpeq>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d033      	beq.n	8005a3a <_printf_float+0x266>
 80059d2:	4a37      	ldr	r2, [pc, #220]	@ (8005ab0 <_printf_float+0x2dc>)
 80059d4:	2301      	movs	r3, #1
 80059d6:	4631      	mov	r1, r6
 80059d8:	4628      	mov	r0, r5
 80059da:	47b8      	blx	r7
 80059dc:	3001      	adds	r0, #1
 80059de:	f43f af54 	beq.w	800588a <_printf_float+0xb6>
 80059e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80059e6:	4543      	cmp	r3, r8
 80059e8:	db02      	blt.n	80059f0 <_printf_float+0x21c>
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	07d8      	lsls	r0, r3, #31
 80059ee:	d50f      	bpl.n	8005a10 <_printf_float+0x23c>
 80059f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059f4:	4631      	mov	r1, r6
 80059f6:	4628      	mov	r0, r5
 80059f8:	47b8      	blx	r7
 80059fa:	3001      	adds	r0, #1
 80059fc:	f43f af45 	beq.w	800588a <_printf_float+0xb6>
 8005a00:	f04f 0900 	mov.w	r9, #0
 8005a04:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a08:	f104 0a1a 	add.w	sl, r4, #26
 8005a0c:	45c8      	cmp	r8, r9
 8005a0e:	dc09      	bgt.n	8005a24 <_printf_float+0x250>
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	079b      	lsls	r3, r3, #30
 8005a14:	f100 8103 	bmi.w	8005c1e <_printf_float+0x44a>
 8005a18:	68e0      	ldr	r0, [r4, #12]
 8005a1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a1c:	4298      	cmp	r0, r3
 8005a1e:	bfb8      	it	lt
 8005a20:	4618      	movlt	r0, r3
 8005a22:	e734      	b.n	800588e <_printf_float+0xba>
 8005a24:	2301      	movs	r3, #1
 8005a26:	4652      	mov	r2, sl
 8005a28:	4631      	mov	r1, r6
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	47b8      	blx	r7
 8005a2e:	3001      	adds	r0, #1
 8005a30:	f43f af2b 	beq.w	800588a <_printf_float+0xb6>
 8005a34:	f109 0901 	add.w	r9, r9, #1
 8005a38:	e7e8      	b.n	8005a0c <_printf_float+0x238>
 8005a3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	dc39      	bgt.n	8005ab4 <_printf_float+0x2e0>
 8005a40:	4a1b      	ldr	r2, [pc, #108]	@ (8005ab0 <_printf_float+0x2dc>)
 8005a42:	2301      	movs	r3, #1
 8005a44:	4631      	mov	r1, r6
 8005a46:	4628      	mov	r0, r5
 8005a48:	47b8      	blx	r7
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	f43f af1d 	beq.w	800588a <_printf_float+0xb6>
 8005a50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005a54:	ea59 0303 	orrs.w	r3, r9, r3
 8005a58:	d102      	bne.n	8005a60 <_printf_float+0x28c>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	07d9      	lsls	r1, r3, #31
 8005a5e:	d5d7      	bpl.n	8005a10 <_printf_float+0x23c>
 8005a60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a64:	4631      	mov	r1, r6
 8005a66:	4628      	mov	r0, r5
 8005a68:	47b8      	blx	r7
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	f43f af0d 	beq.w	800588a <_printf_float+0xb6>
 8005a70:	f04f 0a00 	mov.w	sl, #0
 8005a74:	f104 0b1a 	add.w	fp, r4, #26
 8005a78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a7a:	425b      	negs	r3, r3
 8005a7c:	4553      	cmp	r3, sl
 8005a7e:	dc01      	bgt.n	8005a84 <_printf_float+0x2b0>
 8005a80:	464b      	mov	r3, r9
 8005a82:	e793      	b.n	80059ac <_printf_float+0x1d8>
 8005a84:	2301      	movs	r3, #1
 8005a86:	465a      	mov	r2, fp
 8005a88:	4631      	mov	r1, r6
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	47b8      	blx	r7
 8005a8e:	3001      	adds	r0, #1
 8005a90:	f43f aefb 	beq.w	800588a <_printf_float+0xb6>
 8005a94:	f10a 0a01 	add.w	sl, sl, #1
 8005a98:	e7ee      	b.n	8005a78 <_printf_float+0x2a4>
 8005a9a:	bf00      	nop
 8005a9c:	7fefffff 	.word	0x7fefffff
 8005aa0:	08008050 	.word	0x08008050
 8005aa4:	0800804c 	.word	0x0800804c
 8005aa8:	08008058 	.word	0x08008058
 8005aac:	08008054 	.word	0x08008054
 8005ab0:	0800805c 	.word	0x0800805c
 8005ab4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ab6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005aba:	4553      	cmp	r3, sl
 8005abc:	bfa8      	it	ge
 8005abe:	4653      	movge	r3, sl
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	4699      	mov	r9, r3
 8005ac4:	dc36      	bgt.n	8005b34 <_printf_float+0x360>
 8005ac6:	f04f 0b00 	mov.w	fp, #0
 8005aca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ace:	f104 021a 	add.w	r2, r4, #26
 8005ad2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ad4:	9306      	str	r3, [sp, #24]
 8005ad6:	eba3 0309 	sub.w	r3, r3, r9
 8005ada:	455b      	cmp	r3, fp
 8005adc:	dc31      	bgt.n	8005b42 <_printf_float+0x36e>
 8005ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ae0:	459a      	cmp	sl, r3
 8005ae2:	dc3a      	bgt.n	8005b5a <_printf_float+0x386>
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	07da      	lsls	r2, r3, #31
 8005ae8:	d437      	bmi.n	8005b5a <_printf_float+0x386>
 8005aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aec:	ebaa 0903 	sub.w	r9, sl, r3
 8005af0:	9b06      	ldr	r3, [sp, #24]
 8005af2:	ebaa 0303 	sub.w	r3, sl, r3
 8005af6:	4599      	cmp	r9, r3
 8005af8:	bfa8      	it	ge
 8005afa:	4699      	movge	r9, r3
 8005afc:	f1b9 0f00 	cmp.w	r9, #0
 8005b00:	dc33      	bgt.n	8005b6a <_printf_float+0x396>
 8005b02:	f04f 0800 	mov.w	r8, #0
 8005b06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b0a:	f104 0b1a 	add.w	fp, r4, #26
 8005b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b10:	ebaa 0303 	sub.w	r3, sl, r3
 8005b14:	eba3 0309 	sub.w	r3, r3, r9
 8005b18:	4543      	cmp	r3, r8
 8005b1a:	f77f af79 	ble.w	8005a10 <_printf_float+0x23c>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	465a      	mov	r2, fp
 8005b22:	4631      	mov	r1, r6
 8005b24:	4628      	mov	r0, r5
 8005b26:	47b8      	blx	r7
 8005b28:	3001      	adds	r0, #1
 8005b2a:	f43f aeae 	beq.w	800588a <_printf_float+0xb6>
 8005b2e:	f108 0801 	add.w	r8, r8, #1
 8005b32:	e7ec      	b.n	8005b0e <_printf_float+0x33a>
 8005b34:	4642      	mov	r2, r8
 8005b36:	4631      	mov	r1, r6
 8005b38:	4628      	mov	r0, r5
 8005b3a:	47b8      	blx	r7
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	d1c2      	bne.n	8005ac6 <_printf_float+0x2f2>
 8005b40:	e6a3      	b.n	800588a <_printf_float+0xb6>
 8005b42:	2301      	movs	r3, #1
 8005b44:	4631      	mov	r1, r6
 8005b46:	4628      	mov	r0, r5
 8005b48:	9206      	str	r2, [sp, #24]
 8005b4a:	47b8      	blx	r7
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	f43f ae9c 	beq.w	800588a <_printf_float+0xb6>
 8005b52:	9a06      	ldr	r2, [sp, #24]
 8005b54:	f10b 0b01 	add.w	fp, fp, #1
 8005b58:	e7bb      	b.n	8005ad2 <_printf_float+0x2fe>
 8005b5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b5e:	4631      	mov	r1, r6
 8005b60:	4628      	mov	r0, r5
 8005b62:	47b8      	blx	r7
 8005b64:	3001      	adds	r0, #1
 8005b66:	d1c0      	bne.n	8005aea <_printf_float+0x316>
 8005b68:	e68f      	b.n	800588a <_printf_float+0xb6>
 8005b6a:	9a06      	ldr	r2, [sp, #24]
 8005b6c:	464b      	mov	r3, r9
 8005b6e:	4442      	add	r2, r8
 8005b70:	4631      	mov	r1, r6
 8005b72:	4628      	mov	r0, r5
 8005b74:	47b8      	blx	r7
 8005b76:	3001      	adds	r0, #1
 8005b78:	d1c3      	bne.n	8005b02 <_printf_float+0x32e>
 8005b7a:	e686      	b.n	800588a <_printf_float+0xb6>
 8005b7c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b80:	f1ba 0f01 	cmp.w	sl, #1
 8005b84:	dc01      	bgt.n	8005b8a <_printf_float+0x3b6>
 8005b86:	07db      	lsls	r3, r3, #31
 8005b88:	d536      	bpl.n	8005bf8 <_printf_float+0x424>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	4642      	mov	r2, r8
 8005b8e:	4631      	mov	r1, r6
 8005b90:	4628      	mov	r0, r5
 8005b92:	47b8      	blx	r7
 8005b94:	3001      	adds	r0, #1
 8005b96:	f43f ae78 	beq.w	800588a <_printf_float+0xb6>
 8005b9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	47b8      	blx	r7
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	f43f ae70 	beq.w	800588a <_printf_float+0xb6>
 8005baa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bb6:	f7fa ff87 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bba:	b9c0      	cbnz	r0, 8005bee <_printf_float+0x41a>
 8005bbc:	4653      	mov	r3, sl
 8005bbe:	f108 0201 	add.w	r2, r8, #1
 8005bc2:	4631      	mov	r1, r6
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	47b8      	blx	r7
 8005bc8:	3001      	adds	r0, #1
 8005bca:	d10c      	bne.n	8005be6 <_printf_float+0x412>
 8005bcc:	e65d      	b.n	800588a <_printf_float+0xb6>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	465a      	mov	r2, fp
 8005bd2:	4631      	mov	r1, r6
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	47b8      	blx	r7
 8005bd8:	3001      	adds	r0, #1
 8005bda:	f43f ae56 	beq.w	800588a <_printf_float+0xb6>
 8005bde:	f108 0801 	add.w	r8, r8, #1
 8005be2:	45d0      	cmp	r8, sl
 8005be4:	dbf3      	blt.n	8005bce <_printf_float+0x3fa>
 8005be6:	464b      	mov	r3, r9
 8005be8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005bec:	e6df      	b.n	80059ae <_printf_float+0x1da>
 8005bee:	f04f 0800 	mov.w	r8, #0
 8005bf2:	f104 0b1a 	add.w	fp, r4, #26
 8005bf6:	e7f4      	b.n	8005be2 <_printf_float+0x40e>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	4642      	mov	r2, r8
 8005bfc:	e7e1      	b.n	8005bc2 <_printf_float+0x3ee>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	464a      	mov	r2, r9
 8005c02:	4631      	mov	r1, r6
 8005c04:	4628      	mov	r0, r5
 8005c06:	47b8      	blx	r7
 8005c08:	3001      	adds	r0, #1
 8005c0a:	f43f ae3e 	beq.w	800588a <_printf_float+0xb6>
 8005c0e:	f108 0801 	add.w	r8, r8, #1
 8005c12:	68e3      	ldr	r3, [r4, #12]
 8005c14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c16:	1a5b      	subs	r3, r3, r1
 8005c18:	4543      	cmp	r3, r8
 8005c1a:	dcf0      	bgt.n	8005bfe <_printf_float+0x42a>
 8005c1c:	e6fc      	b.n	8005a18 <_printf_float+0x244>
 8005c1e:	f04f 0800 	mov.w	r8, #0
 8005c22:	f104 0919 	add.w	r9, r4, #25
 8005c26:	e7f4      	b.n	8005c12 <_printf_float+0x43e>

08005c28 <_printf_common>:
 8005c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c2c:	4616      	mov	r6, r2
 8005c2e:	4698      	mov	r8, r3
 8005c30:	688a      	ldr	r2, [r1, #8]
 8005c32:	690b      	ldr	r3, [r1, #16]
 8005c34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	bfb8      	it	lt
 8005c3c:	4613      	movlt	r3, r2
 8005c3e:	6033      	str	r3, [r6, #0]
 8005c40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c44:	4607      	mov	r7, r0
 8005c46:	460c      	mov	r4, r1
 8005c48:	b10a      	cbz	r2, 8005c4e <_printf_common+0x26>
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	6033      	str	r3, [r6, #0]
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	0699      	lsls	r1, r3, #26
 8005c52:	bf42      	ittt	mi
 8005c54:	6833      	ldrmi	r3, [r6, #0]
 8005c56:	3302      	addmi	r3, #2
 8005c58:	6033      	strmi	r3, [r6, #0]
 8005c5a:	6825      	ldr	r5, [r4, #0]
 8005c5c:	f015 0506 	ands.w	r5, r5, #6
 8005c60:	d106      	bne.n	8005c70 <_printf_common+0x48>
 8005c62:	f104 0a19 	add.w	sl, r4, #25
 8005c66:	68e3      	ldr	r3, [r4, #12]
 8005c68:	6832      	ldr	r2, [r6, #0]
 8005c6a:	1a9b      	subs	r3, r3, r2
 8005c6c:	42ab      	cmp	r3, r5
 8005c6e:	dc26      	bgt.n	8005cbe <_printf_common+0x96>
 8005c70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c74:	6822      	ldr	r2, [r4, #0]
 8005c76:	3b00      	subs	r3, #0
 8005c78:	bf18      	it	ne
 8005c7a:	2301      	movne	r3, #1
 8005c7c:	0692      	lsls	r2, r2, #26
 8005c7e:	d42b      	bmi.n	8005cd8 <_printf_common+0xb0>
 8005c80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c84:	4641      	mov	r1, r8
 8005c86:	4638      	mov	r0, r7
 8005c88:	47c8      	blx	r9
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	d01e      	beq.n	8005ccc <_printf_common+0xa4>
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	6922      	ldr	r2, [r4, #16]
 8005c92:	f003 0306 	and.w	r3, r3, #6
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	bf02      	ittt	eq
 8005c9a:	68e5      	ldreq	r5, [r4, #12]
 8005c9c:	6833      	ldreq	r3, [r6, #0]
 8005c9e:	1aed      	subeq	r5, r5, r3
 8005ca0:	68a3      	ldr	r3, [r4, #8]
 8005ca2:	bf0c      	ite	eq
 8005ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ca8:	2500      	movne	r5, #0
 8005caa:	4293      	cmp	r3, r2
 8005cac:	bfc4      	itt	gt
 8005cae:	1a9b      	subgt	r3, r3, r2
 8005cb0:	18ed      	addgt	r5, r5, r3
 8005cb2:	2600      	movs	r6, #0
 8005cb4:	341a      	adds	r4, #26
 8005cb6:	42b5      	cmp	r5, r6
 8005cb8:	d11a      	bne.n	8005cf0 <_printf_common+0xc8>
 8005cba:	2000      	movs	r0, #0
 8005cbc:	e008      	b.n	8005cd0 <_printf_common+0xa8>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	4652      	mov	r2, sl
 8005cc2:	4641      	mov	r1, r8
 8005cc4:	4638      	mov	r0, r7
 8005cc6:	47c8      	blx	r9
 8005cc8:	3001      	adds	r0, #1
 8005cca:	d103      	bne.n	8005cd4 <_printf_common+0xac>
 8005ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd4:	3501      	adds	r5, #1
 8005cd6:	e7c6      	b.n	8005c66 <_printf_common+0x3e>
 8005cd8:	18e1      	adds	r1, r4, r3
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	2030      	movs	r0, #48	@ 0x30
 8005cde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ce2:	4422      	add	r2, r4
 8005ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ce8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005cec:	3302      	adds	r3, #2
 8005cee:	e7c7      	b.n	8005c80 <_printf_common+0x58>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	4622      	mov	r2, r4
 8005cf4:	4641      	mov	r1, r8
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	47c8      	blx	r9
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	d0e6      	beq.n	8005ccc <_printf_common+0xa4>
 8005cfe:	3601      	adds	r6, #1
 8005d00:	e7d9      	b.n	8005cb6 <_printf_common+0x8e>
	...

08005d04 <_printf_i>:
 8005d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d08:	7e0f      	ldrb	r7, [r1, #24]
 8005d0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d0c:	2f78      	cmp	r7, #120	@ 0x78
 8005d0e:	4691      	mov	r9, r2
 8005d10:	4680      	mov	r8, r0
 8005d12:	460c      	mov	r4, r1
 8005d14:	469a      	mov	sl, r3
 8005d16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d1a:	d807      	bhi.n	8005d2c <_printf_i+0x28>
 8005d1c:	2f62      	cmp	r7, #98	@ 0x62
 8005d1e:	d80a      	bhi.n	8005d36 <_printf_i+0x32>
 8005d20:	2f00      	cmp	r7, #0
 8005d22:	f000 80d1 	beq.w	8005ec8 <_printf_i+0x1c4>
 8005d26:	2f58      	cmp	r7, #88	@ 0x58
 8005d28:	f000 80b8 	beq.w	8005e9c <_printf_i+0x198>
 8005d2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d34:	e03a      	b.n	8005dac <_printf_i+0xa8>
 8005d36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d3a:	2b15      	cmp	r3, #21
 8005d3c:	d8f6      	bhi.n	8005d2c <_printf_i+0x28>
 8005d3e:	a101      	add	r1, pc, #4	@ (adr r1, 8005d44 <_printf_i+0x40>)
 8005d40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d44:	08005d9d 	.word	0x08005d9d
 8005d48:	08005db1 	.word	0x08005db1
 8005d4c:	08005d2d 	.word	0x08005d2d
 8005d50:	08005d2d 	.word	0x08005d2d
 8005d54:	08005d2d 	.word	0x08005d2d
 8005d58:	08005d2d 	.word	0x08005d2d
 8005d5c:	08005db1 	.word	0x08005db1
 8005d60:	08005d2d 	.word	0x08005d2d
 8005d64:	08005d2d 	.word	0x08005d2d
 8005d68:	08005d2d 	.word	0x08005d2d
 8005d6c:	08005d2d 	.word	0x08005d2d
 8005d70:	08005eaf 	.word	0x08005eaf
 8005d74:	08005ddb 	.word	0x08005ddb
 8005d78:	08005e69 	.word	0x08005e69
 8005d7c:	08005d2d 	.word	0x08005d2d
 8005d80:	08005d2d 	.word	0x08005d2d
 8005d84:	08005ed1 	.word	0x08005ed1
 8005d88:	08005d2d 	.word	0x08005d2d
 8005d8c:	08005ddb 	.word	0x08005ddb
 8005d90:	08005d2d 	.word	0x08005d2d
 8005d94:	08005d2d 	.word	0x08005d2d
 8005d98:	08005e71 	.word	0x08005e71
 8005d9c:	6833      	ldr	r3, [r6, #0]
 8005d9e:	1d1a      	adds	r2, r3, #4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6032      	str	r2, [r6, #0]
 8005da4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005da8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005dac:	2301      	movs	r3, #1
 8005dae:	e09c      	b.n	8005eea <_printf_i+0x1e6>
 8005db0:	6833      	ldr	r3, [r6, #0]
 8005db2:	6820      	ldr	r0, [r4, #0]
 8005db4:	1d19      	adds	r1, r3, #4
 8005db6:	6031      	str	r1, [r6, #0]
 8005db8:	0606      	lsls	r6, r0, #24
 8005dba:	d501      	bpl.n	8005dc0 <_printf_i+0xbc>
 8005dbc:	681d      	ldr	r5, [r3, #0]
 8005dbe:	e003      	b.n	8005dc8 <_printf_i+0xc4>
 8005dc0:	0645      	lsls	r5, r0, #25
 8005dc2:	d5fb      	bpl.n	8005dbc <_printf_i+0xb8>
 8005dc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005dc8:	2d00      	cmp	r5, #0
 8005dca:	da03      	bge.n	8005dd4 <_printf_i+0xd0>
 8005dcc:	232d      	movs	r3, #45	@ 0x2d
 8005dce:	426d      	negs	r5, r5
 8005dd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dd4:	4858      	ldr	r0, [pc, #352]	@ (8005f38 <_printf_i+0x234>)
 8005dd6:	230a      	movs	r3, #10
 8005dd8:	e011      	b.n	8005dfe <_printf_i+0xfa>
 8005dda:	6821      	ldr	r1, [r4, #0]
 8005ddc:	6833      	ldr	r3, [r6, #0]
 8005dde:	0608      	lsls	r0, r1, #24
 8005de0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005de4:	d402      	bmi.n	8005dec <_printf_i+0xe8>
 8005de6:	0649      	lsls	r1, r1, #25
 8005de8:	bf48      	it	mi
 8005dea:	b2ad      	uxthmi	r5, r5
 8005dec:	2f6f      	cmp	r7, #111	@ 0x6f
 8005dee:	4852      	ldr	r0, [pc, #328]	@ (8005f38 <_printf_i+0x234>)
 8005df0:	6033      	str	r3, [r6, #0]
 8005df2:	bf14      	ite	ne
 8005df4:	230a      	movne	r3, #10
 8005df6:	2308      	moveq	r3, #8
 8005df8:	2100      	movs	r1, #0
 8005dfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005dfe:	6866      	ldr	r6, [r4, #4]
 8005e00:	60a6      	str	r6, [r4, #8]
 8005e02:	2e00      	cmp	r6, #0
 8005e04:	db05      	blt.n	8005e12 <_printf_i+0x10e>
 8005e06:	6821      	ldr	r1, [r4, #0]
 8005e08:	432e      	orrs	r6, r5
 8005e0a:	f021 0104 	bic.w	r1, r1, #4
 8005e0e:	6021      	str	r1, [r4, #0]
 8005e10:	d04b      	beq.n	8005eaa <_printf_i+0x1a6>
 8005e12:	4616      	mov	r6, r2
 8005e14:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e18:	fb03 5711 	mls	r7, r3, r1, r5
 8005e1c:	5dc7      	ldrb	r7, [r0, r7]
 8005e1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e22:	462f      	mov	r7, r5
 8005e24:	42bb      	cmp	r3, r7
 8005e26:	460d      	mov	r5, r1
 8005e28:	d9f4      	bls.n	8005e14 <_printf_i+0x110>
 8005e2a:	2b08      	cmp	r3, #8
 8005e2c:	d10b      	bne.n	8005e46 <_printf_i+0x142>
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	07df      	lsls	r7, r3, #31
 8005e32:	d508      	bpl.n	8005e46 <_printf_i+0x142>
 8005e34:	6923      	ldr	r3, [r4, #16]
 8005e36:	6861      	ldr	r1, [r4, #4]
 8005e38:	4299      	cmp	r1, r3
 8005e3a:	bfde      	ittt	le
 8005e3c:	2330      	movle	r3, #48	@ 0x30
 8005e3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e42:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e46:	1b92      	subs	r2, r2, r6
 8005e48:	6122      	str	r2, [r4, #16]
 8005e4a:	f8cd a000 	str.w	sl, [sp]
 8005e4e:	464b      	mov	r3, r9
 8005e50:	aa03      	add	r2, sp, #12
 8005e52:	4621      	mov	r1, r4
 8005e54:	4640      	mov	r0, r8
 8005e56:	f7ff fee7 	bl	8005c28 <_printf_common>
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	d14a      	bne.n	8005ef4 <_printf_i+0x1f0>
 8005e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e62:	b004      	add	sp, #16
 8005e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	f043 0320 	orr.w	r3, r3, #32
 8005e6e:	6023      	str	r3, [r4, #0]
 8005e70:	4832      	ldr	r0, [pc, #200]	@ (8005f3c <_printf_i+0x238>)
 8005e72:	2778      	movs	r7, #120	@ 0x78
 8005e74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	6831      	ldr	r1, [r6, #0]
 8005e7c:	061f      	lsls	r7, r3, #24
 8005e7e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e82:	d402      	bmi.n	8005e8a <_printf_i+0x186>
 8005e84:	065f      	lsls	r7, r3, #25
 8005e86:	bf48      	it	mi
 8005e88:	b2ad      	uxthmi	r5, r5
 8005e8a:	6031      	str	r1, [r6, #0]
 8005e8c:	07d9      	lsls	r1, r3, #31
 8005e8e:	bf44      	itt	mi
 8005e90:	f043 0320 	orrmi.w	r3, r3, #32
 8005e94:	6023      	strmi	r3, [r4, #0]
 8005e96:	b11d      	cbz	r5, 8005ea0 <_printf_i+0x19c>
 8005e98:	2310      	movs	r3, #16
 8005e9a:	e7ad      	b.n	8005df8 <_printf_i+0xf4>
 8005e9c:	4826      	ldr	r0, [pc, #152]	@ (8005f38 <_printf_i+0x234>)
 8005e9e:	e7e9      	b.n	8005e74 <_printf_i+0x170>
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	f023 0320 	bic.w	r3, r3, #32
 8005ea6:	6023      	str	r3, [r4, #0]
 8005ea8:	e7f6      	b.n	8005e98 <_printf_i+0x194>
 8005eaa:	4616      	mov	r6, r2
 8005eac:	e7bd      	b.n	8005e2a <_printf_i+0x126>
 8005eae:	6833      	ldr	r3, [r6, #0]
 8005eb0:	6825      	ldr	r5, [r4, #0]
 8005eb2:	6961      	ldr	r1, [r4, #20]
 8005eb4:	1d18      	adds	r0, r3, #4
 8005eb6:	6030      	str	r0, [r6, #0]
 8005eb8:	062e      	lsls	r6, r5, #24
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	d501      	bpl.n	8005ec2 <_printf_i+0x1be>
 8005ebe:	6019      	str	r1, [r3, #0]
 8005ec0:	e002      	b.n	8005ec8 <_printf_i+0x1c4>
 8005ec2:	0668      	lsls	r0, r5, #25
 8005ec4:	d5fb      	bpl.n	8005ebe <_printf_i+0x1ba>
 8005ec6:	8019      	strh	r1, [r3, #0]
 8005ec8:	2300      	movs	r3, #0
 8005eca:	6123      	str	r3, [r4, #16]
 8005ecc:	4616      	mov	r6, r2
 8005ece:	e7bc      	b.n	8005e4a <_printf_i+0x146>
 8005ed0:	6833      	ldr	r3, [r6, #0]
 8005ed2:	1d1a      	adds	r2, r3, #4
 8005ed4:	6032      	str	r2, [r6, #0]
 8005ed6:	681e      	ldr	r6, [r3, #0]
 8005ed8:	6862      	ldr	r2, [r4, #4]
 8005eda:	2100      	movs	r1, #0
 8005edc:	4630      	mov	r0, r6
 8005ede:	f7fa f977 	bl	80001d0 <memchr>
 8005ee2:	b108      	cbz	r0, 8005ee8 <_printf_i+0x1e4>
 8005ee4:	1b80      	subs	r0, r0, r6
 8005ee6:	6060      	str	r0, [r4, #4]
 8005ee8:	6863      	ldr	r3, [r4, #4]
 8005eea:	6123      	str	r3, [r4, #16]
 8005eec:	2300      	movs	r3, #0
 8005eee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ef2:	e7aa      	b.n	8005e4a <_printf_i+0x146>
 8005ef4:	6923      	ldr	r3, [r4, #16]
 8005ef6:	4632      	mov	r2, r6
 8005ef8:	4649      	mov	r1, r9
 8005efa:	4640      	mov	r0, r8
 8005efc:	47d0      	blx	sl
 8005efe:	3001      	adds	r0, #1
 8005f00:	d0ad      	beq.n	8005e5e <_printf_i+0x15a>
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	079b      	lsls	r3, r3, #30
 8005f06:	d413      	bmi.n	8005f30 <_printf_i+0x22c>
 8005f08:	68e0      	ldr	r0, [r4, #12]
 8005f0a:	9b03      	ldr	r3, [sp, #12]
 8005f0c:	4298      	cmp	r0, r3
 8005f0e:	bfb8      	it	lt
 8005f10:	4618      	movlt	r0, r3
 8005f12:	e7a6      	b.n	8005e62 <_printf_i+0x15e>
 8005f14:	2301      	movs	r3, #1
 8005f16:	4632      	mov	r2, r6
 8005f18:	4649      	mov	r1, r9
 8005f1a:	4640      	mov	r0, r8
 8005f1c:	47d0      	blx	sl
 8005f1e:	3001      	adds	r0, #1
 8005f20:	d09d      	beq.n	8005e5e <_printf_i+0x15a>
 8005f22:	3501      	adds	r5, #1
 8005f24:	68e3      	ldr	r3, [r4, #12]
 8005f26:	9903      	ldr	r1, [sp, #12]
 8005f28:	1a5b      	subs	r3, r3, r1
 8005f2a:	42ab      	cmp	r3, r5
 8005f2c:	dcf2      	bgt.n	8005f14 <_printf_i+0x210>
 8005f2e:	e7eb      	b.n	8005f08 <_printf_i+0x204>
 8005f30:	2500      	movs	r5, #0
 8005f32:	f104 0619 	add.w	r6, r4, #25
 8005f36:	e7f5      	b.n	8005f24 <_printf_i+0x220>
 8005f38:	0800805e 	.word	0x0800805e
 8005f3c:	0800806f 	.word	0x0800806f

08005f40 <std>:
 8005f40:	2300      	movs	r3, #0
 8005f42:	b510      	push	{r4, lr}
 8005f44:	4604      	mov	r4, r0
 8005f46:	e9c0 3300 	strd	r3, r3, [r0]
 8005f4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f4e:	6083      	str	r3, [r0, #8]
 8005f50:	8181      	strh	r1, [r0, #12]
 8005f52:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f54:	81c2      	strh	r2, [r0, #14]
 8005f56:	6183      	str	r3, [r0, #24]
 8005f58:	4619      	mov	r1, r3
 8005f5a:	2208      	movs	r2, #8
 8005f5c:	305c      	adds	r0, #92	@ 0x5c
 8005f5e:	f000 f906 	bl	800616e <memset>
 8005f62:	4b0d      	ldr	r3, [pc, #52]	@ (8005f98 <std+0x58>)
 8005f64:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f66:	4b0d      	ldr	r3, [pc, #52]	@ (8005f9c <std+0x5c>)
 8005f68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa0 <std+0x60>)
 8005f6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa4 <std+0x64>)
 8005f70:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f72:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa8 <std+0x68>)
 8005f74:	6224      	str	r4, [r4, #32]
 8005f76:	429c      	cmp	r4, r3
 8005f78:	d006      	beq.n	8005f88 <std+0x48>
 8005f7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f7e:	4294      	cmp	r4, r2
 8005f80:	d002      	beq.n	8005f88 <std+0x48>
 8005f82:	33d0      	adds	r3, #208	@ 0xd0
 8005f84:	429c      	cmp	r4, r3
 8005f86:	d105      	bne.n	8005f94 <std+0x54>
 8005f88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f90:	f000 b96a 	b.w	8006268 <__retarget_lock_init_recursive>
 8005f94:	bd10      	pop	{r4, pc}
 8005f96:	bf00      	nop
 8005f98:	080060e9 	.word	0x080060e9
 8005f9c:	0800610b 	.word	0x0800610b
 8005fa0:	08006143 	.word	0x08006143
 8005fa4:	08006167 	.word	0x08006167
 8005fa8:	200002f8 	.word	0x200002f8

08005fac <stdio_exit_handler>:
 8005fac:	4a02      	ldr	r2, [pc, #8]	@ (8005fb8 <stdio_exit_handler+0xc>)
 8005fae:	4903      	ldr	r1, [pc, #12]	@ (8005fbc <stdio_exit_handler+0x10>)
 8005fb0:	4803      	ldr	r0, [pc, #12]	@ (8005fc0 <stdio_exit_handler+0x14>)
 8005fb2:	f000 b869 	b.w	8006088 <_fwalk_sglue>
 8005fb6:	bf00      	nop
 8005fb8:	2000000c 	.word	0x2000000c
 8005fbc:	08007ba1 	.word	0x08007ba1
 8005fc0:	2000001c 	.word	0x2000001c

08005fc4 <cleanup_stdio>:
 8005fc4:	6841      	ldr	r1, [r0, #4]
 8005fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff8 <cleanup_stdio+0x34>)
 8005fc8:	4299      	cmp	r1, r3
 8005fca:	b510      	push	{r4, lr}
 8005fcc:	4604      	mov	r4, r0
 8005fce:	d001      	beq.n	8005fd4 <cleanup_stdio+0x10>
 8005fd0:	f001 fde6 	bl	8007ba0 <_fflush_r>
 8005fd4:	68a1      	ldr	r1, [r4, #8]
 8005fd6:	4b09      	ldr	r3, [pc, #36]	@ (8005ffc <cleanup_stdio+0x38>)
 8005fd8:	4299      	cmp	r1, r3
 8005fda:	d002      	beq.n	8005fe2 <cleanup_stdio+0x1e>
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f001 fddf 	bl	8007ba0 <_fflush_r>
 8005fe2:	68e1      	ldr	r1, [r4, #12]
 8005fe4:	4b06      	ldr	r3, [pc, #24]	@ (8006000 <cleanup_stdio+0x3c>)
 8005fe6:	4299      	cmp	r1, r3
 8005fe8:	d004      	beq.n	8005ff4 <cleanup_stdio+0x30>
 8005fea:	4620      	mov	r0, r4
 8005fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ff0:	f001 bdd6 	b.w	8007ba0 <_fflush_r>
 8005ff4:	bd10      	pop	{r4, pc}
 8005ff6:	bf00      	nop
 8005ff8:	200002f8 	.word	0x200002f8
 8005ffc:	20000360 	.word	0x20000360
 8006000:	200003c8 	.word	0x200003c8

08006004 <global_stdio_init.part.0>:
 8006004:	b510      	push	{r4, lr}
 8006006:	4b0b      	ldr	r3, [pc, #44]	@ (8006034 <global_stdio_init.part.0+0x30>)
 8006008:	4c0b      	ldr	r4, [pc, #44]	@ (8006038 <global_stdio_init.part.0+0x34>)
 800600a:	4a0c      	ldr	r2, [pc, #48]	@ (800603c <global_stdio_init.part.0+0x38>)
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	4620      	mov	r0, r4
 8006010:	2200      	movs	r2, #0
 8006012:	2104      	movs	r1, #4
 8006014:	f7ff ff94 	bl	8005f40 <std>
 8006018:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800601c:	2201      	movs	r2, #1
 800601e:	2109      	movs	r1, #9
 8006020:	f7ff ff8e 	bl	8005f40 <std>
 8006024:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006028:	2202      	movs	r2, #2
 800602a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800602e:	2112      	movs	r1, #18
 8006030:	f7ff bf86 	b.w	8005f40 <std>
 8006034:	20000430 	.word	0x20000430
 8006038:	200002f8 	.word	0x200002f8
 800603c:	08005fad 	.word	0x08005fad

08006040 <__sfp_lock_acquire>:
 8006040:	4801      	ldr	r0, [pc, #4]	@ (8006048 <__sfp_lock_acquire+0x8>)
 8006042:	f000 b912 	b.w	800626a <__retarget_lock_acquire_recursive>
 8006046:	bf00      	nop
 8006048:	20000439 	.word	0x20000439

0800604c <__sfp_lock_release>:
 800604c:	4801      	ldr	r0, [pc, #4]	@ (8006054 <__sfp_lock_release+0x8>)
 800604e:	f000 b90d 	b.w	800626c <__retarget_lock_release_recursive>
 8006052:	bf00      	nop
 8006054:	20000439 	.word	0x20000439

08006058 <__sinit>:
 8006058:	b510      	push	{r4, lr}
 800605a:	4604      	mov	r4, r0
 800605c:	f7ff fff0 	bl	8006040 <__sfp_lock_acquire>
 8006060:	6a23      	ldr	r3, [r4, #32]
 8006062:	b11b      	cbz	r3, 800606c <__sinit+0x14>
 8006064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006068:	f7ff bff0 	b.w	800604c <__sfp_lock_release>
 800606c:	4b04      	ldr	r3, [pc, #16]	@ (8006080 <__sinit+0x28>)
 800606e:	6223      	str	r3, [r4, #32]
 8006070:	4b04      	ldr	r3, [pc, #16]	@ (8006084 <__sinit+0x2c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1f5      	bne.n	8006064 <__sinit+0xc>
 8006078:	f7ff ffc4 	bl	8006004 <global_stdio_init.part.0>
 800607c:	e7f2      	b.n	8006064 <__sinit+0xc>
 800607e:	bf00      	nop
 8006080:	08005fc5 	.word	0x08005fc5
 8006084:	20000430 	.word	0x20000430

08006088 <_fwalk_sglue>:
 8006088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800608c:	4607      	mov	r7, r0
 800608e:	4688      	mov	r8, r1
 8006090:	4614      	mov	r4, r2
 8006092:	2600      	movs	r6, #0
 8006094:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006098:	f1b9 0901 	subs.w	r9, r9, #1
 800609c:	d505      	bpl.n	80060aa <_fwalk_sglue+0x22>
 800609e:	6824      	ldr	r4, [r4, #0]
 80060a0:	2c00      	cmp	r4, #0
 80060a2:	d1f7      	bne.n	8006094 <_fwalk_sglue+0xc>
 80060a4:	4630      	mov	r0, r6
 80060a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060aa:	89ab      	ldrh	r3, [r5, #12]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d907      	bls.n	80060c0 <_fwalk_sglue+0x38>
 80060b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060b4:	3301      	adds	r3, #1
 80060b6:	d003      	beq.n	80060c0 <_fwalk_sglue+0x38>
 80060b8:	4629      	mov	r1, r5
 80060ba:	4638      	mov	r0, r7
 80060bc:	47c0      	blx	r8
 80060be:	4306      	orrs	r6, r0
 80060c0:	3568      	adds	r5, #104	@ 0x68
 80060c2:	e7e9      	b.n	8006098 <_fwalk_sglue+0x10>

080060c4 <iprintf>:
 80060c4:	b40f      	push	{r0, r1, r2, r3}
 80060c6:	b507      	push	{r0, r1, r2, lr}
 80060c8:	4906      	ldr	r1, [pc, #24]	@ (80060e4 <iprintf+0x20>)
 80060ca:	ab04      	add	r3, sp, #16
 80060cc:	6808      	ldr	r0, [r1, #0]
 80060ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80060d2:	6881      	ldr	r1, [r0, #8]
 80060d4:	9301      	str	r3, [sp, #4]
 80060d6:	f001 fbc7 	bl	8007868 <_vfiprintf_r>
 80060da:	b003      	add	sp, #12
 80060dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80060e0:	b004      	add	sp, #16
 80060e2:	4770      	bx	lr
 80060e4:	20000018 	.word	0x20000018

080060e8 <__sread>:
 80060e8:	b510      	push	{r4, lr}
 80060ea:	460c      	mov	r4, r1
 80060ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f0:	f000 f86c 	bl	80061cc <_read_r>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	bfab      	itete	ge
 80060f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80060fa:	89a3      	ldrhlt	r3, [r4, #12]
 80060fc:	181b      	addge	r3, r3, r0
 80060fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006102:	bfac      	ite	ge
 8006104:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006106:	81a3      	strhlt	r3, [r4, #12]
 8006108:	bd10      	pop	{r4, pc}

0800610a <__swrite>:
 800610a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800610e:	461f      	mov	r7, r3
 8006110:	898b      	ldrh	r3, [r1, #12]
 8006112:	05db      	lsls	r3, r3, #23
 8006114:	4605      	mov	r5, r0
 8006116:	460c      	mov	r4, r1
 8006118:	4616      	mov	r6, r2
 800611a:	d505      	bpl.n	8006128 <__swrite+0x1e>
 800611c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006120:	2302      	movs	r3, #2
 8006122:	2200      	movs	r2, #0
 8006124:	f000 f840 	bl	80061a8 <_lseek_r>
 8006128:	89a3      	ldrh	r3, [r4, #12]
 800612a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800612e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006132:	81a3      	strh	r3, [r4, #12]
 8006134:	4632      	mov	r2, r6
 8006136:	463b      	mov	r3, r7
 8006138:	4628      	mov	r0, r5
 800613a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800613e:	f000 b857 	b.w	80061f0 <_write_r>

08006142 <__sseek>:
 8006142:	b510      	push	{r4, lr}
 8006144:	460c      	mov	r4, r1
 8006146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800614a:	f000 f82d 	bl	80061a8 <_lseek_r>
 800614e:	1c43      	adds	r3, r0, #1
 8006150:	89a3      	ldrh	r3, [r4, #12]
 8006152:	bf15      	itete	ne
 8006154:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006156:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800615a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800615e:	81a3      	strheq	r3, [r4, #12]
 8006160:	bf18      	it	ne
 8006162:	81a3      	strhne	r3, [r4, #12]
 8006164:	bd10      	pop	{r4, pc}

08006166 <__sclose>:
 8006166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800616a:	f000 b80d 	b.w	8006188 <_close_r>

0800616e <memset>:
 800616e:	4402      	add	r2, r0
 8006170:	4603      	mov	r3, r0
 8006172:	4293      	cmp	r3, r2
 8006174:	d100      	bne.n	8006178 <memset+0xa>
 8006176:	4770      	bx	lr
 8006178:	f803 1b01 	strb.w	r1, [r3], #1
 800617c:	e7f9      	b.n	8006172 <memset+0x4>
	...

08006180 <_localeconv_r>:
 8006180:	4800      	ldr	r0, [pc, #0]	@ (8006184 <_localeconv_r+0x4>)
 8006182:	4770      	bx	lr
 8006184:	20000158 	.word	0x20000158

08006188 <_close_r>:
 8006188:	b538      	push	{r3, r4, r5, lr}
 800618a:	4d06      	ldr	r5, [pc, #24]	@ (80061a4 <_close_r+0x1c>)
 800618c:	2300      	movs	r3, #0
 800618e:	4604      	mov	r4, r0
 8006190:	4608      	mov	r0, r1
 8006192:	602b      	str	r3, [r5, #0]
 8006194:	f7fb fa01 	bl	800159a <_close>
 8006198:	1c43      	adds	r3, r0, #1
 800619a:	d102      	bne.n	80061a2 <_close_r+0x1a>
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	b103      	cbz	r3, 80061a2 <_close_r+0x1a>
 80061a0:	6023      	str	r3, [r4, #0]
 80061a2:	bd38      	pop	{r3, r4, r5, pc}
 80061a4:	20000434 	.word	0x20000434

080061a8 <_lseek_r>:
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	4d07      	ldr	r5, [pc, #28]	@ (80061c8 <_lseek_r+0x20>)
 80061ac:	4604      	mov	r4, r0
 80061ae:	4608      	mov	r0, r1
 80061b0:	4611      	mov	r1, r2
 80061b2:	2200      	movs	r2, #0
 80061b4:	602a      	str	r2, [r5, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	f7fb fa16 	bl	80015e8 <_lseek>
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	d102      	bne.n	80061c6 <_lseek_r+0x1e>
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	b103      	cbz	r3, 80061c6 <_lseek_r+0x1e>
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	bd38      	pop	{r3, r4, r5, pc}
 80061c8:	20000434 	.word	0x20000434

080061cc <_read_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4d07      	ldr	r5, [pc, #28]	@ (80061ec <_read_r+0x20>)
 80061d0:	4604      	mov	r4, r0
 80061d2:	4608      	mov	r0, r1
 80061d4:	4611      	mov	r1, r2
 80061d6:	2200      	movs	r2, #0
 80061d8:	602a      	str	r2, [r5, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	f7fb f9a4 	bl	8001528 <_read>
 80061e0:	1c43      	adds	r3, r0, #1
 80061e2:	d102      	bne.n	80061ea <_read_r+0x1e>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	b103      	cbz	r3, 80061ea <_read_r+0x1e>
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	bd38      	pop	{r3, r4, r5, pc}
 80061ec:	20000434 	.word	0x20000434

080061f0 <_write_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4d07      	ldr	r5, [pc, #28]	@ (8006210 <_write_r+0x20>)
 80061f4:	4604      	mov	r4, r0
 80061f6:	4608      	mov	r0, r1
 80061f8:	4611      	mov	r1, r2
 80061fa:	2200      	movs	r2, #0
 80061fc:	602a      	str	r2, [r5, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	f7fb f9af 	bl	8001562 <_write>
 8006204:	1c43      	adds	r3, r0, #1
 8006206:	d102      	bne.n	800620e <_write_r+0x1e>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	b103      	cbz	r3, 800620e <_write_r+0x1e>
 800620c:	6023      	str	r3, [r4, #0]
 800620e:	bd38      	pop	{r3, r4, r5, pc}
 8006210:	20000434 	.word	0x20000434

08006214 <__errno>:
 8006214:	4b01      	ldr	r3, [pc, #4]	@ (800621c <__errno+0x8>)
 8006216:	6818      	ldr	r0, [r3, #0]
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	20000018 	.word	0x20000018

08006220 <__libc_init_array>:
 8006220:	b570      	push	{r4, r5, r6, lr}
 8006222:	4d0d      	ldr	r5, [pc, #52]	@ (8006258 <__libc_init_array+0x38>)
 8006224:	4c0d      	ldr	r4, [pc, #52]	@ (800625c <__libc_init_array+0x3c>)
 8006226:	1b64      	subs	r4, r4, r5
 8006228:	10a4      	asrs	r4, r4, #2
 800622a:	2600      	movs	r6, #0
 800622c:	42a6      	cmp	r6, r4
 800622e:	d109      	bne.n	8006244 <__libc_init_array+0x24>
 8006230:	4d0b      	ldr	r5, [pc, #44]	@ (8006260 <__libc_init_array+0x40>)
 8006232:	4c0c      	ldr	r4, [pc, #48]	@ (8006264 <__libc_init_array+0x44>)
 8006234:	f001 fec2 	bl	8007fbc <_init>
 8006238:	1b64      	subs	r4, r4, r5
 800623a:	10a4      	asrs	r4, r4, #2
 800623c:	2600      	movs	r6, #0
 800623e:	42a6      	cmp	r6, r4
 8006240:	d105      	bne.n	800624e <__libc_init_array+0x2e>
 8006242:	bd70      	pop	{r4, r5, r6, pc}
 8006244:	f855 3b04 	ldr.w	r3, [r5], #4
 8006248:	4798      	blx	r3
 800624a:	3601      	adds	r6, #1
 800624c:	e7ee      	b.n	800622c <__libc_init_array+0xc>
 800624e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006252:	4798      	blx	r3
 8006254:	3601      	adds	r6, #1
 8006256:	e7f2      	b.n	800623e <__libc_init_array+0x1e>
 8006258:	080083cc 	.word	0x080083cc
 800625c:	080083cc 	.word	0x080083cc
 8006260:	080083cc 	.word	0x080083cc
 8006264:	080083d0 	.word	0x080083d0

08006268 <__retarget_lock_init_recursive>:
 8006268:	4770      	bx	lr

0800626a <__retarget_lock_acquire_recursive>:
 800626a:	4770      	bx	lr

0800626c <__retarget_lock_release_recursive>:
 800626c:	4770      	bx	lr

0800626e <quorem>:
 800626e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006272:	6903      	ldr	r3, [r0, #16]
 8006274:	690c      	ldr	r4, [r1, #16]
 8006276:	42a3      	cmp	r3, r4
 8006278:	4607      	mov	r7, r0
 800627a:	db7e      	blt.n	800637a <quorem+0x10c>
 800627c:	3c01      	subs	r4, #1
 800627e:	f101 0814 	add.w	r8, r1, #20
 8006282:	00a3      	lsls	r3, r4, #2
 8006284:	f100 0514 	add.w	r5, r0, #20
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800628e:	9301      	str	r3, [sp, #4]
 8006290:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006294:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006298:	3301      	adds	r3, #1
 800629a:	429a      	cmp	r2, r3
 800629c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80062a4:	d32e      	bcc.n	8006304 <quorem+0x96>
 80062a6:	f04f 0a00 	mov.w	sl, #0
 80062aa:	46c4      	mov	ip, r8
 80062ac:	46ae      	mov	lr, r5
 80062ae:	46d3      	mov	fp, sl
 80062b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80062b4:	b298      	uxth	r0, r3
 80062b6:	fb06 a000 	mla	r0, r6, r0, sl
 80062ba:	0c02      	lsrs	r2, r0, #16
 80062bc:	0c1b      	lsrs	r3, r3, #16
 80062be:	fb06 2303 	mla	r3, r6, r3, r2
 80062c2:	f8de 2000 	ldr.w	r2, [lr]
 80062c6:	b280      	uxth	r0, r0
 80062c8:	b292      	uxth	r2, r2
 80062ca:	1a12      	subs	r2, r2, r0
 80062cc:	445a      	add	r2, fp
 80062ce:	f8de 0000 	ldr.w	r0, [lr]
 80062d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80062dc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80062e0:	b292      	uxth	r2, r2
 80062e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80062e6:	45e1      	cmp	r9, ip
 80062e8:	f84e 2b04 	str.w	r2, [lr], #4
 80062ec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80062f0:	d2de      	bcs.n	80062b0 <quorem+0x42>
 80062f2:	9b00      	ldr	r3, [sp, #0]
 80062f4:	58eb      	ldr	r3, [r5, r3]
 80062f6:	b92b      	cbnz	r3, 8006304 <quorem+0x96>
 80062f8:	9b01      	ldr	r3, [sp, #4]
 80062fa:	3b04      	subs	r3, #4
 80062fc:	429d      	cmp	r5, r3
 80062fe:	461a      	mov	r2, r3
 8006300:	d32f      	bcc.n	8006362 <quorem+0xf4>
 8006302:	613c      	str	r4, [r7, #16]
 8006304:	4638      	mov	r0, r7
 8006306:	f001 f97d 	bl	8007604 <__mcmp>
 800630a:	2800      	cmp	r0, #0
 800630c:	db25      	blt.n	800635a <quorem+0xec>
 800630e:	4629      	mov	r1, r5
 8006310:	2000      	movs	r0, #0
 8006312:	f858 2b04 	ldr.w	r2, [r8], #4
 8006316:	f8d1 c000 	ldr.w	ip, [r1]
 800631a:	fa1f fe82 	uxth.w	lr, r2
 800631e:	fa1f f38c 	uxth.w	r3, ip
 8006322:	eba3 030e 	sub.w	r3, r3, lr
 8006326:	4403      	add	r3, r0
 8006328:	0c12      	lsrs	r2, r2, #16
 800632a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800632e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006332:	b29b      	uxth	r3, r3
 8006334:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006338:	45c1      	cmp	r9, r8
 800633a:	f841 3b04 	str.w	r3, [r1], #4
 800633e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006342:	d2e6      	bcs.n	8006312 <quorem+0xa4>
 8006344:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006348:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800634c:	b922      	cbnz	r2, 8006358 <quorem+0xea>
 800634e:	3b04      	subs	r3, #4
 8006350:	429d      	cmp	r5, r3
 8006352:	461a      	mov	r2, r3
 8006354:	d30b      	bcc.n	800636e <quorem+0x100>
 8006356:	613c      	str	r4, [r7, #16]
 8006358:	3601      	adds	r6, #1
 800635a:	4630      	mov	r0, r6
 800635c:	b003      	add	sp, #12
 800635e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006362:	6812      	ldr	r2, [r2, #0]
 8006364:	3b04      	subs	r3, #4
 8006366:	2a00      	cmp	r2, #0
 8006368:	d1cb      	bne.n	8006302 <quorem+0x94>
 800636a:	3c01      	subs	r4, #1
 800636c:	e7c6      	b.n	80062fc <quorem+0x8e>
 800636e:	6812      	ldr	r2, [r2, #0]
 8006370:	3b04      	subs	r3, #4
 8006372:	2a00      	cmp	r2, #0
 8006374:	d1ef      	bne.n	8006356 <quorem+0xe8>
 8006376:	3c01      	subs	r4, #1
 8006378:	e7ea      	b.n	8006350 <quorem+0xe2>
 800637a:	2000      	movs	r0, #0
 800637c:	e7ee      	b.n	800635c <quorem+0xee>
	...

08006380 <_dtoa_r>:
 8006380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006384:	69c7      	ldr	r7, [r0, #28]
 8006386:	b097      	sub	sp, #92	@ 0x5c
 8006388:	ed8d 0b04 	vstr	d0, [sp, #16]
 800638c:	ec55 4b10 	vmov	r4, r5, d0
 8006390:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006392:	9107      	str	r1, [sp, #28]
 8006394:	4681      	mov	r9, r0
 8006396:	920c      	str	r2, [sp, #48]	@ 0x30
 8006398:	9311      	str	r3, [sp, #68]	@ 0x44
 800639a:	b97f      	cbnz	r7, 80063bc <_dtoa_r+0x3c>
 800639c:	2010      	movs	r0, #16
 800639e:	f000 fe09 	bl	8006fb4 <malloc>
 80063a2:	4602      	mov	r2, r0
 80063a4:	f8c9 001c 	str.w	r0, [r9, #28]
 80063a8:	b920      	cbnz	r0, 80063b4 <_dtoa_r+0x34>
 80063aa:	4ba9      	ldr	r3, [pc, #676]	@ (8006650 <_dtoa_r+0x2d0>)
 80063ac:	21ef      	movs	r1, #239	@ 0xef
 80063ae:	48a9      	ldr	r0, [pc, #676]	@ (8006654 <_dtoa_r+0x2d4>)
 80063b0:	f001 fcd0 	bl	8007d54 <__assert_func>
 80063b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80063b8:	6007      	str	r7, [r0, #0]
 80063ba:	60c7      	str	r7, [r0, #12]
 80063bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80063c0:	6819      	ldr	r1, [r3, #0]
 80063c2:	b159      	cbz	r1, 80063dc <_dtoa_r+0x5c>
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	604a      	str	r2, [r1, #4]
 80063c8:	2301      	movs	r3, #1
 80063ca:	4093      	lsls	r3, r2
 80063cc:	608b      	str	r3, [r1, #8]
 80063ce:	4648      	mov	r0, r9
 80063d0:	f000 fee6 	bl	80071a0 <_Bfree>
 80063d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	1e2b      	subs	r3, r5, #0
 80063de:	bfb9      	ittee	lt
 80063e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80063e4:	9305      	strlt	r3, [sp, #20]
 80063e6:	2300      	movge	r3, #0
 80063e8:	6033      	strge	r3, [r6, #0]
 80063ea:	9f05      	ldr	r7, [sp, #20]
 80063ec:	4b9a      	ldr	r3, [pc, #616]	@ (8006658 <_dtoa_r+0x2d8>)
 80063ee:	bfbc      	itt	lt
 80063f0:	2201      	movlt	r2, #1
 80063f2:	6032      	strlt	r2, [r6, #0]
 80063f4:	43bb      	bics	r3, r7
 80063f6:	d112      	bne.n	800641e <_dtoa_r+0x9e>
 80063f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80063fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006404:	4323      	orrs	r3, r4
 8006406:	f000 855a 	beq.w	8006ebe <_dtoa_r+0xb3e>
 800640a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800640c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800666c <_dtoa_r+0x2ec>
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 855c 	beq.w	8006ece <_dtoa_r+0xb4e>
 8006416:	f10a 0303 	add.w	r3, sl, #3
 800641a:	f000 bd56 	b.w	8006eca <_dtoa_r+0xb4a>
 800641e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006422:	2200      	movs	r2, #0
 8006424:	ec51 0b17 	vmov	r0, r1, d7
 8006428:	2300      	movs	r3, #0
 800642a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800642e:	f7fa fb4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006432:	4680      	mov	r8, r0
 8006434:	b158      	cbz	r0, 800644e <_dtoa_r+0xce>
 8006436:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006438:	2301      	movs	r3, #1
 800643a:	6013      	str	r3, [r2, #0]
 800643c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800643e:	b113      	cbz	r3, 8006446 <_dtoa_r+0xc6>
 8006440:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006442:	4b86      	ldr	r3, [pc, #536]	@ (800665c <_dtoa_r+0x2dc>)
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006670 <_dtoa_r+0x2f0>
 800644a:	f000 bd40 	b.w	8006ece <_dtoa_r+0xb4e>
 800644e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006452:	aa14      	add	r2, sp, #80	@ 0x50
 8006454:	a915      	add	r1, sp, #84	@ 0x54
 8006456:	4648      	mov	r0, r9
 8006458:	f001 f984 	bl	8007764 <__d2b>
 800645c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006460:	9002      	str	r0, [sp, #8]
 8006462:	2e00      	cmp	r6, #0
 8006464:	d078      	beq.n	8006558 <_dtoa_r+0x1d8>
 8006466:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006468:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800646c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006470:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006474:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006478:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800647c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006480:	4619      	mov	r1, r3
 8006482:	2200      	movs	r2, #0
 8006484:	4b76      	ldr	r3, [pc, #472]	@ (8006660 <_dtoa_r+0x2e0>)
 8006486:	f7f9 feff 	bl	8000288 <__aeabi_dsub>
 800648a:	a36b      	add	r3, pc, #428	@ (adr r3, 8006638 <_dtoa_r+0x2b8>)
 800648c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006490:	f7fa f8b2 	bl	80005f8 <__aeabi_dmul>
 8006494:	a36a      	add	r3, pc, #424	@ (adr r3, 8006640 <_dtoa_r+0x2c0>)
 8006496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649a:	f7f9 fef7 	bl	800028c <__adddf3>
 800649e:	4604      	mov	r4, r0
 80064a0:	4630      	mov	r0, r6
 80064a2:	460d      	mov	r5, r1
 80064a4:	f7fa f83e 	bl	8000524 <__aeabi_i2d>
 80064a8:	a367      	add	r3, pc, #412	@ (adr r3, 8006648 <_dtoa_r+0x2c8>)
 80064aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ae:	f7fa f8a3 	bl	80005f8 <__aeabi_dmul>
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	4620      	mov	r0, r4
 80064b8:	4629      	mov	r1, r5
 80064ba:	f7f9 fee7 	bl	800028c <__adddf3>
 80064be:	4604      	mov	r4, r0
 80064c0:	460d      	mov	r5, r1
 80064c2:	f7fa fb49 	bl	8000b58 <__aeabi_d2iz>
 80064c6:	2200      	movs	r2, #0
 80064c8:	4607      	mov	r7, r0
 80064ca:	2300      	movs	r3, #0
 80064cc:	4620      	mov	r0, r4
 80064ce:	4629      	mov	r1, r5
 80064d0:	f7fa fb04 	bl	8000adc <__aeabi_dcmplt>
 80064d4:	b140      	cbz	r0, 80064e8 <_dtoa_r+0x168>
 80064d6:	4638      	mov	r0, r7
 80064d8:	f7fa f824 	bl	8000524 <__aeabi_i2d>
 80064dc:	4622      	mov	r2, r4
 80064de:	462b      	mov	r3, r5
 80064e0:	f7fa faf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80064e4:	b900      	cbnz	r0, 80064e8 <_dtoa_r+0x168>
 80064e6:	3f01      	subs	r7, #1
 80064e8:	2f16      	cmp	r7, #22
 80064ea:	d852      	bhi.n	8006592 <_dtoa_r+0x212>
 80064ec:	4b5d      	ldr	r3, [pc, #372]	@ (8006664 <_dtoa_r+0x2e4>)
 80064ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80064fa:	f7fa faef 	bl	8000adc <__aeabi_dcmplt>
 80064fe:	2800      	cmp	r0, #0
 8006500:	d049      	beq.n	8006596 <_dtoa_r+0x216>
 8006502:	3f01      	subs	r7, #1
 8006504:	2300      	movs	r3, #0
 8006506:	9310      	str	r3, [sp, #64]	@ 0x40
 8006508:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800650a:	1b9b      	subs	r3, r3, r6
 800650c:	1e5a      	subs	r2, r3, #1
 800650e:	bf45      	ittet	mi
 8006510:	f1c3 0301 	rsbmi	r3, r3, #1
 8006514:	9300      	strmi	r3, [sp, #0]
 8006516:	2300      	movpl	r3, #0
 8006518:	2300      	movmi	r3, #0
 800651a:	9206      	str	r2, [sp, #24]
 800651c:	bf54      	ite	pl
 800651e:	9300      	strpl	r3, [sp, #0]
 8006520:	9306      	strmi	r3, [sp, #24]
 8006522:	2f00      	cmp	r7, #0
 8006524:	db39      	blt.n	800659a <_dtoa_r+0x21a>
 8006526:	9b06      	ldr	r3, [sp, #24]
 8006528:	970d      	str	r7, [sp, #52]	@ 0x34
 800652a:	443b      	add	r3, r7
 800652c:	9306      	str	r3, [sp, #24]
 800652e:	2300      	movs	r3, #0
 8006530:	9308      	str	r3, [sp, #32]
 8006532:	9b07      	ldr	r3, [sp, #28]
 8006534:	2b09      	cmp	r3, #9
 8006536:	d863      	bhi.n	8006600 <_dtoa_r+0x280>
 8006538:	2b05      	cmp	r3, #5
 800653a:	bfc4      	itt	gt
 800653c:	3b04      	subgt	r3, #4
 800653e:	9307      	strgt	r3, [sp, #28]
 8006540:	9b07      	ldr	r3, [sp, #28]
 8006542:	f1a3 0302 	sub.w	r3, r3, #2
 8006546:	bfcc      	ite	gt
 8006548:	2400      	movgt	r4, #0
 800654a:	2401      	movle	r4, #1
 800654c:	2b03      	cmp	r3, #3
 800654e:	d863      	bhi.n	8006618 <_dtoa_r+0x298>
 8006550:	e8df f003 	tbb	[pc, r3]
 8006554:	2b375452 	.word	0x2b375452
 8006558:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800655c:	441e      	add	r6, r3
 800655e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006562:	2b20      	cmp	r3, #32
 8006564:	bfc1      	itttt	gt
 8006566:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800656a:	409f      	lslgt	r7, r3
 800656c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006570:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006574:	bfd6      	itet	le
 8006576:	f1c3 0320 	rsble	r3, r3, #32
 800657a:	ea47 0003 	orrgt.w	r0, r7, r3
 800657e:	fa04 f003 	lslle.w	r0, r4, r3
 8006582:	f7f9 ffbf 	bl	8000504 <__aeabi_ui2d>
 8006586:	2201      	movs	r2, #1
 8006588:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800658c:	3e01      	subs	r6, #1
 800658e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006590:	e776      	b.n	8006480 <_dtoa_r+0x100>
 8006592:	2301      	movs	r3, #1
 8006594:	e7b7      	b.n	8006506 <_dtoa_r+0x186>
 8006596:	9010      	str	r0, [sp, #64]	@ 0x40
 8006598:	e7b6      	b.n	8006508 <_dtoa_r+0x188>
 800659a:	9b00      	ldr	r3, [sp, #0]
 800659c:	1bdb      	subs	r3, r3, r7
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	427b      	negs	r3, r7
 80065a2:	9308      	str	r3, [sp, #32]
 80065a4:	2300      	movs	r3, #0
 80065a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80065a8:	e7c3      	b.n	8006532 <_dtoa_r+0x1b2>
 80065aa:	2301      	movs	r3, #1
 80065ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80065ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80065b0:	eb07 0b03 	add.w	fp, r7, r3
 80065b4:	f10b 0301 	add.w	r3, fp, #1
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	9303      	str	r3, [sp, #12]
 80065bc:	bfb8      	it	lt
 80065be:	2301      	movlt	r3, #1
 80065c0:	e006      	b.n	80065d0 <_dtoa_r+0x250>
 80065c2:	2301      	movs	r3, #1
 80065c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80065c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	dd28      	ble.n	800661e <_dtoa_r+0x29e>
 80065cc:	469b      	mov	fp, r3
 80065ce:	9303      	str	r3, [sp, #12]
 80065d0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80065d4:	2100      	movs	r1, #0
 80065d6:	2204      	movs	r2, #4
 80065d8:	f102 0514 	add.w	r5, r2, #20
 80065dc:	429d      	cmp	r5, r3
 80065de:	d926      	bls.n	800662e <_dtoa_r+0x2ae>
 80065e0:	6041      	str	r1, [r0, #4]
 80065e2:	4648      	mov	r0, r9
 80065e4:	f000 fd9c 	bl	8007120 <_Balloc>
 80065e8:	4682      	mov	sl, r0
 80065ea:	2800      	cmp	r0, #0
 80065ec:	d142      	bne.n	8006674 <_dtoa_r+0x2f4>
 80065ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006668 <_dtoa_r+0x2e8>)
 80065f0:	4602      	mov	r2, r0
 80065f2:	f240 11af 	movw	r1, #431	@ 0x1af
 80065f6:	e6da      	b.n	80063ae <_dtoa_r+0x2e>
 80065f8:	2300      	movs	r3, #0
 80065fa:	e7e3      	b.n	80065c4 <_dtoa_r+0x244>
 80065fc:	2300      	movs	r3, #0
 80065fe:	e7d5      	b.n	80065ac <_dtoa_r+0x22c>
 8006600:	2401      	movs	r4, #1
 8006602:	2300      	movs	r3, #0
 8006604:	9307      	str	r3, [sp, #28]
 8006606:	9409      	str	r4, [sp, #36]	@ 0x24
 8006608:	f04f 3bff 	mov.w	fp, #4294967295
 800660c:	2200      	movs	r2, #0
 800660e:	f8cd b00c 	str.w	fp, [sp, #12]
 8006612:	2312      	movs	r3, #18
 8006614:	920c      	str	r2, [sp, #48]	@ 0x30
 8006616:	e7db      	b.n	80065d0 <_dtoa_r+0x250>
 8006618:	2301      	movs	r3, #1
 800661a:	9309      	str	r3, [sp, #36]	@ 0x24
 800661c:	e7f4      	b.n	8006608 <_dtoa_r+0x288>
 800661e:	f04f 0b01 	mov.w	fp, #1
 8006622:	f8cd b00c 	str.w	fp, [sp, #12]
 8006626:	465b      	mov	r3, fp
 8006628:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800662c:	e7d0      	b.n	80065d0 <_dtoa_r+0x250>
 800662e:	3101      	adds	r1, #1
 8006630:	0052      	lsls	r2, r2, #1
 8006632:	e7d1      	b.n	80065d8 <_dtoa_r+0x258>
 8006634:	f3af 8000 	nop.w
 8006638:	636f4361 	.word	0x636f4361
 800663c:	3fd287a7 	.word	0x3fd287a7
 8006640:	8b60c8b3 	.word	0x8b60c8b3
 8006644:	3fc68a28 	.word	0x3fc68a28
 8006648:	509f79fb 	.word	0x509f79fb
 800664c:	3fd34413 	.word	0x3fd34413
 8006650:	0800808d 	.word	0x0800808d
 8006654:	080080a4 	.word	0x080080a4
 8006658:	7ff00000 	.word	0x7ff00000
 800665c:	0800805d 	.word	0x0800805d
 8006660:	3ff80000 	.word	0x3ff80000
 8006664:	080081f8 	.word	0x080081f8
 8006668:	080080fc 	.word	0x080080fc
 800666c:	08008089 	.word	0x08008089
 8006670:	0800805c 	.word	0x0800805c
 8006674:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006678:	6018      	str	r0, [r3, #0]
 800667a:	9b03      	ldr	r3, [sp, #12]
 800667c:	2b0e      	cmp	r3, #14
 800667e:	f200 80a1 	bhi.w	80067c4 <_dtoa_r+0x444>
 8006682:	2c00      	cmp	r4, #0
 8006684:	f000 809e 	beq.w	80067c4 <_dtoa_r+0x444>
 8006688:	2f00      	cmp	r7, #0
 800668a:	dd33      	ble.n	80066f4 <_dtoa_r+0x374>
 800668c:	4b9c      	ldr	r3, [pc, #624]	@ (8006900 <_dtoa_r+0x580>)
 800668e:	f007 020f 	and.w	r2, r7, #15
 8006692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006696:	ed93 7b00 	vldr	d7, [r3]
 800669a:	05f8      	lsls	r0, r7, #23
 800669c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80066a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80066a4:	d516      	bpl.n	80066d4 <_dtoa_r+0x354>
 80066a6:	4b97      	ldr	r3, [pc, #604]	@ (8006904 <_dtoa_r+0x584>)
 80066a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80066ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066b0:	f7fa f8cc 	bl	800084c <__aeabi_ddiv>
 80066b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066b8:	f004 040f 	and.w	r4, r4, #15
 80066bc:	2603      	movs	r6, #3
 80066be:	4d91      	ldr	r5, [pc, #580]	@ (8006904 <_dtoa_r+0x584>)
 80066c0:	b954      	cbnz	r4, 80066d8 <_dtoa_r+0x358>
 80066c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80066c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066ca:	f7fa f8bf 	bl	800084c <__aeabi_ddiv>
 80066ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066d2:	e028      	b.n	8006726 <_dtoa_r+0x3a6>
 80066d4:	2602      	movs	r6, #2
 80066d6:	e7f2      	b.n	80066be <_dtoa_r+0x33e>
 80066d8:	07e1      	lsls	r1, r4, #31
 80066da:	d508      	bpl.n	80066ee <_dtoa_r+0x36e>
 80066dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80066e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066e4:	f7f9 ff88 	bl	80005f8 <__aeabi_dmul>
 80066e8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80066ec:	3601      	adds	r6, #1
 80066ee:	1064      	asrs	r4, r4, #1
 80066f0:	3508      	adds	r5, #8
 80066f2:	e7e5      	b.n	80066c0 <_dtoa_r+0x340>
 80066f4:	f000 80af 	beq.w	8006856 <_dtoa_r+0x4d6>
 80066f8:	427c      	negs	r4, r7
 80066fa:	4b81      	ldr	r3, [pc, #516]	@ (8006900 <_dtoa_r+0x580>)
 80066fc:	4d81      	ldr	r5, [pc, #516]	@ (8006904 <_dtoa_r+0x584>)
 80066fe:	f004 020f 	and.w	r2, r4, #15
 8006702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800670e:	f7f9 ff73 	bl	80005f8 <__aeabi_dmul>
 8006712:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006716:	1124      	asrs	r4, r4, #4
 8006718:	2300      	movs	r3, #0
 800671a:	2602      	movs	r6, #2
 800671c:	2c00      	cmp	r4, #0
 800671e:	f040 808f 	bne.w	8006840 <_dtoa_r+0x4c0>
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1d3      	bne.n	80066ce <_dtoa_r+0x34e>
 8006726:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006728:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 8094 	beq.w	800685a <_dtoa_r+0x4da>
 8006732:	4b75      	ldr	r3, [pc, #468]	@ (8006908 <_dtoa_r+0x588>)
 8006734:	2200      	movs	r2, #0
 8006736:	4620      	mov	r0, r4
 8006738:	4629      	mov	r1, r5
 800673a:	f7fa f9cf 	bl	8000adc <__aeabi_dcmplt>
 800673e:	2800      	cmp	r0, #0
 8006740:	f000 808b 	beq.w	800685a <_dtoa_r+0x4da>
 8006744:	9b03      	ldr	r3, [sp, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	f000 8087 	beq.w	800685a <_dtoa_r+0x4da>
 800674c:	f1bb 0f00 	cmp.w	fp, #0
 8006750:	dd34      	ble.n	80067bc <_dtoa_r+0x43c>
 8006752:	4620      	mov	r0, r4
 8006754:	4b6d      	ldr	r3, [pc, #436]	@ (800690c <_dtoa_r+0x58c>)
 8006756:	2200      	movs	r2, #0
 8006758:	4629      	mov	r1, r5
 800675a:	f7f9 ff4d 	bl	80005f8 <__aeabi_dmul>
 800675e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006762:	f107 38ff 	add.w	r8, r7, #4294967295
 8006766:	3601      	adds	r6, #1
 8006768:	465c      	mov	r4, fp
 800676a:	4630      	mov	r0, r6
 800676c:	f7f9 feda 	bl	8000524 <__aeabi_i2d>
 8006770:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006774:	f7f9 ff40 	bl	80005f8 <__aeabi_dmul>
 8006778:	4b65      	ldr	r3, [pc, #404]	@ (8006910 <_dtoa_r+0x590>)
 800677a:	2200      	movs	r2, #0
 800677c:	f7f9 fd86 	bl	800028c <__adddf3>
 8006780:	4605      	mov	r5, r0
 8006782:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006786:	2c00      	cmp	r4, #0
 8006788:	d16a      	bne.n	8006860 <_dtoa_r+0x4e0>
 800678a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800678e:	4b61      	ldr	r3, [pc, #388]	@ (8006914 <_dtoa_r+0x594>)
 8006790:	2200      	movs	r2, #0
 8006792:	f7f9 fd79 	bl	8000288 <__aeabi_dsub>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800679e:	462a      	mov	r2, r5
 80067a0:	4633      	mov	r3, r6
 80067a2:	f7fa f9b9 	bl	8000b18 <__aeabi_dcmpgt>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	f040 8298 	bne.w	8006cdc <_dtoa_r+0x95c>
 80067ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067b0:	462a      	mov	r2, r5
 80067b2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80067b6:	f7fa f991 	bl	8000adc <__aeabi_dcmplt>
 80067ba:	bb38      	cbnz	r0, 800680c <_dtoa_r+0x48c>
 80067bc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80067c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80067c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f2c0 8157 	blt.w	8006a7a <_dtoa_r+0x6fa>
 80067cc:	2f0e      	cmp	r7, #14
 80067ce:	f300 8154 	bgt.w	8006a7a <_dtoa_r+0x6fa>
 80067d2:	4b4b      	ldr	r3, [pc, #300]	@ (8006900 <_dtoa_r+0x580>)
 80067d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80067d8:	ed93 7b00 	vldr	d7, [r3]
 80067dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80067de:	2b00      	cmp	r3, #0
 80067e0:	ed8d 7b00 	vstr	d7, [sp]
 80067e4:	f280 80e5 	bge.w	80069b2 <_dtoa_r+0x632>
 80067e8:	9b03      	ldr	r3, [sp, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f300 80e1 	bgt.w	80069b2 <_dtoa_r+0x632>
 80067f0:	d10c      	bne.n	800680c <_dtoa_r+0x48c>
 80067f2:	4b48      	ldr	r3, [pc, #288]	@ (8006914 <_dtoa_r+0x594>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	ec51 0b17 	vmov	r0, r1, d7
 80067fa:	f7f9 fefd 	bl	80005f8 <__aeabi_dmul>
 80067fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006802:	f7fa f97f 	bl	8000b04 <__aeabi_dcmpge>
 8006806:	2800      	cmp	r0, #0
 8006808:	f000 8266 	beq.w	8006cd8 <_dtoa_r+0x958>
 800680c:	2400      	movs	r4, #0
 800680e:	4625      	mov	r5, r4
 8006810:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006812:	4656      	mov	r6, sl
 8006814:	ea6f 0803 	mvn.w	r8, r3
 8006818:	2700      	movs	r7, #0
 800681a:	4621      	mov	r1, r4
 800681c:	4648      	mov	r0, r9
 800681e:	f000 fcbf 	bl	80071a0 <_Bfree>
 8006822:	2d00      	cmp	r5, #0
 8006824:	f000 80bd 	beq.w	80069a2 <_dtoa_r+0x622>
 8006828:	b12f      	cbz	r7, 8006836 <_dtoa_r+0x4b6>
 800682a:	42af      	cmp	r7, r5
 800682c:	d003      	beq.n	8006836 <_dtoa_r+0x4b6>
 800682e:	4639      	mov	r1, r7
 8006830:	4648      	mov	r0, r9
 8006832:	f000 fcb5 	bl	80071a0 <_Bfree>
 8006836:	4629      	mov	r1, r5
 8006838:	4648      	mov	r0, r9
 800683a:	f000 fcb1 	bl	80071a0 <_Bfree>
 800683e:	e0b0      	b.n	80069a2 <_dtoa_r+0x622>
 8006840:	07e2      	lsls	r2, r4, #31
 8006842:	d505      	bpl.n	8006850 <_dtoa_r+0x4d0>
 8006844:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006848:	f7f9 fed6 	bl	80005f8 <__aeabi_dmul>
 800684c:	3601      	adds	r6, #1
 800684e:	2301      	movs	r3, #1
 8006850:	1064      	asrs	r4, r4, #1
 8006852:	3508      	adds	r5, #8
 8006854:	e762      	b.n	800671c <_dtoa_r+0x39c>
 8006856:	2602      	movs	r6, #2
 8006858:	e765      	b.n	8006726 <_dtoa_r+0x3a6>
 800685a:	9c03      	ldr	r4, [sp, #12]
 800685c:	46b8      	mov	r8, r7
 800685e:	e784      	b.n	800676a <_dtoa_r+0x3ea>
 8006860:	4b27      	ldr	r3, [pc, #156]	@ (8006900 <_dtoa_r+0x580>)
 8006862:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006864:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006868:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800686c:	4454      	add	r4, sl
 800686e:	2900      	cmp	r1, #0
 8006870:	d054      	beq.n	800691c <_dtoa_r+0x59c>
 8006872:	4929      	ldr	r1, [pc, #164]	@ (8006918 <_dtoa_r+0x598>)
 8006874:	2000      	movs	r0, #0
 8006876:	f7f9 ffe9 	bl	800084c <__aeabi_ddiv>
 800687a:	4633      	mov	r3, r6
 800687c:	462a      	mov	r2, r5
 800687e:	f7f9 fd03 	bl	8000288 <__aeabi_dsub>
 8006882:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006886:	4656      	mov	r6, sl
 8006888:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800688c:	f7fa f964 	bl	8000b58 <__aeabi_d2iz>
 8006890:	4605      	mov	r5, r0
 8006892:	f7f9 fe47 	bl	8000524 <__aeabi_i2d>
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800689e:	f7f9 fcf3 	bl	8000288 <__aeabi_dsub>
 80068a2:	3530      	adds	r5, #48	@ 0x30
 80068a4:	4602      	mov	r2, r0
 80068a6:	460b      	mov	r3, r1
 80068a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068ac:	f806 5b01 	strb.w	r5, [r6], #1
 80068b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80068b4:	f7fa f912 	bl	8000adc <__aeabi_dcmplt>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d172      	bne.n	80069a2 <_dtoa_r+0x622>
 80068bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068c0:	4911      	ldr	r1, [pc, #68]	@ (8006908 <_dtoa_r+0x588>)
 80068c2:	2000      	movs	r0, #0
 80068c4:	f7f9 fce0 	bl	8000288 <__aeabi_dsub>
 80068c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80068cc:	f7fa f906 	bl	8000adc <__aeabi_dcmplt>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	f040 80b4 	bne.w	8006a3e <_dtoa_r+0x6be>
 80068d6:	42a6      	cmp	r6, r4
 80068d8:	f43f af70 	beq.w	80067bc <_dtoa_r+0x43c>
 80068dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80068e0:	4b0a      	ldr	r3, [pc, #40]	@ (800690c <_dtoa_r+0x58c>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	f7f9 fe88 	bl	80005f8 <__aeabi_dmul>
 80068e8:	4b08      	ldr	r3, [pc, #32]	@ (800690c <_dtoa_r+0x58c>)
 80068ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80068ee:	2200      	movs	r2, #0
 80068f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068f4:	f7f9 fe80 	bl	80005f8 <__aeabi_dmul>
 80068f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068fc:	e7c4      	b.n	8006888 <_dtoa_r+0x508>
 80068fe:	bf00      	nop
 8006900:	080081f8 	.word	0x080081f8
 8006904:	080081d0 	.word	0x080081d0
 8006908:	3ff00000 	.word	0x3ff00000
 800690c:	40240000 	.word	0x40240000
 8006910:	401c0000 	.word	0x401c0000
 8006914:	40140000 	.word	0x40140000
 8006918:	3fe00000 	.word	0x3fe00000
 800691c:	4631      	mov	r1, r6
 800691e:	4628      	mov	r0, r5
 8006920:	f7f9 fe6a 	bl	80005f8 <__aeabi_dmul>
 8006924:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006928:	9413      	str	r4, [sp, #76]	@ 0x4c
 800692a:	4656      	mov	r6, sl
 800692c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006930:	f7fa f912 	bl	8000b58 <__aeabi_d2iz>
 8006934:	4605      	mov	r5, r0
 8006936:	f7f9 fdf5 	bl	8000524 <__aeabi_i2d>
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006942:	f7f9 fca1 	bl	8000288 <__aeabi_dsub>
 8006946:	3530      	adds	r5, #48	@ 0x30
 8006948:	f806 5b01 	strb.w	r5, [r6], #1
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	42a6      	cmp	r6, r4
 8006952:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006956:	f04f 0200 	mov.w	r2, #0
 800695a:	d124      	bne.n	80069a6 <_dtoa_r+0x626>
 800695c:	4baf      	ldr	r3, [pc, #700]	@ (8006c1c <_dtoa_r+0x89c>)
 800695e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006962:	f7f9 fc93 	bl	800028c <__adddf3>
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800696e:	f7fa f8d3 	bl	8000b18 <__aeabi_dcmpgt>
 8006972:	2800      	cmp	r0, #0
 8006974:	d163      	bne.n	8006a3e <_dtoa_r+0x6be>
 8006976:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800697a:	49a8      	ldr	r1, [pc, #672]	@ (8006c1c <_dtoa_r+0x89c>)
 800697c:	2000      	movs	r0, #0
 800697e:	f7f9 fc83 	bl	8000288 <__aeabi_dsub>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800698a:	f7fa f8a7 	bl	8000adc <__aeabi_dcmplt>
 800698e:	2800      	cmp	r0, #0
 8006990:	f43f af14 	beq.w	80067bc <_dtoa_r+0x43c>
 8006994:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006996:	1e73      	subs	r3, r6, #1
 8006998:	9313      	str	r3, [sp, #76]	@ 0x4c
 800699a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800699e:	2b30      	cmp	r3, #48	@ 0x30
 80069a0:	d0f8      	beq.n	8006994 <_dtoa_r+0x614>
 80069a2:	4647      	mov	r7, r8
 80069a4:	e03b      	b.n	8006a1e <_dtoa_r+0x69e>
 80069a6:	4b9e      	ldr	r3, [pc, #632]	@ (8006c20 <_dtoa_r+0x8a0>)
 80069a8:	f7f9 fe26 	bl	80005f8 <__aeabi_dmul>
 80069ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069b0:	e7bc      	b.n	800692c <_dtoa_r+0x5ac>
 80069b2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80069b6:	4656      	mov	r6, sl
 80069b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069bc:	4620      	mov	r0, r4
 80069be:	4629      	mov	r1, r5
 80069c0:	f7f9 ff44 	bl	800084c <__aeabi_ddiv>
 80069c4:	f7fa f8c8 	bl	8000b58 <__aeabi_d2iz>
 80069c8:	4680      	mov	r8, r0
 80069ca:	f7f9 fdab 	bl	8000524 <__aeabi_i2d>
 80069ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069d2:	f7f9 fe11 	bl	80005f8 <__aeabi_dmul>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	4620      	mov	r0, r4
 80069dc:	4629      	mov	r1, r5
 80069de:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80069e2:	f7f9 fc51 	bl	8000288 <__aeabi_dsub>
 80069e6:	f806 4b01 	strb.w	r4, [r6], #1
 80069ea:	9d03      	ldr	r5, [sp, #12]
 80069ec:	eba6 040a 	sub.w	r4, r6, sl
 80069f0:	42a5      	cmp	r5, r4
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	d133      	bne.n	8006a60 <_dtoa_r+0x6e0>
 80069f8:	f7f9 fc48 	bl	800028c <__adddf3>
 80069fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a00:	4604      	mov	r4, r0
 8006a02:	460d      	mov	r5, r1
 8006a04:	f7fa f888 	bl	8000b18 <__aeabi_dcmpgt>
 8006a08:	b9c0      	cbnz	r0, 8006a3c <_dtoa_r+0x6bc>
 8006a0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a0e:	4620      	mov	r0, r4
 8006a10:	4629      	mov	r1, r5
 8006a12:	f7fa f859 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a16:	b110      	cbz	r0, 8006a1e <_dtoa_r+0x69e>
 8006a18:	f018 0f01 	tst.w	r8, #1
 8006a1c:	d10e      	bne.n	8006a3c <_dtoa_r+0x6bc>
 8006a1e:	9902      	ldr	r1, [sp, #8]
 8006a20:	4648      	mov	r0, r9
 8006a22:	f000 fbbd 	bl	80071a0 <_Bfree>
 8006a26:	2300      	movs	r3, #0
 8006a28:	7033      	strb	r3, [r6, #0]
 8006a2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006a2c:	3701      	adds	r7, #1
 8006a2e:	601f      	str	r7, [r3, #0]
 8006a30:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 824b 	beq.w	8006ece <_dtoa_r+0xb4e>
 8006a38:	601e      	str	r6, [r3, #0]
 8006a3a:	e248      	b.n	8006ece <_dtoa_r+0xb4e>
 8006a3c:	46b8      	mov	r8, r7
 8006a3e:	4633      	mov	r3, r6
 8006a40:	461e      	mov	r6, r3
 8006a42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a46:	2a39      	cmp	r2, #57	@ 0x39
 8006a48:	d106      	bne.n	8006a58 <_dtoa_r+0x6d8>
 8006a4a:	459a      	cmp	sl, r3
 8006a4c:	d1f8      	bne.n	8006a40 <_dtoa_r+0x6c0>
 8006a4e:	2230      	movs	r2, #48	@ 0x30
 8006a50:	f108 0801 	add.w	r8, r8, #1
 8006a54:	f88a 2000 	strb.w	r2, [sl]
 8006a58:	781a      	ldrb	r2, [r3, #0]
 8006a5a:	3201      	adds	r2, #1
 8006a5c:	701a      	strb	r2, [r3, #0]
 8006a5e:	e7a0      	b.n	80069a2 <_dtoa_r+0x622>
 8006a60:	4b6f      	ldr	r3, [pc, #444]	@ (8006c20 <_dtoa_r+0x8a0>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	f7f9 fdc8 	bl	80005f8 <__aeabi_dmul>
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	460d      	mov	r5, r1
 8006a70:	f7fa f82a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d09f      	beq.n	80069b8 <_dtoa_r+0x638>
 8006a78:	e7d1      	b.n	8006a1e <_dtoa_r+0x69e>
 8006a7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a7c:	2a00      	cmp	r2, #0
 8006a7e:	f000 80ea 	beq.w	8006c56 <_dtoa_r+0x8d6>
 8006a82:	9a07      	ldr	r2, [sp, #28]
 8006a84:	2a01      	cmp	r2, #1
 8006a86:	f300 80cd 	bgt.w	8006c24 <_dtoa_r+0x8a4>
 8006a8a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006a8c:	2a00      	cmp	r2, #0
 8006a8e:	f000 80c1 	beq.w	8006c14 <_dtoa_r+0x894>
 8006a92:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006a96:	9c08      	ldr	r4, [sp, #32]
 8006a98:	9e00      	ldr	r6, [sp, #0]
 8006a9a:	9a00      	ldr	r2, [sp, #0]
 8006a9c:	441a      	add	r2, r3
 8006a9e:	9200      	str	r2, [sp, #0]
 8006aa0:	9a06      	ldr	r2, [sp, #24]
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	441a      	add	r2, r3
 8006aa6:	4648      	mov	r0, r9
 8006aa8:	9206      	str	r2, [sp, #24]
 8006aaa:	f000 fc2d 	bl	8007308 <__i2b>
 8006aae:	4605      	mov	r5, r0
 8006ab0:	b166      	cbz	r6, 8006acc <_dtoa_r+0x74c>
 8006ab2:	9b06      	ldr	r3, [sp, #24]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	dd09      	ble.n	8006acc <_dtoa_r+0x74c>
 8006ab8:	42b3      	cmp	r3, r6
 8006aba:	9a00      	ldr	r2, [sp, #0]
 8006abc:	bfa8      	it	ge
 8006abe:	4633      	movge	r3, r6
 8006ac0:	1ad2      	subs	r2, r2, r3
 8006ac2:	9200      	str	r2, [sp, #0]
 8006ac4:	9a06      	ldr	r2, [sp, #24]
 8006ac6:	1af6      	subs	r6, r6, r3
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	9306      	str	r3, [sp, #24]
 8006acc:	9b08      	ldr	r3, [sp, #32]
 8006ace:	b30b      	cbz	r3, 8006b14 <_dtoa_r+0x794>
 8006ad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f000 80c6 	beq.w	8006c64 <_dtoa_r+0x8e4>
 8006ad8:	2c00      	cmp	r4, #0
 8006ada:	f000 80c0 	beq.w	8006c5e <_dtoa_r+0x8de>
 8006ade:	4629      	mov	r1, r5
 8006ae0:	4622      	mov	r2, r4
 8006ae2:	4648      	mov	r0, r9
 8006ae4:	f000 fcc8 	bl	8007478 <__pow5mult>
 8006ae8:	9a02      	ldr	r2, [sp, #8]
 8006aea:	4601      	mov	r1, r0
 8006aec:	4605      	mov	r5, r0
 8006aee:	4648      	mov	r0, r9
 8006af0:	f000 fc20 	bl	8007334 <__multiply>
 8006af4:	9902      	ldr	r1, [sp, #8]
 8006af6:	4680      	mov	r8, r0
 8006af8:	4648      	mov	r0, r9
 8006afa:	f000 fb51 	bl	80071a0 <_Bfree>
 8006afe:	9b08      	ldr	r3, [sp, #32]
 8006b00:	1b1b      	subs	r3, r3, r4
 8006b02:	9308      	str	r3, [sp, #32]
 8006b04:	f000 80b1 	beq.w	8006c6a <_dtoa_r+0x8ea>
 8006b08:	9a08      	ldr	r2, [sp, #32]
 8006b0a:	4641      	mov	r1, r8
 8006b0c:	4648      	mov	r0, r9
 8006b0e:	f000 fcb3 	bl	8007478 <__pow5mult>
 8006b12:	9002      	str	r0, [sp, #8]
 8006b14:	2101      	movs	r1, #1
 8006b16:	4648      	mov	r0, r9
 8006b18:	f000 fbf6 	bl	8007308 <__i2b>
 8006b1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b1e:	4604      	mov	r4, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 81d8 	beq.w	8006ed6 <_dtoa_r+0xb56>
 8006b26:	461a      	mov	r2, r3
 8006b28:	4601      	mov	r1, r0
 8006b2a:	4648      	mov	r0, r9
 8006b2c:	f000 fca4 	bl	8007478 <__pow5mult>
 8006b30:	9b07      	ldr	r3, [sp, #28]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	4604      	mov	r4, r0
 8006b36:	f300 809f 	bgt.w	8006c78 <_dtoa_r+0x8f8>
 8006b3a:	9b04      	ldr	r3, [sp, #16]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f040 8097 	bne.w	8006c70 <_dtoa_r+0x8f0>
 8006b42:	9b05      	ldr	r3, [sp, #20]
 8006b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f040 8093 	bne.w	8006c74 <_dtoa_r+0x8f4>
 8006b4e:	9b05      	ldr	r3, [sp, #20]
 8006b50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b54:	0d1b      	lsrs	r3, r3, #20
 8006b56:	051b      	lsls	r3, r3, #20
 8006b58:	b133      	cbz	r3, 8006b68 <_dtoa_r+0x7e8>
 8006b5a:	9b00      	ldr	r3, [sp, #0]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	9b06      	ldr	r3, [sp, #24]
 8006b62:	3301      	adds	r3, #1
 8006b64:	9306      	str	r3, [sp, #24]
 8006b66:	2301      	movs	r3, #1
 8006b68:	9308      	str	r3, [sp, #32]
 8006b6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 81b8 	beq.w	8006ee2 <_dtoa_r+0xb62>
 8006b72:	6923      	ldr	r3, [r4, #16]
 8006b74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b78:	6918      	ldr	r0, [r3, #16]
 8006b7a:	f000 fb79 	bl	8007270 <__hi0bits>
 8006b7e:	f1c0 0020 	rsb	r0, r0, #32
 8006b82:	9b06      	ldr	r3, [sp, #24]
 8006b84:	4418      	add	r0, r3
 8006b86:	f010 001f 	ands.w	r0, r0, #31
 8006b8a:	f000 8082 	beq.w	8006c92 <_dtoa_r+0x912>
 8006b8e:	f1c0 0320 	rsb	r3, r0, #32
 8006b92:	2b04      	cmp	r3, #4
 8006b94:	dd73      	ble.n	8006c7e <_dtoa_r+0x8fe>
 8006b96:	9b00      	ldr	r3, [sp, #0]
 8006b98:	f1c0 001c 	rsb	r0, r0, #28
 8006b9c:	4403      	add	r3, r0
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	9b06      	ldr	r3, [sp, #24]
 8006ba2:	4403      	add	r3, r0
 8006ba4:	4406      	add	r6, r0
 8006ba6:	9306      	str	r3, [sp, #24]
 8006ba8:	9b00      	ldr	r3, [sp, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	dd05      	ble.n	8006bba <_dtoa_r+0x83a>
 8006bae:	9902      	ldr	r1, [sp, #8]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	4648      	mov	r0, r9
 8006bb4:	f000 fcba 	bl	800752c <__lshift>
 8006bb8:	9002      	str	r0, [sp, #8]
 8006bba:	9b06      	ldr	r3, [sp, #24]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	dd05      	ble.n	8006bcc <_dtoa_r+0x84c>
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	4648      	mov	r0, r9
 8006bc6:	f000 fcb1 	bl	800752c <__lshift>
 8006bca:	4604      	mov	r4, r0
 8006bcc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d061      	beq.n	8006c96 <_dtoa_r+0x916>
 8006bd2:	9802      	ldr	r0, [sp, #8]
 8006bd4:	4621      	mov	r1, r4
 8006bd6:	f000 fd15 	bl	8007604 <__mcmp>
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	da5b      	bge.n	8006c96 <_dtoa_r+0x916>
 8006bde:	2300      	movs	r3, #0
 8006be0:	9902      	ldr	r1, [sp, #8]
 8006be2:	220a      	movs	r2, #10
 8006be4:	4648      	mov	r0, r9
 8006be6:	f000 fafd 	bl	80071e4 <__multadd>
 8006bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bec:	9002      	str	r0, [sp, #8]
 8006bee:	f107 38ff 	add.w	r8, r7, #4294967295
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f000 8177 	beq.w	8006ee6 <_dtoa_r+0xb66>
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	220a      	movs	r2, #10
 8006bfe:	4648      	mov	r0, r9
 8006c00:	f000 faf0 	bl	80071e4 <__multadd>
 8006c04:	f1bb 0f00 	cmp.w	fp, #0
 8006c08:	4605      	mov	r5, r0
 8006c0a:	dc6f      	bgt.n	8006cec <_dtoa_r+0x96c>
 8006c0c:	9b07      	ldr	r3, [sp, #28]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	dc49      	bgt.n	8006ca6 <_dtoa_r+0x926>
 8006c12:	e06b      	b.n	8006cec <_dtoa_r+0x96c>
 8006c14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006c1a:	e73c      	b.n	8006a96 <_dtoa_r+0x716>
 8006c1c:	3fe00000 	.word	0x3fe00000
 8006c20:	40240000 	.word	0x40240000
 8006c24:	9b03      	ldr	r3, [sp, #12]
 8006c26:	1e5c      	subs	r4, r3, #1
 8006c28:	9b08      	ldr	r3, [sp, #32]
 8006c2a:	42a3      	cmp	r3, r4
 8006c2c:	db09      	blt.n	8006c42 <_dtoa_r+0x8c2>
 8006c2e:	1b1c      	subs	r4, r3, r4
 8006c30:	9b03      	ldr	r3, [sp, #12]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f6bf af30 	bge.w	8006a98 <_dtoa_r+0x718>
 8006c38:	9b00      	ldr	r3, [sp, #0]
 8006c3a:	9a03      	ldr	r2, [sp, #12]
 8006c3c:	1a9e      	subs	r6, r3, r2
 8006c3e:	2300      	movs	r3, #0
 8006c40:	e72b      	b.n	8006a9a <_dtoa_r+0x71a>
 8006c42:	9b08      	ldr	r3, [sp, #32]
 8006c44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006c46:	9408      	str	r4, [sp, #32]
 8006c48:	1ae3      	subs	r3, r4, r3
 8006c4a:	441a      	add	r2, r3
 8006c4c:	9e00      	ldr	r6, [sp, #0]
 8006c4e:	9b03      	ldr	r3, [sp, #12]
 8006c50:	920d      	str	r2, [sp, #52]	@ 0x34
 8006c52:	2400      	movs	r4, #0
 8006c54:	e721      	b.n	8006a9a <_dtoa_r+0x71a>
 8006c56:	9c08      	ldr	r4, [sp, #32]
 8006c58:	9e00      	ldr	r6, [sp, #0]
 8006c5a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006c5c:	e728      	b.n	8006ab0 <_dtoa_r+0x730>
 8006c5e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006c62:	e751      	b.n	8006b08 <_dtoa_r+0x788>
 8006c64:	9a08      	ldr	r2, [sp, #32]
 8006c66:	9902      	ldr	r1, [sp, #8]
 8006c68:	e750      	b.n	8006b0c <_dtoa_r+0x78c>
 8006c6a:	f8cd 8008 	str.w	r8, [sp, #8]
 8006c6e:	e751      	b.n	8006b14 <_dtoa_r+0x794>
 8006c70:	2300      	movs	r3, #0
 8006c72:	e779      	b.n	8006b68 <_dtoa_r+0x7e8>
 8006c74:	9b04      	ldr	r3, [sp, #16]
 8006c76:	e777      	b.n	8006b68 <_dtoa_r+0x7e8>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	9308      	str	r3, [sp, #32]
 8006c7c:	e779      	b.n	8006b72 <_dtoa_r+0x7f2>
 8006c7e:	d093      	beq.n	8006ba8 <_dtoa_r+0x828>
 8006c80:	9a00      	ldr	r2, [sp, #0]
 8006c82:	331c      	adds	r3, #28
 8006c84:	441a      	add	r2, r3
 8006c86:	9200      	str	r2, [sp, #0]
 8006c88:	9a06      	ldr	r2, [sp, #24]
 8006c8a:	441a      	add	r2, r3
 8006c8c:	441e      	add	r6, r3
 8006c8e:	9206      	str	r2, [sp, #24]
 8006c90:	e78a      	b.n	8006ba8 <_dtoa_r+0x828>
 8006c92:	4603      	mov	r3, r0
 8006c94:	e7f4      	b.n	8006c80 <_dtoa_r+0x900>
 8006c96:	9b03      	ldr	r3, [sp, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	46b8      	mov	r8, r7
 8006c9c:	dc20      	bgt.n	8006ce0 <_dtoa_r+0x960>
 8006c9e:	469b      	mov	fp, r3
 8006ca0:	9b07      	ldr	r3, [sp, #28]
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	dd1e      	ble.n	8006ce4 <_dtoa_r+0x964>
 8006ca6:	f1bb 0f00 	cmp.w	fp, #0
 8006caa:	f47f adb1 	bne.w	8006810 <_dtoa_r+0x490>
 8006cae:	4621      	mov	r1, r4
 8006cb0:	465b      	mov	r3, fp
 8006cb2:	2205      	movs	r2, #5
 8006cb4:	4648      	mov	r0, r9
 8006cb6:	f000 fa95 	bl	80071e4 <__multadd>
 8006cba:	4601      	mov	r1, r0
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	9802      	ldr	r0, [sp, #8]
 8006cc0:	f000 fca0 	bl	8007604 <__mcmp>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	f77f ada3 	ble.w	8006810 <_dtoa_r+0x490>
 8006cca:	4656      	mov	r6, sl
 8006ccc:	2331      	movs	r3, #49	@ 0x31
 8006cce:	f806 3b01 	strb.w	r3, [r6], #1
 8006cd2:	f108 0801 	add.w	r8, r8, #1
 8006cd6:	e59f      	b.n	8006818 <_dtoa_r+0x498>
 8006cd8:	9c03      	ldr	r4, [sp, #12]
 8006cda:	46b8      	mov	r8, r7
 8006cdc:	4625      	mov	r5, r4
 8006cde:	e7f4      	b.n	8006cca <_dtoa_r+0x94a>
 8006ce0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 8101 	beq.w	8006eee <_dtoa_r+0xb6e>
 8006cec:	2e00      	cmp	r6, #0
 8006cee:	dd05      	ble.n	8006cfc <_dtoa_r+0x97c>
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	4632      	mov	r2, r6
 8006cf4:	4648      	mov	r0, r9
 8006cf6:	f000 fc19 	bl	800752c <__lshift>
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	9b08      	ldr	r3, [sp, #32]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d05c      	beq.n	8006dbc <_dtoa_r+0xa3c>
 8006d02:	6869      	ldr	r1, [r5, #4]
 8006d04:	4648      	mov	r0, r9
 8006d06:	f000 fa0b 	bl	8007120 <_Balloc>
 8006d0a:	4606      	mov	r6, r0
 8006d0c:	b928      	cbnz	r0, 8006d1a <_dtoa_r+0x99a>
 8006d0e:	4b82      	ldr	r3, [pc, #520]	@ (8006f18 <_dtoa_r+0xb98>)
 8006d10:	4602      	mov	r2, r0
 8006d12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006d16:	f7ff bb4a 	b.w	80063ae <_dtoa_r+0x2e>
 8006d1a:	692a      	ldr	r2, [r5, #16]
 8006d1c:	3202      	adds	r2, #2
 8006d1e:	0092      	lsls	r2, r2, #2
 8006d20:	f105 010c 	add.w	r1, r5, #12
 8006d24:	300c      	adds	r0, #12
 8006d26:	f001 f807 	bl	8007d38 <memcpy>
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	4631      	mov	r1, r6
 8006d2e:	4648      	mov	r0, r9
 8006d30:	f000 fbfc 	bl	800752c <__lshift>
 8006d34:	f10a 0301 	add.w	r3, sl, #1
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	eb0a 030b 	add.w	r3, sl, fp
 8006d3e:	9308      	str	r3, [sp, #32]
 8006d40:	9b04      	ldr	r3, [sp, #16]
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	462f      	mov	r7, r5
 8006d48:	9306      	str	r3, [sp, #24]
 8006d4a:	4605      	mov	r5, r0
 8006d4c:	9b00      	ldr	r3, [sp, #0]
 8006d4e:	9802      	ldr	r0, [sp, #8]
 8006d50:	4621      	mov	r1, r4
 8006d52:	f103 3bff 	add.w	fp, r3, #4294967295
 8006d56:	f7ff fa8a 	bl	800626e <quorem>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	3330      	adds	r3, #48	@ 0x30
 8006d5e:	9003      	str	r0, [sp, #12]
 8006d60:	4639      	mov	r1, r7
 8006d62:	9802      	ldr	r0, [sp, #8]
 8006d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d66:	f000 fc4d 	bl	8007604 <__mcmp>
 8006d6a:	462a      	mov	r2, r5
 8006d6c:	9004      	str	r0, [sp, #16]
 8006d6e:	4621      	mov	r1, r4
 8006d70:	4648      	mov	r0, r9
 8006d72:	f000 fc63 	bl	800763c <__mdiff>
 8006d76:	68c2      	ldr	r2, [r0, #12]
 8006d78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d7a:	4606      	mov	r6, r0
 8006d7c:	bb02      	cbnz	r2, 8006dc0 <_dtoa_r+0xa40>
 8006d7e:	4601      	mov	r1, r0
 8006d80:	9802      	ldr	r0, [sp, #8]
 8006d82:	f000 fc3f 	bl	8007604 <__mcmp>
 8006d86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d88:	4602      	mov	r2, r0
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	4648      	mov	r0, r9
 8006d8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006d90:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d92:	f000 fa05 	bl	80071a0 <_Bfree>
 8006d96:	9b07      	ldr	r3, [sp, #28]
 8006d98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006d9a:	9e00      	ldr	r6, [sp, #0]
 8006d9c:	ea42 0103 	orr.w	r1, r2, r3
 8006da0:	9b06      	ldr	r3, [sp, #24]
 8006da2:	4319      	orrs	r1, r3
 8006da4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006da6:	d10d      	bne.n	8006dc4 <_dtoa_r+0xa44>
 8006da8:	2b39      	cmp	r3, #57	@ 0x39
 8006daa:	d027      	beq.n	8006dfc <_dtoa_r+0xa7c>
 8006dac:	9a04      	ldr	r2, [sp, #16]
 8006dae:	2a00      	cmp	r2, #0
 8006db0:	dd01      	ble.n	8006db6 <_dtoa_r+0xa36>
 8006db2:	9b03      	ldr	r3, [sp, #12]
 8006db4:	3331      	adds	r3, #49	@ 0x31
 8006db6:	f88b 3000 	strb.w	r3, [fp]
 8006dba:	e52e      	b.n	800681a <_dtoa_r+0x49a>
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	e7b9      	b.n	8006d34 <_dtoa_r+0x9b4>
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	e7e2      	b.n	8006d8a <_dtoa_r+0xa0a>
 8006dc4:	9904      	ldr	r1, [sp, #16]
 8006dc6:	2900      	cmp	r1, #0
 8006dc8:	db04      	blt.n	8006dd4 <_dtoa_r+0xa54>
 8006dca:	9807      	ldr	r0, [sp, #28]
 8006dcc:	4301      	orrs	r1, r0
 8006dce:	9806      	ldr	r0, [sp, #24]
 8006dd0:	4301      	orrs	r1, r0
 8006dd2:	d120      	bne.n	8006e16 <_dtoa_r+0xa96>
 8006dd4:	2a00      	cmp	r2, #0
 8006dd6:	ddee      	ble.n	8006db6 <_dtoa_r+0xa36>
 8006dd8:	9902      	ldr	r1, [sp, #8]
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	4648      	mov	r0, r9
 8006de0:	f000 fba4 	bl	800752c <__lshift>
 8006de4:	4621      	mov	r1, r4
 8006de6:	9002      	str	r0, [sp, #8]
 8006de8:	f000 fc0c 	bl	8007604 <__mcmp>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	9b00      	ldr	r3, [sp, #0]
 8006df0:	dc02      	bgt.n	8006df8 <_dtoa_r+0xa78>
 8006df2:	d1e0      	bne.n	8006db6 <_dtoa_r+0xa36>
 8006df4:	07da      	lsls	r2, r3, #31
 8006df6:	d5de      	bpl.n	8006db6 <_dtoa_r+0xa36>
 8006df8:	2b39      	cmp	r3, #57	@ 0x39
 8006dfa:	d1da      	bne.n	8006db2 <_dtoa_r+0xa32>
 8006dfc:	2339      	movs	r3, #57	@ 0x39
 8006dfe:	f88b 3000 	strb.w	r3, [fp]
 8006e02:	4633      	mov	r3, r6
 8006e04:	461e      	mov	r6, r3
 8006e06:	3b01      	subs	r3, #1
 8006e08:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006e0c:	2a39      	cmp	r2, #57	@ 0x39
 8006e0e:	d04e      	beq.n	8006eae <_dtoa_r+0xb2e>
 8006e10:	3201      	adds	r2, #1
 8006e12:	701a      	strb	r2, [r3, #0]
 8006e14:	e501      	b.n	800681a <_dtoa_r+0x49a>
 8006e16:	2a00      	cmp	r2, #0
 8006e18:	dd03      	ble.n	8006e22 <_dtoa_r+0xaa2>
 8006e1a:	2b39      	cmp	r3, #57	@ 0x39
 8006e1c:	d0ee      	beq.n	8006dfc <_dtoa_r+0xa7c>
 8006e1e:	3301      	adds	r3, #1
 8006e20:	e7c9      	b.n	8006db6 <_dtoa_r+0xa36>
 8006e22:	9a00      	ldr	r2, [sp, #0]
 8006e24:	9908      	ldr	r1, [sp, #32]
 8006e26:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006e2a:	428a      	cmp	r2, r1
 8006e2c:	d028      	beq.n	8006e80 <_dtoa_r+0xb00>
 8006e2e:	9902      	ldr	r1, [sp, #8]
 8006e30:	2300      	movs	r3, #0
 8006e32:	220a      	movs	r2, #10
 8006e34:	4648      	mov	r0, r9
 8006e36:	f000 f9d5 	bl	80071e4 <__multadd>
 8006e3a:	42af      	cmp	r7, r5
 8006e3c:	9002      	str	r0, [sp, #8]
 8006e3e:	f04f 0300 	mov.w	r3, #0
 8006e42:	f04f 020a 	mov.w	r2, #10
 8006e46:	4639      	mov	r1, r7
 8006e48:	4648      	mov	r0, r9
 8006e4a:	d107      	bne.n	8006e5c <_dtoa_r+0xadc>
 8006e4c:	f000 f9ca 	bl	80071e4 <__multadd>
 8006e50:	4607      	mov	r7, r0
 8006e52:	4605      	mov	r5, r0
 8006e54:	9b00      	ldr	r3, [sp, #0]
 8006e56:	3301      	adds	r3, #1
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	e777      	b.n	8006d4c <_dtoa_r+0x9cc>
 8006e5c:	f000 f9c2 	bl	80071e4 <__multadd>
 8006e60:	4629      	mov	r1, r5
 8006e62:	4607      	mov	r7, r0
 8006e64:	2300      	movs	r3, #0
 8006e66:	220a      	movs	r2, #10
 8006e68:	4648      	mov	r0, r9
 8006e6a:	f000 f9bb 	bl	80071e4 <__multadd>
 8006e6e:	4605      	mov	r5, r0
 8006e70:	e7f0      	b.n	8006e54 <_dtoa_r+0xad4>
 8006e72:	f1bb 0f00 	cmp.w	fp, #0
 8006e76:	bfcc      	ite	gt
 8006e78:	465e      	movgt	r6, fp
 8006e7a:	2601      	movle	r6, #1
 8006e7c:	4456      	add	r6, sl
 8006e7e:	2700      	movs	r7, #0
 8006e80:	9902      	ldr	r1, [sp, #8]
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	2201      	movs	r2, #1
 8006e86:	4648      	mov	r0, r9
 8006e88:	f000 fb50 	bl	800752c <__lshift>
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	9002      	str	r0, [sp, #8]
 8006e90:	f000 fbb8 	bl	8007604 <__mcmp>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	dcb4      	bgt.n	8006e02 <_dtoa_r+0xa82>
 8006e98:	d102      	bne.n	8006ea0 <_dtoa_r+0xb20>
 8006e9a:	9b00      	ldr	r3, [sp, #0]
 8006e9c:	07db      	lsls	r3, r3, #31
 8006e9e:	d4b0      	bmi.n	8006e02 <_dtoa_r+0xa82>
 8006ea0:	4633      	mov	r3, r6
 8006ea2:	461e      	mov	r6, r3
 8006ea4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ea8:	2a30      	cmp	r2, #48	@ 0x30
 8006eaa:	d0fa      	beq.n	8006ea2 <_dtoa_r+0xb22>
 8006eac:	e4b5      	b.n	800681a <_dtoa_r+0x49a>
 8006eae:	459a      	cmp	sl, r3
 8006eb0:	d1a8      	bne.n	8006e04 <_dtoa_r+0xa84>
 8006eb2:	2331      	movs	r3, #49	@ 0x31
 8006eb4:	f108 0801 	add.w	r8, r8, #1
 8006eb8:	f88a 3000 	strb.w	r3, [sl]
 8006ebc:	e4ad      	b.n	800681a <_dtoa_r+0x49a>
 8006ebe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ec0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006f1c <_dtoa_r+0xb9c>
 8006ec4:	b11b      	cbz	r3, 8006ece <_dtoa_r+0xb4e>
 8006ec6:	f10a 0308 	add.w	r3, sl, #8
 8006eca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006ecc:	6013      	str	r3, [r2, #0]
 8006ece:	4650      	mov	r0, sl
 8006ed0:	b017      	add	sp, #92	@ 0x5c
 8006ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed6:	9b07      	ldr	r3, [sp, #28]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	f77f ae2e 	ble.w	8006b3a <_dtoa_r+0x7ba>
 8006ede:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ee0:	9308      	str	r3, [sp, #32]
 8006ee2:	2001      	movs	r0, #1
 8006ee4:	e64d      	b.n	8006b82 <_dtoa_r+0x802>
 8006ee6:	f1bb 0f00 	cmp.w	fp, #0
 8006eea:	f77f aed9 	ble.w	8006ca0 <_dtoa_r+0x920>
 8006eee:	4656      	mov	r6, sl
 8006ef0:	9802      	ldr	r0, [sp, #8]
 8006ef2:	4621      	mov	r1, r4
 8006ef4:	f7ff f9bb 	bl	800626e <quorem>
 8006ef8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006efc:	f806 3b01 	strb.w	r3, [r6], #1
 8006f00:	eba6 020a 	sub.w	r2, r6, sl
 8006f04:	4593      	cmp	fp, r2
 8006f06:	ddb4      	ble.n	8006e72 <_dtoa_r+0xaf2>
 8006f08:	9902      	ldr	r1, [sp, #8]
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	220a      	movs	r2, #10
 8006f0e:	4648      	mov	r0, r9
 8006f10:	f000 f968 	bl	80071e4 <__multadd>
 8006f14:	9002      	str	r0, [sp, #8]
 8006f16:	e7eb      	b.n	8006ef0 <_dtoa_r+0xb70>
 8006f18:	080080fc 	.word	0x080080fc
 8006f1c:	08008080 	.word	0x08008080

08006f20 <_free_r>:
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	4605      	mov	r5, r0
 8006f24:	2900      	cmp	r1, #0
 8006f26:	d041      	beq.n	8006fac <_free_r+0x8c>
 8006f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f2c:	1f0c      	subs	r4, r1, #4
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bfb8      	it	lt
 8006f32:	18e4      	addlt	r4, r4, r3
 8006f34:	f000 f8e8 	bl	8007108 <__malloc_lock>
 8006f38:	4a1d      	ldr	r2, [pc, #116]	@ (8006fb0 <_free_r+0x90>)
 8006f3a:	6813      	ldr	r3, [r2, #0]
 8006f3c:	b933      	cbnz	r3, 8006f4c <_free_r+0x2c>
 8006f3e:	6063      	str	r3, [r4, #4]
 8006f40:	6014      	str	r4, [r2, #0]
 8006f42:	4628      	mov	r0, r5
 8006f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f48:	f000 b8e4 	b.w	8007114 <__malloc_unlock>
 8006f4c:	42a3      	cmp	r3, r4
 8006f4e:	d908      	bls.n	8006f62 <_free_r+0x42>
 8006f50:	6820      	ldr	r0, [r4, #0]
 8006f52:	1821      	adds	r1, r4, r0
 8006f54:	428b      	cmp	r3, r1
 8006f56:	bf01      	itttt	eq
 8006f58:	6819      	ldreq	r1, [r3, #0]
 8006f5a:	685b      	ldreq	r3, [r3, #4]
 8006f5c:	1809      	addeq	r1, r1, r0
 8006f5e:	6021      	streq	r1, [r4, #0]
 8006f60:	e7ed      	b.n	8006f3e <_free_r+0x1e>
 8006f62:	461a      	mov	r2, r3
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	b10b      	cbz	r3, 8006f6c <_free_r+0x4c>
 8006f68:	42a3      	cmp	r3, r4
 8006f6a:	d9fa      	bls.n	8006f62 <_free_r+0x42>
 8006f6c:	6811      	ldr	r1, [r2, #0]
 8006f6e:	1850      	adds	r0, r2, r1
 8006f70:	42a0      	cmp	r0, r4
 8006f72:	d10b      	bne.n	8006f8c <_free_r+0x6c>
 8006f74:	6820      	ldr	r0, [r4, #0]
 8006f76:	4401      	add	r1, r0
 8006f78:	1850      	adds	r0, r2, r1
 8006f7a:	4283      	cmp	r3, r0
 8006f7c:	6011      	str	r1, [r2, #0]
 8006f7e:	d1e0      	bne.n	8006f42 <_free_r+0x22>
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	6053      	str	r3, [r2, #4]
 8006f86:	4408      	add	r0, r1
 8006f88:	6010      	str	r0, [r2, #0]
 8006f8a:	e7da      	b.n	8006f42 <_free_r+0x22>
 8006f8c:	d902      	bls.n	8006f94 <_free_r+0x74>
 8006f8e:	230c      	movs	r3, #12
 8006f90:	602b      	str	r3, [r5, #0]
 8006f92:	e7d6      	b.n	8006f42 <_free_r+0x22>
 8006f94:	6820      	ldr	r0, [r4, #0]
 8006f96:	1821      	adds	r1, r4, r0
 8006f98:	428b      	cmp	r3, r1
 8006f9a:	bf04      	itt	eq
 8006f9c:	6819      	ldreq	r1, [r3, #0]
 8006f9e:	685b      	ldreq	r3, [r3, #4]
 8006fa0:	6063      	str	r3, [r4, #4]
 8006fa2:	bf04      	itt	eq
 8006fa4:	1809      	addeq	r1, r1, r0
 8006fa6:	6021      	streq	r1, [r4, #0]
 8006fa8:	6054      	str	r4, [r2, #4]
 8006faa:	e7ca      	b.n	8006f42 <_free_r+0x22>
 8006fac:	bd38      	pop	{r3, r4, r5, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000440 	.word	0x20000440

08006fb4 <malloc>:
 8006fb4:	4b02      	ldr	r3, [pc, #8]	@ (8006fc0 <malloc+0xc>)
 8006fb6:	4601      	mov	r1, r0
 8006fb8:	6818      	ldr	r0, [r3, #0]
 8006fba:	f000 b825 	b.w	8007008 <_malloc_r>
 8006fbe:	bf00      	nop
 8006fc0:	20000018 	.word	0x20000018

08006fc4 <sbrk_aligned>:
 8006fc4:	b570      	push	{r4, r5, r6, lr}
 8006fc6:	4e0f      	ldr	r6, [pc, #60]	@ (8007004 <sbrk_aligned+0x40>)
 8006fc8:	460c      	mov	r4, r1
 8006fca:	6831      	ldr	r1, [r6, #0]
 8006fcc:	4605      	mov	r5, r0
 8006fce:	b911      	cbnz	r1, 8006fd6 <sbrk_aligned+0x12>
 8006fd0:	f000 fea2 	bl	8007d18 <_sbrk_r>
 8006fd4:	6030      	str	r0, [r6, #0]
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	4628      	mov	r0, r5
 8006fda:	f000 fe9d 	bl	8007d18 <_sbrk_r>
 8006fde:	1c43      	adds	r3, r0, #1
 8006fe0:	d103      	bne.n	8006fea <sbrk_aligned+0x26>
 8006fe2:	f04f 34ff 	mov.w	r4, #4294967295
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	bd70      	pop	{r4, r5, r6, pc}
 8006fea:	1cc4      	adds	r4, r0, #3
 8006fec:	f024 0403 	bic.w	r4, r4, #3
 8006ff0:	42a0      	cmp	r0, r4
 8006ff2:	d0f8      	beq.n	8006fe6 <sbrk_aligned+0x22>
 8006ff4:	1a21      	subs	r1, r4, r0
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f000 fe8e 	bl	8007d18 <_sbrk_r>
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	d1f2      	bne.n	8006fe6 <sbrk_aligned+0x22>
 8007000:	e7ef      	b.n	8006fe2 <sbrk_aligned+0x1e>
 8007002:	bf00      	nop
 8007004:	2000043c 	.word	0x2000043c

08007008 <_malloc_r>:
 8007008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800700c:	1ccd      	adds	r5, r1, #3
 800700e:	f025 0503 	bic.w	r5, r5, #3
 8007012:	3508      	adds	r5, #8
 8007014:	2d0c      	cmp	r5, #12
 8007016:	bf38      	it	cc
 8007018:	250c      	movcc	r5, #12
 800701a:	2d00      	cmp	r5, #0
 800701c:	4606      	mov	r6, r0
 800701e:	db01      	blt.n	8007024 <_malloc_r+0x1c>
 8007020:	42a9      	cmp	r1, r5
 8007022:	d904      	bls.n	800702e <_malloc_r+0x26>
 8007024:	230c      	movs	r3, #12
 8007026:	6033      	str	r3, [r6, #0]
 8007028:	2000      	movs	r0, #0
 800702a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800702e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007104 <_malloc_r+0xfc>
 8007032:	f000 f869 	bl	8007108 <__malloc_lock>
 8007036:	f8d8 3000 	ldr.w	r3, [r8]
 800703a:	461c      	mov	r4, r3
 800703c:	bb44      	cbnz	r4, 8007090 <_malloc_r+0x88>
 800703e:	4629      	mov	r1, r5
 8007040:	4630      	mov	r0, r6
 8007042:	f7ff ffbf 	bl	8006fc4 <sbrk_aligned>
 8007046:	1c43      	adds	r3, r0, #1
 8007048:	4604      	mov	r4, r0
 800704a:	d158      	bne.n	80070fe <_malloc_r+0xf6>
 800704c:	f8d8 4000 	ldr.w	r4, [r8]
 8007050:	4627      	mov	r7, r4
 8007052:	2f00      	cmp	r7, #0
 8007054:	d143      	bne.n	80070de <_malloc_r+0xd6>
 8007056:	2c00      	cmp	r4, #0
 8007058:	d04b      	beq.n	80070f2 <_malloc_r+0xea>
 800705a:	6823      	ldr	r3, [r4, #0]
 800705c:	4639      	mov	r1, r7
 800705e:	4630      	mov	r0, r6
 8007060:	eb04 0903 	add.w	r9, r4, r3
 8007064:	f000 fe58 	bl	8007d18 <_sbrk_r>
 8007068:	4581      	cmp	r9, r0
 800706a:	d142      	bne.n	80070f2 <_malloc_r+0xea>
 800706c:	6821      	ldr	r1, [r4, #0]
 800706e:	1a6d      	subs	r5, r5, r1
 8007070:	4629      	mov	r1, r5
 8007072:	4630      	mov	r0, r6
 8007074:	f7ff ffa6 	bl	8006fc4 <sbrk_aligned>
 8007078:	3001      	adds	r0, #1
 800707a:	d03a      	beq.n	80070f2 <_malloc_r+0xea>
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	442b      	add	r3, r5
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	f8d8 3000 	ldr.w	r3, [r8]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	bb62      	cbnz	r2, 80070e4 <_malloc_r+0xdc>
 800708a:	f8c8 7000 	str.w	r7, [r8]
 800708e:	e00f      	b.n	80070b0 <_malloc_r+0xa8>
 8007090:	6822      	ldr	r2, [r4, #0]
 8007092:	1b52      	subs	r2, r2, r5
 8007094:	d420      	bmi.n	80070d8 <_malloc_r+0xd0>
 8007096:	2a0b      	cmp	r2, #11
 8007098:	d917      	bls.n	80070ca <_malloc_r+0xc2>
 800709a:	1961      	adds	r1, r4, r5
 800709c:	42a3      	cmp	r3, r4
 800709e:	6025      	str	r5, [r4, #0]
 80070a0:	bf18      	it	ne
 80070a2:	6059      	strne	r1, [r3, #4]
 80070a4:	6863      	ldr	r3, [r4, #4]
 80070a6:	bf08      	it	eq
 80070a8:	f8c8 1000 	streq.w	r1, [r8]
 80070ac:	5162      	str	r2, [r4, r5]
 80070ae:	604b      	str	r3, [r1, #4]
 80070b0:	4630      	mov	r0, r6
 80070b2:	f000 f82f 	bl	8007114 <__malloc_unlock>
 80070b6:	f104 000b 	add.w	r0, r4, #11
 80070ba:	1d23      	adds	r3, r4, #4
 80070bc:	f020 0007 	bic.w	r0, r0, #7
 80070c0:	1ac2      	subs	r2, r0, r3
 80070c2:	bf1c      	itt	ne
 80070c4:	1a1b      	subne	r3, r3, r0
 80070c6:	50a3      	strne	r3, [r4, r2]
 80070c8:	e7af      	b.n	800702a <_malloc_r+0x22>
 80070ca:	6862      	ldr	r2, [r4, #4]
 80070cc:	42a3      	cmp	r3, r4
 80070ce:	bf0c      	ite	eq
 80070d0:	f8c8 2000 	streq.w	r2, [r8]
 80070d4:	605a      	strne	r2, [r3, #4]
 80070d6:	e7eb      	b.n	80070b0 <_malloc_r+0xa8>
 80070d8:	4623      	mov	r3, r4
 80070da:	6864      	ldr	r4, [r4, #4]
 80070dc:	e7ae      	b.n	800703c <_malloc_r+0x34>
 80070de:	463c      	mov	r4, r7
 80070e0:	687f      	ldr	r7, [r7, #4]
 80070e2:	e7b6      	b.n	8007052 <_malloc_r+0x4a>
 80070e4:	461a      	mov	r2, r3
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	42a3      	cmp	r3, r4
 80070ea:	d1fb      	bne.n	80070e4 <_malloc_r+0xdc>
 80070ec:	2300      	movs	r3, #0
 80070ee:	6053      	str	r3, [r2, #4]
 80070f0:	e7de      	b.n	80070b0 <_malloc_r+0xa8>
 80070f2:	230c      	movs	r3, #12
 80070f4:	6033      	str	r3, [r6, #0]
 80070f6:	4630      	mov	r0, r6
 80070f8:	f000 f80c 	bl	8007114 <__malloc_unlock>
 80070fc:	e794      	b.n	8007028 <_malloc_r+0x20>
 80070fe:	6005      	str	r5, [r0, #0]
 8007100:	e7d6      	b.n	80070b0 <_malloc_r+0xa8>
 8007102:	bf00      	nop
 8007104:	20000440 	.word	0x20000440

08007108 <__malloc_lock>:
 8007108:	4801      	ldr	r0, [pc, #4]	@ (8007110 <__malloc_lock+0x8>)
 800710a:	f7ff b8ae 	b.w	800626a <__retarget_lock_acquire_recursive>
 800710e:	bf00      	nop
 8007110:	20000438 	.word	0x20000438

08007114 <__malloc_unlock>:
 8007114:	4801      	ldr	r0, [pc, #4]	@ (800711c <__malloc_unlock+0x8>)
 8007116:	f7ff b8a9 	b.w	800626c <__retarget_lock_release_recursive>
 800711a:	bf00      	nop
 800711c:	20000438 	.word	0x20000438

08007120 <_Balloc>:
 8007120:	b570      	push	{r4, r5, r6, lr}
 8007122:	69c6      	ldr	r6, [r0, #28]
 8007124:	4604      	mov	r4, r0
 8007126:	460d      	mov	r5, r1
 8007128:	b976      	cbnz	r6, 8007148 <_Balloc+0x28>
 800712a:	2010      	movs	r0, #16
 800712c:	f7ff ff42 	bl	8006fb4 <malloc>
 8007130:	4602      	mov	r2, r0
 8007132:	61e0      	str	r0, [r4, #28]
 8007134:	b920      	cbnz	r0, 8007140 <_Balloc+0x20>
 8007136:	4b18      	ldr	r3, [pc, #96]	@ (8007198 <_Balloc+0x78>)
 8007138:	4818      	ldr	r0, [pc, #96]	@ (800719c <_Balloc+0x7c>)
 800713a:	216b      	movs	r1, #107	@ 0x6b
 800713c:	f000 fe0a 	bl	8007d54 <__assert_func>
 8007140:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007144:	6006      	str	r6, [r0, #0]
 8007146:	60c6      	str	r6, [r0, #12]
 8007148:	69e6      	ldr	r6, [r4, #28]
 800714a:	68f3      	ldr	r3, [r6, #12]
 800714c:	b183      	cbz	r3, 8007170 <_Balloc+0x50>
 800714e:	69e3      	ldr	r3, [r4, #28]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007156:	b9b8      	cbnz	r0, 8007188 <_Balloc+0x68>
 8007158:	2101      	movs	r1, #1
 800715a:	fa01 f605 	lsl.w	r6, r1, r5
 800715e:	1d72      	adds	r2, r6, #5
 8007160:	0092      	lsls	r2, r2, #2
 8007162:	4620      	mov	r0, r4
 8007164:	f000 fe14 	bl	8007d90 <_calloc_r>
 8007168:	b160      	cbz	r0, 8007184 <_Balloc+0x64>
 800716a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800716e:	e00e      	b.n	800718e <_Balloc+0x6e>
 8007170:	2221      	movs	r2, #33	@ 0x21
 8007172:	2104      	movs	r1, #4
 8007174:	4620      	mov	r0, r4
 8007176:	f000 fe0b 	bl	8007d90 <_calloc_r>
 800717a:	69e3      	ldr	r3, [r4, #28]
 800717c:	60f0      	str	r0, [r6, #12]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e4      	bne.n	800714e <_Balloc+0x2e>
 8007184:	2000      	movs	r0, #0
 8007186:	bd70      	pop	{r4, r5, r6, pc}
 8007188:	6802      	ldr	r2, [r0, #0]
 800718a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800718e:	2300      	movs	r3, #0
 8007190:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007194:	e7f7      	b.n	8007186 <_Balloc+0x66>
 8007196:	bf00      	nop
 8007198:	0800808d 	.word	0x0800808d
 800719c:	0800810d 	.word	0x0800810d

080071a0 <_Bfree>:
 80071a0:	b570      	push	{r4, r5, r6, lr}
 80071a2:	69c6      	ldr	r6, [r0, #28]
 80071a4:	4605      	mov	r5, r0
 80071a6:	460c      	mov	r4, r1
 80071a8:	b976      	cbnz	r6, 80071c8 <_Bfree+0x28>
 80071aa:	2010      	movs	r0, #16
 80071ac:	f7ff ff02 	bl	8006fb4 <malloc>
 80071b0:	4602      	mov	r2, r0
 80071b2:	61e8      	str	r0, [r5, #28]
 80071b4:	b920      	cbnz	r0, 80071c0 <_Bfree+0x20>
 80071b6:	4b09      	ldr	r3, [pc, #36]	@ (80071dc <_Bfree+0x3c>)
 80071b8:	4809      	ldr	r0, [pc, #36]	@ (80071e0 <_Bfree+0x40>)
 80071ba:	218f      	movs	r1, #143	@ 0x8f
 80071bc:	f000 fdca 	bl	8007d54 <__assert_func>
 80071c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071c4:	6006      	str	r6, [r0, #0]
 80071c6:	60c6      	str	r6, [r0, #12]
 80071c8:	b13c      	cbz	r4, 80071da <_Bfree+0x3a>
 80071ca:	69eb      	ldr	r3, [r5, #28]
 80071cc:	6862      	ldr	r2, [r4, #4]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071d4:	6021      	str	r1, [r4, #0]
 80071d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071da:	bd70      	pop	{r4, r5, r6, pc}
 80071dc:	0800808d 	.word	0x0800808d
 80071e0:	0800810d 	.word	0x0800810d

080071e4 <__multadd>:
 80071e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e8:	690d      	ldr	r5, [r1, #16]
 80071ea:	4607      	mov	r7, r0
 80071ec:	460c      	mov	r4, r1
 80071ee:	461e      	mov	r6, r3
 80071f0:	f101 0c14 	add.w	ip, r1, #20
 80071f4:	2000      	movs	r0, #0
 80071f6:	f8dc 3000 	ldr.w	r3, [ip]
 80071fa:	b299      	uxth	r1, r3
 80071fc:	fb02 6101 	mla	r1, r2, r1, r6
 8007200:	0c1e      	lsrs	r6, r3, #16
 8007202:	0c0b      	lsrs	r3, r1, #16
 8007204:	fb02 3306 	mla	r3, r2, r6, r3
 8007208:	b289      	uxth	r1, r1
 800720a:	3001      	adds	r0, #1
 800720c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007210:	4285      	cmp	r5, r0
 8007212:	f84c 1b04 	str.w	r1, [ip], #4
 8007216:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800721a:	dcec      	bgt.n	80071f6 <__multadd+0x12>
 800721c:	b30e      	cbz	r6, 8007262 <__multadd+0x7e>
 800721e:	68a3      	ldr	r3, [r4, #8]
 8007220:	42ab      	cmp	r3, r5
 8007222:	dc19      	bgt.n	8007258 <__multadd+0x74>
 8007224:	6861      	ldr	r1, [r4, #4]
 8007226:	4638      	mov	r0, r7
 8007228:	3101      	adds	r1, #1
 800722a:	f7ff ff79 	bl	8007120 <_Balloc>
 800722e:	4680      	mov	r8, r0
 8007230:	b928      	cbnz	r0, 800723e <__multadd+0x5a>
 8007232:	4602      	mov	r2, r0
 8007234:	4b0c      	ldr	r3, [pc, #48]	@ (8007268 <__multadd+0x84>)
 8007236:	480d      	ldr	r0, [pc, #52]	@ (800726c <__multadd+0x88>)
 8007238:	21ba      	movs	r1, #186	@ 0xba
 800723a:	f000 fd8b 	bl	8007d54 <__assert_func>
 800723e:	6922      	ldr	r2, [r4, #16]
 8007240:	3202      	adds	r2, #2
 8007242:	f104 010c 	add.w	r1, r4, #12
 8007246:	0092      	lsls	r2, r2, #2
 8007248:	300c      	adds	r0, #12
 800724a:	f000 fd75 	bl	8007d38 <memcpy>
 800724e:	4621      	mov	r1, r4
 8007250:	4638      	mov	r0, r7
 8007252:	f7ff ffa5 	bl	80071a0 <_Bfree>
 8007256:	4644      	mov	r4, r8
 8007258:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800725c:	3501      	adds	r5, #1
 800725e:	615e      	str	r6, [r3, #20]
 8007260:	6125      	str	r5, [r4, #16]
 8007262:	4620      	mov	r0, r4
 8007264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007268:	080080fc 	.word	0x080080fc
 800726c:	0800810d 	.word	0x0800810d

08007270 <__hi0bits>:
 8007270:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007274:	4603      	mov	r3, r0
 8007276:	bf36      	itet	cc
 8007278:	0403      	lslcc	r3, r0, #16
 800727a:	2000      	movcs	r0, #0
 800727c:	2010      	movcc	r0, #16
 800727e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007282:	bf3c      	itt	cc
 8007284:	021b      	lslcc	r3, r3, #8
 8007286:	3008      	addcc	r0, #8
 8007288:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800728c:	bf3c      	itt	cc
 800728e:	011b      	lslcc	r3, r3, #4
 8007290:	3004      	addcc	r0, #4
 8007292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007296:	bf3c      	itt	cc
 8007298:	009b      	lslcc	r3, r3, #2
 800729a:	3002      	addcc	r0, #2
 800729c:	2b00      	cmp	r3, #0
 800729e:	db05      	blt.n	80072ac <__hi0bits+0x3c>
 80072a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80072a4:	f100 0001 	add.w	r0, r0, #1
 80072a8:	bf08      	it	eq
 80072aa:	2020      	moveq	r0, #32
 80072ac:	4770      	bx	lr

080072ae <__lo0bits>:
 80072ae:	6803      	ldr	r3, [r0, #0]
 80072b0:	4602      	mov	r2, r0
 80072b2:	f013 0007 	ands.w	r0, r3, #7
 80072b6:	d00b      	beq.n	80072d0 <__lo0bits+0x22>
 80072b8:	07d9      	lsls	r1, r3, #31
 80072ba:	d421      	bmi.n	8007300 <__lo0bits+0x52>
 80072bc:	0798      	lsls	r0, r3, #30
 80072be:	bf49      	itett	mi
 80072c0:	085b      	lsrmi	r3, r3, #1
 80072c2:	089b      	lsrpl	r3, r3, #2
 80072c4:	2001      	movmi	r0, #1
 80072c6:	6013      	strmi	r3, [r2, #0]
 80072c8:	bf5c      	itt	pl
 80072ca:	6013      	strpl	r3, [r2, #0]
 80072cc:	2002      	movpl	r0, #2
 80072ce:	4770      	bx	lr
 80072d0:	b299      	uxth	r1, r3
 80072d2:	b909      	cbnz	r1, 80072d8 <__lo0bits+0x2a>
 80072d4:	0c1b      	lsrs	r3, r3, #16
 80072d6:	2010      	movs	r0, #16
 80072d8:	b2d9      	uxtb	r1, r3
 80072da:	b909      	cbnz	r1, 80072e0 <__lo0bits+0x32>
 80072dc:	3008      	adds	r0, #8
 80072de:	0a1b      	lsrs	r3, r3, #8
 80072e0:	0719      	lsls	r1, r3, #28
 80072e2:	bf04      	itt	eq
 80072e4:	091b      	lsreq	r3, r3, #4
 80072e6:	3004      	addeq	r0, #4
 80072e8:	0799      	lsls	r1, r3, #30
 80072ea:	bf04      	itt	eq
 80072ec:	089b      	lsreq	r3, r3, #2
 80072ee:	3002      	addeq	r0, #2
 80072f0:	07d9      	lsls	r1, r3, #31
 80072f2:	d403      	bmi.n	80072fc <__lo0bits+0x4e>
 80072f4:	085b      	lsrs	r3, r3, #1
 80072f6:	f100 0001 	add.w	r0, r0, #1
 80072fa:	d003      	beq.n	8007304 <__lo0bits+0x56>
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	4770      	bx	lr
 8007300:	2000      	movs	r0, #0
 8007302:	4770      	bx	lr
 8007304:	2020      	movs	r0, #32
 8007306:	4770      	bx	lr

08007308 <__i2b>:
 8007308:	b510      	push	{r4, lr}
 800730a:	460c      	mov	r4, r1
 800730c:	2101      	movs	r1, #1
 800730e:	f7ff ff07 	bl	8007120 <_Balloc>
 8007312:	4602      	mov	r2, r0
 8007314:	b928      	cbnz	r0, 8007322 <__i2b+0x1a>
 8007316:	4b05      	ldr	r3, [pc, #20]	@ (800732c <__i2b+0x24>)
 8007318:	4805      	ldr	r0, [pc, #20]	@ (8007330 <__i2b+0x28>)
 800731a:	f240 1145 	movw	r1, #325	@ 0x145
 800731e:	f000 fd19 	bl	8007d54 <__assert_func>
 8007322:	2301      	movs	r3, #1
 8007324:	6144      	str	r4, [r0, #20]
 8007326:	6103      	str	r3, [r0, #16]
 8007328:	bd10      	pop	{r4, pc}
 800732a:	bf00      	nop
 800732c:	080080fc 	.word	0x080080fc
 8007330:	0800810d 	.word	0x0800810d

08007334 <__multiply>:
 8007334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007338:	4617      	mov	r7, r2
 800733a:	690a      	ldr	r2, [r1, #16]
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	429a      	cmp	r2, r3
 8007340:	bfa8      	it	ge
 8007342:	463b      	movge	r3, r7
 8007344:	4689      	mov	r9, r1
 8007346:	bfa4      	itt	ge
 8007348:	460f      	movge	r7, r1
 800734a:	4699      	movge	r9, r3
 800734c:	693d      	ldr	r5, [r7, #16]
 800734e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	6879      	ldr	r1, [r7, #4]
 8007356:	eb05 060a 	add.w	r6, r5, sl
 800735a:	42b3      	cmp	r3, r6
 800735c:	b085      	sub	sp, #20
 800735e:	bfb8      	it	lt
 8007360:	3101      	addlt	r1, #1
 8007362:	f7ff fedd 	bl	8007120 <_Balloc>
 8007366:	b930      	cbnz	r0, 8007376 <__multiply+0x42>
 8007368:	4602      	mov	r2, r0
 800736a:	4b41      	ldr	r3, [pc, #260]	@ (8007470 <__multiply+0x13c>)
 800736c:	4841      	ldr	r0, [pc, #260]	@ (8007474 <__multiply+0x140>)
 800736e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007372:	f000 fcef 	bl	8007d54 <__assert_func>
 8007376:	f100 0414 	add.w	r4, r0, #20
 800737a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800737e:	4623      	mov	r3, r4
 8007380:	2200      	movs	r2, #0
 8007382:	4573      	cmp	r3, lr
 8007384:	d320      	bcc.n	80073c8 <__multiply+0x94>
 8007386:	f107 0814 	add.w	r8, r7, #20
 800738a:	f109 0114 	add.w	r1, r9, #20
 800738e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007392:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007396:	9302      	str	r3, [sp, #8]
 8007398:	1beb      	subs	r3, r5, r7
 800739a:	3b15      	subs	r3, #21
 800739c:	f023 0303 	bic.w	r3, r3, #3
 80073a0:	3304      	adds	r3, #4
 80073a2:	3715      	adds	r7, #21
 80073a4:	42bd      	cmp	r5, r7
 80073a6:	bf38      	it	cc
 80073a8:	2304      	movcc	r3, #4
 80073aa:	9301      	str	r3, [sp, #4]
 80073ac:	9b02      	ldr	r3, [sp, #8]
 80073ae:	9103      	str	r1, [sp, #12]
 80073b0:	428b      	cmp	r3, r1
 80073b2:	d80c      	bhi.n	80073ce <__multiply+0x9a>
 80073b4:	2e00      	cmp	r6, #0
 80073b6:	dd03      	ble.n	80073c0 <__multiply+0x8c>
 80073b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d055      	beq.n	800746c <__multiply+0x138>
 80073c0:	6106      	str	r6, [r0, #16]
 80073c2:	b005      	add	sp, #20
 80073c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c8:	f843 2b04 	str.w	r2, [r3], #4
 80073cc:	e7d9      	b.n	8007382 <__multiply+0x4e>
 80073ce:	f8b1 a000 	ldrh.w	sl, [r1]
 80073d2:	f1ba 0f00 	cmp.w	sl, #0
 80073d6:	d01f      	beq.n	8007418 <__multiply+0xe4>
 80073d8:	46c4      	mov	ip, r8
 80073da:	46a1      	mov	r9, r4
 80073dc:	2700      	movs	r7, #0
 80073de:	f85c 2b04 	ldr.w	r2, [ip], #4
 80073e2:	f8d9 3000 	ldr.w	r3, [r9]
 80073e6:	fa1f fb82 	uxth.w	fp, r2
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	fb0a 330b 	mla	r3, sl, fp, r3
 80073f0:	443b      	add	r3, r7
 80073f2:	f8d9 7000 	ldr.w	r7, [r9]
 80073f6:	0c12      	lsrs	r2, r2, #16
 80073f8:	0c3f      	lsrs	r7, r7, #16
 80073fa:	fb0a 7202 	mla	r2, sl, r2, r7
 80073fe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007402:	b29b      	uxth	r3, r3
 8007404:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007408:	4565      	cmp	r5, ip
 800740a:	f849 3b04 	str.w	r3, [r9], #4
 800740e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007412:	d8e4      	bhi.n	80073de <__multiply+0xaa>
 8007414:	9b01      	ldr	r3, [sp, #4]
 8007416:	50e7      	str	r7, [r4, r3]
 8007418:	9b03      	ldr	r3, [sp, #12]
 800741a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800741e:	3104      	adds	r1, #4
 8007420:	f1b9 0f00 	cmp.w	r9, #0
 8007424:	d020      	beq.n	8007468 <__multiply+0x134>
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	4647      	mov	r7, r8
 800742a:	46a4      	mov	ip, r4
 800742c:	f04f 0a00 	mov.w	sl, #0
 8007430:	f8b7 b000 	ldrh.w	fp, [r7]
 8007434:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007438:	fb09 220b 	mla	r2, r9, fp, r2
 800743c:	4452      	add	r2, sl
 800743e:	b29b      	uxth	r3, r3
 8007440:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007444:	f84c 3b04 	str.w	r3, [ip], #4
 8007448:	f857 3b04 	ldr.w	r3, [r7], #4
 800744c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007450:	f8bc 3000 	ldrh.w	r3, [ip]
 8007454:	fb09 330a 	mla	r3, r9, sl, r3
 8007458:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800745c:	42bd      	cmp	r5, r7
 800745e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007462:	d8e5      	bhi.n	8007430 <__multiply+0xfc>
 8007464:	9a01      	ldr	r2, [sp, #4]
 8007466:	50a3      	str	r3, [r4, r2]
 8007468:	3404      	adds	r4, #4
 800746a:	e79f      	b.n	80073ac <__multiply+0x78>
 800746c:	3e01      	subs	r6, #1
 800746e:	e7a1      	b.n	80073b4 <__multiply+0x80>
 8007470:	080080fc 	.word	0x080080fc
 8007474:	0800810d 	.word	0x0800810d

08007478 <__pow5mult>:
 8007478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800747c:	4615      	mov	r5, r2
 800747e:	f012 0203 	ands.w	r2, r2, #3
 8007482:	4607      	mov	r7, r0
 8007484:	460e      	mov	r6, r1
 8007486:	d007      	beq.n	8007498 <__pow5mult+0x20>
 8007488:	4c25      	ldr	r4, [pc, #148]	@ (8007520 <__pow5mult+0xa8>)
 800748a:	3a01      	subs	r2, #1
 800748c:	2300      	movs	r3, #0
 800748e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007492:	f7ff fea7 	bl	80071e4 <__multadd>
 8007496:	4606      	mov	r6, r0
 8007498:	10ad      	asrs	r5, r5, #2
 800749a:	d03d      	beq.n	8007518 <__pow5mult+0xa0>
 800749c:	69fc      	ldr	r4, [r7, #28]
 800749e:	b97c      	cbnz	r4, 80074c0 <__pow5mult+0x48>
 80074a0:	2010      	movs	r0, #16
 80074a2:	f7ff fd87 	bl	8006fb4 <malloc>
 80074a6:	4602      	mov	r2, r0
 80074a8:	61f8      	str	r0, [r7, #28]
 80074aa:	b928      	cbnz	r0, 80074b8 <__pow5mult+0x40>
 80074ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007524 <__pow5mult+0xac>)
 80074ae:	481e      	ldr	r0, [pc, #120]	@ (8007528 <__pow5mult+0xb0>)
 80074b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80074b4:	f000 fc4e 	bl	8007d54 <__assert_func>
 80074b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074bc:	6004      	str	r4, [r0, #0]
 80074be:	60c4      	str	r4, [r0, #12]
 80074c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80074c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074c8:	b94c      	cbnz	r4, 80074de <__pow5mult+0x66>
 80074ca:	f240 2171 	movw	r1, #625	@ 0x271
 80074ce:	4638      	mov	r0, r7
 80074d0:	f7ff ff1a 	bl	8007308 <__i2b>
 80074d4:	2300      	movs	r3, #0
 80074d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80074da:	4604      	mov	r4, r0
 80074dc:	6003      	str	r3, [r0, #0]
 80074de:	f04f 0900 	mov.w	r9, #0
 80074e2:	07eb      	lsls	r3, r5, #31
 80074e4:	d50a      	bpl.n	80074fc <__pow5mult+0x84>
 80074e6:	4631      	mov	r1, r6
 80074e8:	4622      	mov	r2, r4
 80074ea:	4638      	mov	r0, r7
 80074ec:	f7ff ff22 	bl	8007334 <__multiply>
 80074f0:	4631      	mov	r1, r6
 80074f2:	4680      	mov	r8, r0
 80074f4:	4638      	mov	r0, r7
 80074f6:	f7ff fe53 	bl	80071a0 <_Bfree>
 80074fa:	4646      	mov	r6, r8
 80074fc:	106d      	asrs	r5, r5, #1
 80074fe:	d00b      	beq.n	8007518 <__pow5mult+0xa0>
 8007500:	6820      	ldr	r0, [r4, #0]
 8007502:	b938      	cbnz	r0, 8007514 <__pow5mult+0x9c>
 8007504:	4622      	mov	r2, r4
 8007506:	4621      	mov	r1, r4
 8007508:	4638      	mov	r0, r7
 800750a:	f7ff ff13 	bl	8007334 <__multiply>
 800750e:	6020      	str	r0, [r4, #0]
 8007510:	f8c0 9000 	str.w	r9, [r0]
 8007514:	4604      	mov	r4, r0
 8007516:	e7e4      	b.n	80074e2 <__pow5mult+0x6a>
 8007518:	4630      	mov	r0, r6
 800751a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800751e:	bf00      	nop
 8007520:	080081c0 	.word	0x080081c0
 8007524:	0800808d 	.word	0x0800808d
 8007528:	0800810d 	.word	0x0800810d

0800752c <__lshift>:
 800752c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007530:	460c      	mov	r4, r1
 8007532:	6849      	ldr	r1, [r1, #4]
 8007534:	6923      	ldr	r3, [r4, #16]
 8007536:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800753a:	68a3      	ldr	r3, [r4, #8]
 800753c:	4607      	mov	r7, r0
 800753e:	4691      	mov	r9, r2
 8007540:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007544:	f108 0601 	add.w	r6, r8, #1
 8007548:	42b3      	cmp	r3, r6
 800754a:	db0b      	blt.n	8007564 <__lshift+0x38>
 800754c:	4638      	mov	r0, r7
 800754e:	f7ff fde7 	bl	8007120 <_Balloc>
 8007552:	4605      	mov	r5, r0
 8007554:	b948      	cbnz	r0, 800756a <__lshift+0x3e>
 8007556:	4602      	mov	r2, r0
 8007558:	4b28      	ldr	r3, [pc, #160]	@ (80075fc <__lshift+0xd0>)
 800755a:	4829      	ldr	r0, [pc, #164]	@ (8007600 <__lshift+0xd4>)
 800755c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007560:	f000 fbf8 	bl	8007d54 <__assert_func>
 8007564:	3101      	adds	r1, #1
 8007566:	005b      	lsls	r3, r3, #1
 8007568:	e7ee      	b.n	8007548 <__lshift+0x1c>
 800756a:	2300      	movs	r3, #0
 800756c:	f100 0114 	add.w	r1, r0, #20
 8007570:	f100 0210 	add.w	r2, r0, #16
 8007574:	4618      	mov	r0, r3
 8007576:	4553      	cmp	r3, sl
 8007578:	db33      	blt.n	80075e2 <__lshift+0xb6>
 800757a:	6920      	ldr	r0, [r4, #16]
 800757c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007580:	f104 0314 	add.w	r3, r4, #20
 8007584:	f019 091f 	ands.w	r9, r9, #31
 8007588:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800758c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007590:	d02b      	beq.n	80075ea <__lshift+0xbe>
 8007592:	f1c9 0e20 	rsb	lr, r9, #32
 8007596:	468a      	mov	sl, r1
 8007598:	2200      	movs	r2, #0
 800759a:	6818      	ldr	r0, [r3, #0]
 800759c:	fa00 f009 	lsl.w	r0, r0, r9
 80075a0:	4310      	orrs	r0, r2
 80075a2:	f84a 0b04 	str.w	r0, [sl], #4
 80075a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80075aa:	459c      	cmp	ip, r3
 80075ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80075b0:	d8f3      	bhi.n	800759a <__lshift+0x6e>
 80075b2:	ebac 0304 	sub.w	r3, ip, r4
 80075b6:	3b15      	subs	r3, #21
 80075b8:	f023 0303 	bic.w	r3, r3, #3
 80075bc:	3304      	adds	r3, #4
 80075be:	f104 0015 	add.w	r0, r4, #21
 80075c2:	4560      	cmp	r0, ip
 80075c4:	bf88      	it	hi
 80075c6:	2304      	movhi	r3, #4
 80075c8:	50ca      	str	r2, [r1, r3]
 80075ca:	b10a      	cbz	r2, 80075d0 <__lshift+0xa4>
 80075cc:	f108 0602 	add.w	r6, r8, #2
 80075d0:	3e01      	subs	r6, #1
 80075d2:	4638      	mov	r0, r7
 80075d4:	612e      	str	r6, [r5, #16]
 80075d6:	4621      	mov	r1, r4
 80075d8:	f7ff fde2 	bl	80071a0 <_Bfree>
 80075dc:	4628      	mov	r0, r5
 80075de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80075e6:	3301      	adds	r3, #1
 80075e8:	e7c5      	b.n	8007576 <__lshift+0x4a>
 80075ea:	3904      	subs	r1, #4
 80075ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80075f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80075f4:	459c      	cmp	ip, r3
 80075f6:	d8f9      	bhi.n	80075ec <__lshift+0xc0>
 80075f8:	e7ea      	b.n	80075d0 <__lshift+0xa4>
 80075fa:	bf00      	nop
 80075fc:	080080fc 	.word	0x080080fc
 8007600:	0800810d 	.word	0x0800810d

08007604 <__mcmp>:
 8007604:	690a      	ldr	r2, [r1, #16]
 8007606:	4603      	mov	r3, r0
 8007608:	6900      	ldr	r0, [r0, #16]
 800760a:	1a80      	subs	r0, r0, r2
 800760c:	b530      	push	{r4, r5, lr}
 800760e:	d10e      	bne.n	800762e <__mcmp+0x2a>
 8007610:	3314      	adds	r3, #20
 8007612:	3114      	adds	r1, #20
 8007614:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007618:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800761c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007620:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007624:	4295      	cmp	r5, r2
 8007626:	d003      	beq.n	8007630 <__mcmp+0x2c>
 8007628:	d205      	bcs.n	8007636 <__mcmp+0x32>
 800762a:	f04f 30ff 	mov.w	r0, #4294967295
 800762e:	bd30      	pop	{r4, r5, pc}
 8007630:	42a3      	cmp	r3, r4
 8007632:	d3f3      	bcc.n	800761c <__mcmp+0x18>
 8007634:	e7fb      	b.n	800762e <__mcmp+0x2a>
 8007636:	2001      	movs	r0, #1
 8007638:	e7f9      	b.n	800762e <__mcmp+0x2a>
	...

0800763c <__mdiff>:
 800763c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007640:	4689      	mov	r9, r1
 8007642:	4606      	mov	r6, r0
 8007644:	4611      	mov	r1, r2
 8007646:	4648      	mov	r0, r9
 8007648:	4614      	mov	r4, r2
 800764a:	f7ff ffdb 	bl	8007604 <__mcmp>
 800764e:	1e05      	subs	r5, r0, #0
 8007650:	d112      	bne.n	8007678 <__mdiff+0x3c>
 8007652:	4629      	mov	r1, r5
 8007654:	4630      	mov	r0, r6
 8007656:	f7ff fd63 	bl	8007120 <_Balloc>
 800765a:	4602      	mov	r2, r0
 800765c:	b928      	cbnz	r0, 800766a <__mdiff+0x2e>
 800765e:	4b3f      	ldr	r3, [pc, #252]	@ (800775c <__mdiff+0x120>)
 8007660:	f240 2137 	movw	r1, #567	@ 0x237
 8007664:	483e      	ldr	r0, [pc, #248]	@ (8007760 <__mdiff+0x124>)
 8007666:	f000 fb75 	bl	8007d54 <__assert_func>
 800766a:	2301      	movs	r3, #1
 800766c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007670:	4610      	mov	r0, r2
 8007672:	b003      	add	sp, #12
 8007674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007678:	bfbc      	itt	lt
 800767a:	464b      	movlt	r3, r9
 800767c:	46a1      	movlt	r9, r4
 800767e:	4630      	mov	r0, r6
 8007680:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007684:	bfba      	itte	lt
 8007686:	461c      	movlt	r4, r3
 8007688:	2501      	movlt	r5, #1
 800768a:	2500      	movge	r5, #0
 800768c:	f7ff fd48 	bl	8007120 <_Balloc>
 8007690:	4602      	mov	r2, r0
 8007692:	b918      	cbnz	r0, 800769c <__mdiff+0x60>
 8007694:	4b31      	ldr	r3, [pc, #196]	@ (800775c <__mdiff+0x120>)
 8007696:	f240 2145 	movw	r1, #581	@ 0x245
 800769a:	e7e3      	b.n	8007664 <__mdiff+0x28>
 800769c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80076a0:	6926      	ldr	r6, [r4, #16]
 80076a2:	60c5      	str	r5, [r0, #12]
 80076a4:	f109 0310 	add.w	r3, r9, #16
 80076a8:	f109 0514 	add.w	r5, r9, #20
 80076ac:	f104 0e14 	add.w	lr, r4, #20
 80076b0:	f100 0b14 	add.w	fp, r0, #20
 80076b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80076b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80076bc:	9301      	str	r3, [sp, #4]
 80076be:	46d9      	mov	r9, fp
 80076c0:	f04f 0c00 	mov.w	ip, #0
 80076c4:	9b01      	ldr	r3, [sp, #4]
 80076c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80076ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80076ce:	9301      	str	r3, [sp, #4]
 80076d0:	fa1f f38a 	uxth.w	r3, sl
 80076d4:	4619      	mov	r1, r3
 80076d6:	b283      	uxth	r3, r0
 80076d8:	1acb      	subs	r3, r1, r3
 80076da:	0c00      	lsrs	r0, r0, #16
 80076dc:	4463      	add	r3, ip
 80076de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80076e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80076ec:	4576      	cmp	r6, lr
 80076ee:	f849 3b04 	str.w	r3, [r9], #4
 80076f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80076f6:	d8e5      	bhi.n	80076c4 <__mdiff+0x88>
 80076f8:	1b33      	subs	r3, r6, r4
 80076fa:	3b15      	subs	r3, #21
 80076fc:	f023 0303 	bic.w	r3, r3, #3
 8007700:	3415      	adds	r4, #21
 8007702:	3304      	adds	r3, #4
 8007704:	42a6      	cmp	r6, r4
 8007706:	bf38      	it	cc
 8007708:	2304      	movcc	r3, #4
 800770a:	441d      	add	r5, r3
 800770c:	445b      	add	r3, fp
 800770e:	461e      	mov	r6, r3
 8007710:	462c      	mov	r4, r5
 8007712:	4544      	cmp	r4, r8
 8007714:	d30e      	bcc.n	8007734 <__mdiff+0xf8>
 8007716:	f108 0103 	add.w	r1, r8, #3
 800771a:	1b49      	subs	r1, r1, r5
 800771c:	f021 0103 	bic.w	r1, r1, #3
 8007720:	3d03      	subs	r5, #3
 8007722:	45a8      	cmp	r8, r5
 8007724:	bf38      	it	cc
 8007726:	2100      	movcc	r1, #0
 8007728:	440b      	add	r3, r1
 800772a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800772e:	b191      	cbz	r1, 8007756 <__mdiff+0x11a>
 8007730:	6117      	str	r7, [r2, #16]
 8007732:	e79d      	b.n	8007670 <__mdiff+0x34>
 8007734:	f854 1b04 	ldr.w	r1, [r4], #4
 8007738:	46e6      	mov	lr, ip
 800773a:	0c08      	lsrs	r0, r1, #16
 800773c:	fa1c fc81 	uxtah	ip, ip, r1
 8007740:	4471      	add	r1, lr
 8007742:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007746:	b289      	uxth	r1, r1
 8007748:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800774c:	f846 1b04 	str.w	r1, [r6], #4
 8007750:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007754:	e7dd      	b.n	8007712 <__mdiff+0xd6>
 8007756:	3f01      	subs	r7, #1
 8007758:	e7e7      	b.n	800772a <__mdiff+0xee>
 800775a:	bf00      	nop
 800775c:	080080fc 	.word	0x080080fc
 8007760:	0800810d 	.word	0x0800810d

08007764 <__d2b>:
 8007764:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007768:	460f      	mov	r7, r1
 800776a:	2101      	movs	r1, #1
 800776c:	ec59 8b10 	vmov	r8, r9, d0
 8007770:	4616      	mov	r6, r2
 8007772:	f7ff fcd5 	bl	8007120 <_Balloc>
 8007776:	4604      	mov	r4, r0
 8007778:	b930      	cbnz	r0, 8007788 <__d2b+0x24>
 800777a:	4602      	mov	r2, r0
 800777c:	4b23      	ldr	r3, [pc, #140]	@ (800780c <__d2b+0xa8>)
 800777e:	4824      	ldr	r0, [pc, #144]	@ (8007810 <__d2b+0xac>)
 8007780:	f240 310f 	movw	r1, #783	@ 0x30f
 8007784:	f000 fae6 	bl	8007d54 <__assert_func>
 8007788:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800778c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007790:	b10d      	cbz	r5, 8007796 <__d2b+0x32>
 8007792:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007796:	9301      	str	r3, [sp, #4]
 8007798:	f1b8 0300 	subs.w	r3, r8, #0
 800779c:	d023      	beq.n	80077e6 <__d2b+0x82>
 800779e:	4668      	mov	r0, sp
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	f7ff fd84 	bl	80072ae <__lo0bits>
 80077a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80077aa:	b1d0      	cbz	r0, 80077e2 <__d2b+0x7e>
 80077ac:	f1c0 0320 	rsb	r3, r0, #32
 80077b0:	fa02 f303 	lsl.w	r3, r2, r3
 80077b4:	430b      	orrs	r3, r1
 80077b6:	40c2      	lsrs	r2, r0
 80077b8:	6163      	str	r3, [r4, #20]
 80077ba:	9201      	str	r2, [sp, #4]
 80077bc:	9b01      	ldr	r3, [sp, #4]
 80077be:	61a3      	str	r3, [r4, #24]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	bf0c      	ite	eq
 80077c4:	2201      	moveq	r2, #1
 80077c6:	2202      	movne	r2, #2
 80077c8:	6122      	str	r2, [r4, #16]
 80077ca:	b1a5      	cbz	r5, 80077f6 <__d2b+0x92>
 80077cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80077d0:	4405      	add	r5, r0
 80077d2:	603d      	str	r5, [r7, #0]
 80077d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80077d8:	6030      	str	r0, [r6, #0]
 80077da:	4620      	mov	r0, r4
 80077dc:	b003      	add	sp, #12
 80077de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077e2:	6161      	str	r1, [r4, #20]
 80077e4:	e7ea      	b.n	80077bc <__d2b+0x58>
 80077e6:	a801      	add	r0, sp, #4
 80077e8:	f7ff fd61 	bl	80072ae <__lo0bits>
 80077ec:	9b01      	ldr	r3, [sp, #4]
 80077ee:	6163      	str	r3, [r4, #20]
 80077f0:	3020      	adds	r0, #32
 80077f2:	2201      	movs	r2, #1
 80077f4:	e7e8      	b.n	80077c8 <__d2b+0x64>
 80077f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80077fe:	6038      	str	r0, [r7, #0]
 8007800:	6918      	ldr	r0, [r3, #16]
 8007802:	f7ff fd35 	bl	8007270 <__hi0bits>
 8007806:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800780a:	e7e5      	b.n	80077d8 <__d2b+0x74>
 800780c:	080080fc 	.word	0x080080fc
 8007810:	0800810d 	.word	0x0800810d

08007814 <__sfputc_r>:
 8007814:	6893      	ldr	r3, [r2, #8]
 8007816:	3b01      	subs	r3, #1
 8007818:	2b00      	cmp	r3, #0
 800781a:	b410      	push	{r4}
 800781c:	6093      	str	r3, [r2, #8]
 800781e:	da08      	bge.n	8007832 <__sfputc_r+0x1e>
 8007820:	6994      	ldr	r4, [r2, #24]
 8007822:	42a3      	cmp	r3, r4
 8007824:	db01      	blt.n	800782a <__sfputc_r+0x16>
 8007826:	290a      	cmp	r1, #10
 8007828:	d103      	bne.n	8007832 <__sfputc_r+0x1e>
 800782a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800782e:	f000 b9df 	b.w	8007bf0 <__swbuf_r>
 8007832:	6813      	ldr	r3, [r2, #0]
 8007834:	1c58      	adds	r0, r3, #1
 8007836:	6010      	str	r0, [r2, #0]
 8007838:	7019      	strb	r1, [r3, #0]
 800783a:	4608      	mov	r0, r1
 800783c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007840:	4770      	bx	lr

08007842 <__sfputs_r>:
 8007842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007844:	4606      	mov	r6, r0
 8007846:	460f      	mov	r7, r1
 8007848:	4614      	mov	r4, r2
 800784a:	18d5      	adds	r5, r2, r3
 800784c:	42ac      	cmp	r4, r5
 800784e:	d101      	bne.n	8007854 <__sfputs_r+0x12>
 8007850:	2000      	movs	r0, #0
 8007852:	e007      	b.n	8007864 <__sfputs_r+0x22>
 8007854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007858:	463a      	mov	r2, r7
 800785a:	4630      	mov	r0, r6
 800785c:	f7ff ffda 	bl	8007814 <__sfputc_r>
 8007860:	1c43      	adds	r3, r0, #1
 8007862:	d1f3      	bne.n	800784c <__sfputs_r+0xa>
 8007864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007868 <_vfiprintf_r>:
 8007868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786c:	460d      	mov	r5, r1
 800786e:	b09d      	sub	sp, #116	@ 0x74
 8007870:	4614      	mov	r4, r2
 8007872:	4698      	mov	r8, r3
 8007874:	4606      	mov	r6, r0
 8007876:	b118      	cbz	r0, 8007880 <_vfiprintf_r+0x18>
 8007878:	6a03      	ldr	r3, [r0, #32]
 800787a:	b90b      	cbnz	r3, 8007880 <_vfiprintf_r+0x18>
 800787c:	f7fe fbec 	bl	8006058 <__sinit>
 8007880:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007882:	07d9      	lsls	r1, r3, #31
 8007884:	d405      	bmi.n	8007892 <_vfiprintf_r+0x2a>
 8007886:	89ab      	ldrh	r3, [r5, #12]
 8007888:	059a      	lsls	r2, r3, #22
 800788a:	d402      	bmi.n	8007892 <_vfiprintf_r+0x2a>
 800788c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800788e:	f7fe fcec 	bl	800626a <__retarget_lock_acquire_recursive>
 8007892:	89ab      	ldrh	r3, [r5, #12]
 8007894:	071b      	lsls	r3, r3, #28
 8007896:	d501      	bpl.n	800789c <_vfiprintf_r+0x34>
 8007898:	692b      	ldr	r3, [r5, #16]
 800789a:	b99b      	cbnz	r3, 80078c4 <_vfiprintf_r+0x5c>
 800789c:	4629      	mov	r1, r5
 800789e:	4630      	mov	r0, r6
 80078a0:	f000 f9e4 	bl	8007c6c <__swsetup_r>
 80078a4:	b170      	cbz	r0, 80078c4 <_vfiprintf_r+0x5c>
 80078a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078a8:	07dc      	lsls	r4, r3, #31
 80078aa:	d504      	bpl.n	80078b6 <_vfiprintf_r+0x4e>
 80078ac:	f04f 30ff 	mov.w	r0, #4294967295
 80078b0:	b01d      	add	sp, #116	@ 0x74
 80078b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078b6:	89ab      	ldrh	r3, [r5, #12]
 80078b8:	0598      	lsls	r0, r3, #22
 80078ba:	d4f7      	bmi.n	80078ac <_vfiprintf_r+0x44>
 80078bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078be:	f7fe fcd5 	bl	800626c <__retarget_lock_release_recursive>
 80078c2:	e7f3      	b.n	80078ac <_vfiprintf_r+0x44>
 80078c4:	2300      	movs	r3, #0
 80078c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80078c8:	2320      	movs	r3, #32
 80078ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80078d2:	2330      	movs	r3, #48	@ 0x30
 80078d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007a84 <_vfiprintf_r+0x21c>
 80078d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078dc:	f04f 0901 	mov.w	r9, #1
 80078e0:	4623      	mov	r3, r4
 80078e2:	469a      	mov	sl, r3
 80078e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078e8:	b10a      	cbz	r2, 80078ee <_vfiprintf_r+0x86>
 80078ea:	2a25      	cmp	r2, #37	@ 0x25
 80078ec:	d1f9      	bne.n	80078e2 <_vfiprintf_r+0x7a>
 80078ee:	ebba 0b04 	subs.w	fp, sl, r4
 80078f2:	d00b      	beq.n	800790c <_vfiprintf_r+0xa4>
 80078f4:	465b      	mov	r3, fp
 80078f6:	4622      	mov	r2, r4
 80078f8:	4629      	mov	r1, r5
 80078fa:	4630      	mov	r0, r6
 80078fc:	f7ff ffa1 	bl	8007842 <__sfputs_r>
 8007900:	3001      	adds	r0, #1
 8007902:	f000 80a7 	beq.w	8007a54 <_vfiprintf_r+0x1ec>
 8007906:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007908:	445a      	add	r2, fp
 800790a:	9209      	str	r2, [sp, #36]	@ 0x24
 800790c:	f89a 3000 	ldrb.w	r3, [sl]
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 809f 	beq.w	8007a54 <_vfiprintf_r+0x1ec>
 8007916:	2300      	movs	r3, #0
 8007918:	f04f 32ff 	mov.w	r2, #4294967295
 800791c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007920:	f10a 0a01 	add.w	sl, sl, #1
 8007924:	9304      	str	r3, [sp, #16]
 8007926:	9307      	str	r3, [sp, #28]
 8007928:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800792c:	931a      	str	r3, [sp, #104]	@ 0x68
 800792e:	4654      	mov	r4, sl
 8007930:	2205      	movs	r2, #5
 8007932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007936:	4853      	ldr	r0, [pc, #332]	@ (8007a84 <_vfiprintf_r+0x21c>)
 8007938:	f7f8 fc4a 	bl	80001d0 <memchr>
 800793c:	9a04      	ldr	r2, [sp, #16]
 800793e:	b9d8      	cbnz	r0, 8007978 <_vfiprintf_r+0x110>
 8007940:	06d1      	lsls	r1, r2, #27
 8007942:	bf44      	itt	mi
 8007944:	2320      	movmi	r3, #32
 8007946:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800794a:	0713      	lsls	r3, r2, #28
 800794c:	bf44      	itt	mi
 800794e:	232b      	movmi	r3, #43	@ 0x2b
 8007950:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007954:	f89a 3000 	ldrb.w	r3, [sl]
 8007958:	2b2a      	cmp	r3, #42	@ 0x2a
 800795a:	d015      	beq.n	8007988 <_vfiprintf_r+0x120>
 800795c:	9a07      	ldr	r2, [sp, #28]
 800795e:	4654      	mov	r4, sl
 8007960:	2000      	movs	r0, #0
 8007962:	f04f 0c0a 	mov.w	ip, #10
 8007966:	4621      	mov	r1, r4
 8007968:	f811 3b01 	ldrb.w	r3, [r1], #1
 800796c:	3b30      	subs	r3, #48	@ 0x30
 800796e:	2b09      	cmp	r3, #9
 8007970:	d94b      	bls.n	8007a0a <_vfiprintf_r+0x1a2>
 8007972:	b1b0      	cbz	r0, 80079a2 <_vfiprintf_r+0x13a>
 8007974:	9207      	str	r2, [sp, #28]
 8007976:	e014      	b.n	80079a2 <_vfiprintf_r+0x13a>
 8007978:	eba0 0308 	sub.w	r3, r0, r8
 800797c:	fa09 f303 	lsl.w	r3, r9, r3
 8007980:	4313      	orrs	r3, r2
 8007982:	9304      	str	r3, [sp, #16]
 8007984:	46a2      	mov	sl, r4
 8007986:	e7d2      	b.n	800792e <_vfiprintf_r+0xc6>
 8007988:	9b03      	ldr	r3, [sp, #12]
 800798a:	1d19      	adds	r1, r3, #4
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	9103      	str	r1, [sp, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	bfbb      	ittet	lt
 8007994:	425b      	neglt	r3, r3
 8007996:	f042 0202 	orrlt.w	r2, r2, #2
 800799a:	9307      	strge	r3, [sp, #28]
 800799c:	9307      	strlt	r3, [sp, #28]
 800799e:	bfb8      	it	lt
 80079a0:	9204      	strlt	r2, [sp, #16]
 80079a2:	7823      	ldrb	r3, [r4, #0]
 80079a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80079a6:	d10a      	bne.n	80079be <_vfiprintf_r+0x156>
 80079a8:	7863      	ldrb	r3, [r4, #1]
 80079aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80079ac:	d132      	bne.n	8007a14 <_vfiprintf_r+0x1ac>
 80079ae:	9b03      	ldr	r3, [sp, #12]
 80079b0:	1d1a      	adds	r2, r3, #4
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	9203      	str	r2, [sp, #12]
 80079b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079ba:	3402      	adds	r4, #2
 80079bc:	9305      	str	r3, [sp, #20]
 80079be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007a94 <_vfiprintf_r+0x22c>
 80079c2:	7821      	ldrb	r1, [r4, #0]
 80079c4:	2203      	movs	r2, #3
 80079c6:	4650      	mov	r0, sl
 80079c8:	f7f8 fc02 	bl	80001d0 <memchr>
 80079cc:	b138      	cbz	r0, 80079de <_vfiprintf_r+0x176>
 80079ce:	9b04      	ldr	r3, [sp, #16]
 80079d0:	eba0 000a 	sub.w	r0, r0, sl
 80079d4:	2240      	movs	r2, #64	@ 0x40
 80079d6:	4082      	lsls	r2, r0
 80079d8:	4313      	orrs	r3, r2
 80079da:	3401      	adds	r4, #1
 80079dc:	9304      	str	r3, [sp, #16]
 80079de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079e2:	4829      	ldr	r0, [pc, #164]	@ (8007a88 <_vfiprintf_r+0x220>)
 80079e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80079e8:	2206      	movs	r2, #6
 80079ea:	f7f8 fbf1 	bl	80001d0 <memchr>
 80079ee:	2800      	cmp	r0, #0
 80079f0:	d03f      	beq.n	8007a72 <_vfiprintf_r+0x20a>
 80079f2:	4b26      	ldr	r3, [pc, #152]	@ (8007a8c <_vfiprintf_r+0x224>)
 80079f4:	bb1b      	cbnz	r3, 8007a3e <_vfiprintf_r+0x1d6>
 80079f6:	9b03      	ldr	r3, [sp, #12]
 80079f8:	3307      	adds	r3, #7
 80079fa:	f023 0307 	bic.w	r3, r3, #7
 80079fe:	3308      	adds	r3, #8
 8007a00:	9303      	str	r3, [sp, #12]
 8007a02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a04:	443b      	add	r3, r7
 8007a06:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a08:	e76a      	b.n	80078e0 <_vfiprintf_r+0x78>
 8007a0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a0e:	460c      	mov	r4, r1
 8007a10:	2001      	movs	r0, #1
 8007a12:	e7a8      	b.n	8007966 <_vfiprintf_r+0xfe>
 8007a14:	2300      	movs	r3, #0
 8007a16:	3401      	adds	r4, #1
 8007a18:	9305      	str	r3, [sp, #20]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	f04f 0c0a 	mov.w	ip, #10
 8007a20:	4620      	mov	r0, r4
 8007a22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a26:	3a30      	subs	r2, #48	@ 0x30
 8007a28:	2a09      	cmp	r2, #9
 8007a2a:	d903      	bls.n	8007a34 <_vfiprintf_r+0x1cc>
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0c6      	beq.n	80079be <_vfiprintf_r+0x156>
 8007a30:	9105      	str	r1, [sp, #20]
 8007a32:	e7c4      	b.n	80079be <_vfiprintf_r+0x156>
 8007a34:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a38:	4604      	mov	r4, r0
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e7f0      	b.n	8007a20 <_vfiprintf_r+0x1b8>
 8007a3e:	ab03      	add	r3, sp, #12
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	462a      	mov	r2, r5
 8007a44:	4b12      	ldr	r3, [pc, #72]	@ (8007a90 <_vfiprintf_r+0x228>)
 8007a46:	a904      	add	r1, sp, #16
 8007a48:	4630      	mov	r0, r6
 8007a4a:	f7fd fec3 	bl	80057d4 <_printf_float>
 8007a4e:	4607      	mov	r7, r0
 8007a50:	1c78      	adds	r0, r7, #1
 8007a52:	d1d6      	bne.n	8007a02 <_vfiprintf_r+0x19a>
 8007a54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a56:	07d9      	lsls	r1, r3, #31
 8007a58:	d405      	bmi.n	8007a66 <_vfiprintf_r+0x1fe>
 8007a5a:	89ab      	ldrh	r3, [r5, #12]
 8007a5c:	059a      	lsls	r2, r3, #22
 8007a5e:	d402      	bmi.n	8007a66 <_vfiprintf_r+0x1fe>
 8007a60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a62:	f7fe fc03 	bl	800626c <__retarget_lock_release_recursive>
 8007a66:	89ab      	ldrh	r3, [r5, #12]
 8007a68:	065b      	lsls	r3, r3, #25
 8007a6a:	f53f af1f 	bmi.w	80078ac <_vfiprintf_r+0x44>
 8007a6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a70:	e71e      	b.n	80078b0 <_vfiprintf_r+0x48>
 8007a72:	ab03      	add	r3, sp, #12
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	462a      	mov	r2, r5
 8007a78:	4b05      	ldr	r3, [pc, #20]	@ (8007a90 <_vfiprintf_r+0x228>)
 8007a7a:	a904      	add	r1, sp, #16
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	f7fe f941 	bl	8005d04 <_printf_i>
 8007a82:	e7e4      	b.n	8007a4e <_vfiprintf_r+0x1e6>
 8007a84:	08008166 	.word	0x08008166
 8007a88:	08008170 	.word	0x08008170
 8007a8c:	080057d5 	.word	0x080057d5
 8007a90:	08007843 	.word	0x08007843
 8007a94:	0800816c 	.word	0x0800816c

08007a98 <__sflush_r>:
 8007a98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aa0:	0716      	lsls	r6, r2, #28
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	d454      	bmi.n	8007b52 <__sflush_r+0xba>
 8007aa8:	684b      	ldr	r3, [r1, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	dc02      	bgt.n	8007ab4 <__sflush_r+0x1c>
 8007aae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	dd48      	ble.n	8007b46 <__sflush_r+0xae>
 8007ab4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ab6:	2e00      	cmp	r6, #0
 8007ab8:	d045      	beq.n	8007b46 <__sflush_r+0xae>
 8007aba:	2300      	movs	r3, #0
 8007abc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ac0:	682f      	ldr	r7, [r5, #0]
 8007ac2:	6a21      	ldr	r1, [r4, #32]
 8007ac4:	602b      	str	r3, [r5, #0]
 8007ac6:	d030      	beq.n	8007b2a <__sflush_r+0x92>
 8007ac8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	0759      	lsls	r1, r3, #29
 8007ace:	d505      	bpl.n	8007adc <__sflush_r+0x44>
 8007ad0:	6863      	ldr	r3, [r4, #4]
 8007ad2:	1ad2      	subs	r2, r2, r3
 8007ad4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007ad6:	b10b      	cbz	r3, 8007adc <__sflush_r+0x44>
 8007ad8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ada:	1ad2      	subs	r2, r2, r3
 8007adc:	2300      	movs	r3, #0
 8007ade:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ae0:	6a21      	ldr	r1, [r4, #32]
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	47b0      	blx	r6
 8007ae6:	1c43      	adds	r3, r0, #1
 8007ae8:	89a3      	ldrh	r3, [r4, #12]
 8007aea:	d106      	bne.n	8007afa <__sflush_r+0x62>
 8007aec:	6829      	ldr	r1, [r5, #0]
 8007aee:	291d      	cmp	r1, #29
 8007af0:	d82b      	bhi.n	8007b4a <__sflush_r+0xb2>
 8007af2:	4a2a      	ldr	r2, [pc, #168]	@ (8007b9c <__sflush_r+0x104>)
 8007af4:	40ca      	lsrs	r2, r1
 8007af6:	07d6      	lsls	r6, r2, #31
 8007af8:	d527      	bpl.n	8007b4a <__sflush_r+0xb2>
 8007afa:	2200      	movs	r2, #0
 8007afc:	6062      	str	r2, [r4, #4]
 8007afe:	04d9      	lsls	r1, r3, #19
 8007b00:	6922      	ldr	r2, [r4, #16]
 8007b02:	6022      	str	r2, [r4, #0]
 8007b04:	d504      	bpl.n	8007b10 <__sflush_r+0x78>
 8007b06:	1c42      	adds	r2, r0, #1
 8007b08:	d101      	bne.n	8007b0e <__sflush_r+0x76>
 8007b0a:	682b      	ldr	r3, [r5, #0]
 8007b0c:	b903      	cbnz	r3, 8007b10 <__sflush_r+0x78>
 8007b0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b12:	602f      	str	r7, [r5, #0]
 8007b14:	b1b9      	cbz	r1, 8007b46 <__sflush_r+0xae>
 8007b16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b1a:	4299      	cmp	r1, r3
 8007b1c:	d002      	beq.n	8007b24 <__sflush_r+0x8c>
 8007b1e:	4628      	mov	r0, r5
 8007b20:	f7ff f9fe 	bl	8006f20 <_free_r>
 8007b24:	2300      	movs	r3, #0
 8007b26:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b28:	e00d      	b.n	8007b46 <__sflush_r+0xae>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	47b0      	blx	r6
 8007b30:	4602      	mov	r2, r0
 8007b32:	1c50      	adds	r0, r2, #1
 8007b34:	d1c9      	bne.n	8007aca <__sflush_r+0x32>
 8007b36:	682b      	ldr	r3, [r5, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d0c6      	beq.n	8007aca <__sflush_r+0x32>
 8007b3c:	2b1d      	cmp	r3, #29
 8007b3e:	d001      	beq.n	8007b44 <__sflush_r+0xac>
 8007b40:	2b16      	cmp	r3, #22
 8007b42:	d11e      	bne.n	8007b82 <__sflush_r+0xea>
 8007b44:	602f      	str	r7, [r5, #0]
 8007b46:	2000      	movs	r0, #0
 8007b48:	e022      	b.n	8007b90 <__sflush_r+0xf8>
 8007b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b4e:	b21b      	sxth	r3, r3
 8007b50:	e01b      	b.n	8007b8a <__sflush_r+0xf2>
 8007b52:	690f      	ldr	r7, [r1, #16]
 8007b54:	2f00      	cmp	r7, #0
 8007b56:	d0f6      	beq.n	8007b46 <__sflush_r+0xae>
 8007b58:	0793      	lsls	r3, r2, #30
 8007b5a:	680e      	ldr	r6, [r1, #0]
 8007b5c:	bf08      	it	eq
 8007b5e:	694b      	ldreq	r3, [r1, #20]
 8007b60:	600f      	str	r7, [r1, #0]
 8007b62:	bf18      	it	ne
 8007b64:	2300      	movne	r3, #0
 8007b66:	eba6 0807 	sub.w	r8, r6, r7
 8007b6a:	608b      	str	r3, [r1, #8]
 8007b6c:	f1b8 0f00 	cmp.w	r8, #0
 8007b70:	dde9      	ble.n	8007b46 <__sflush_r+0xae>
 8007b72:	6a21      	ldr	r1, [r4, #32]
 8007b74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b76:	4643      	mov	r3, r8
 8007b78:	463a      	mov	r2, r7
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	47b0      	blx	r6
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	dc08      	bgt.n	8007b94 <__sflush_r+0xfc>
 8007b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b8a:	81a3      	strh	r3, [r4, #12]
 8007b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b94:	4407      	add	r7, r0
 8007b96:	eba8 0800 	sub.w	r8, r8, r0
 8007b9a:	e7e7      	b.n	8007b6c <__sflush_r+0xd4>
 8007b9c:	20400001 	.word	0x20400001

08007ba0 <_fflush_r>:
 8007ba0:	b538      	push	{r3, r4, r5, lr}
 8007ba2:	690b      	ldr	r3, [r1, #16]
 8007ba4:	4605      	mov	r5, r0
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	b913      	cbnz	r3, 8007bb0 <_fflush_r+0x10>
 8007baa:	2500      	movs	r5, #0
 8007bac:	4628      	mov	r0, r5
 8007bae:	bd38      	pop	{r3, r4, r5, pc}
 8007bb0:	b118      	cbz	r0, 8007bba <_fflush_r+0x1a>
 8007bb2:	6a03      	ldr	r3, [r0, #32]
 8007bb4:	b90b      	cbnz	r3, 8007bba <_fflush_r+0x1a>
 8007bb6:	f7fe fa4f 	bl	8006058 <__sinit>
 8007bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d0f3      	beq.n	8007baa <_fflush_r+0xa>
 8007bc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007bc4:	07d0      	lsls	r0, r2, #31
 8007bc6:	d404      	bmi.n	8007bd2 <_fflush_r+0x32>
 8007bc8:	0599      	lsls	r1, r3, #22
 8007bca:	d402      	bmi.n	8007bd2 <_fflush_r+0x32>
 8007bcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bce:	f7fe fb4c 	bl	800626a <__retarget_lock_acquire_recursive>
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	f7ff ff5f 	bl	8007a98 <__sflush_r>
 8007bda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bdc:	07da      	lsls	r2, r3, #31
 8007bde:	4605      	mov	r5, r0
 8007be0:	d4e4      	bmi.n	8007bac <_fflush_r+0xc>
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	059b      	lsls	r3, r3, #22
 8007be6:	d4e1      	bmi.n	8007bac <_fflush_r+0xc>
 8007be8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bea:	f7fe fb3f 	bl	800626c <__retarget_lock_release_recursive>
 8007bee:	e7dd      	b.n	8007bac <_fflush_r+0xc>

08007bf0 <__swbuf_r>:
 8007bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf2:	460e      	mov	r6, r1
 8007bf4:	4614      	mov	r4, r2
 8007bf6:	4605      	mov	r5, r0
 8007bf8:	b118      	cbz	r0, 8007c02 <__swbuf_r+0x12>
 8007bfa:	6a03      	ldr	r3, [r0, #32]
 8007bfc:	b90b      	cbnz	r3, 8007c02 <__swbuf_r+0x12>
 8007bfe:	f7fe fa2b 	bl	8006058 <__sinit>
 8007c02:	69a3      	ldr	r3, [r4, #24]
 8007c04:	60a3      	str	r3, [r4, #8]
 8007c06:	89a3      	ldrh	r3, [r4, #12]
 8007c08:	071a      	lsls	r2, r3, #28
 8007c0a:	d501      	bpl.n	8007c10 <__swbuf_r+0x20>
 8007c0c:	6923      	ldr	r3, [r4, #16]
 8007c0e:	b943      	cbnz	r3, 8007c22 <__swbuf_r+0x32>
 8007c10:	4621      	mov	r1, r4
 8007c12:	4628      	mov	r0, r5
 8007c14:	f000 f82a 	bl	8007c6c <__swsetup_r>
 8007c18:	b118      	cbz	r0, 8007c22 <__swbuf_r+0x32>
 8007c1a:	f04f 37ff 	mov.w	r7, #4294967295
 8007c1e:	4638      	mov	r0, r7
 8007c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	6922      	ldr	r2, [r4, #16]
 8007c26:	1a98      	subs	r0, r3, r2
 8007c28:	6963      	ldr	r3, [r4, #20]
 8007c2a:	b2f6      	uxtb	r6, r6
 8007c2c:	4283      	cmp	r3, r0
 8007c2e:	4637      	mov	r7, r6
 8007c30:	dc05      	bgt.n	8007c3e <__swbuf_r+0x4e>
 8007c32:	4621      	mov	r1, r4
 8007c34:	4628      	mov	r0, r5
 8007c36:	f7ff ffb3 	bl	8007ba0 <_fflush_r>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d1ed      	bne.n	8007c1a <__swbuf_r+0x2a>
 8007c3e:	68a3      	ldr	r3, [r4, #8]
 8007c40:	3b01      	subs	r3, #1
 8007c42:	60a3      	str	r3, [r4, #8]
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	1c5a      	adds	r2, r3, #1
 8007c48:	6022      	str	r2, [r4, #0]
 8007c4a:	701e      	strb	r6, [r3, #0]
 8007c4c:	6962      	ldr	r2, [r4, #20]
 8007c4e:	1c43      	adds	r3, r0, #1
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d004      	beq.n	8007c5e <__swbuf_r+0x6e>
 8007c54:	89a3      	ldrh	r3, [r4, #12]
 8007c56:	07db      	lsls	r3, r3, #31
 8007c58:	d5e1      	bpl.n	8007c1e <__swbuf_r+0x2e>
 8007c5a:	2e0a      	cmp	r6, #10
 8007c5c:	d1df      	bne.n	8007c1e <__swbuf_r+0x2e>
 8007c5e:	4621      	mov	r1, r4
 8007c60:	4628      	mov	r0, r5
 8007c62:	f7ff ff9d 	bl	8007ba0 <_fflush_r>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d0d9      	beq.n	8007c1e <__swbuf_r+0x2e>
 8007c6a:	e7d6      	b.n	8007c1a <__swbuf_r+0x2a>

08007c6c <__swsetup_r>:
 8007c6c:	b538      	push	{r3, r4, r5, lr}
 8007c6e:	4b29      	ldr	r3, [pc, #164]	@ (8007d14 <__swsetup_r+0xa8>)
 8007c70:	4605      	mov	r5, r0
 8007c72:	6818      	ldr	r0, [r3, #0]
 8007c74:	460c      	mov	r4, r1
 8007c76:	b118      	cbz	r0, 8007c80 <__swsetup_r+0x14>
 8007c78:	6a03      	ldr	r3, [r0, #32]
 8007c7a:	b90b      	cbnz	r3, 8007c80 <__swsetup_r+0x14>
 8007c7c:	f7fe f9ec 	bl	8006058 <__sinit>
 8007c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c84:	0719      	lsls	r1, r3, #28
 8007c86:	d422      	bmi.n	8007cce <__swsetup_r+0x62>
 8007c88:	06da      	lsls	r2, r3, #27
 8007c8a:	d407      	bmi.n	8007c9c <__swsetup_r+0x30>
 8007c8c:	2209      	movs	r2, #9
 8007c8e:	602a      	str	r2, [r5, #0]
 8007c90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c94:	81a3      	strh	r3, [r4, #12]
 8007c96:	f04f 30ff 	mov.w	r0, #4294967295
 8007c9a:	e033      	b.n	8007d04 <__swsetup_r+0x98>
 8007c9c:	0758      	lsls	r0, r3, #29
 8007c9e:	d512      	bpl.n	8007cc6 <__swsetup_r+0x5a>
 8007ca0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ca2:	b141      	cbz	r1, 8007cb6 <__swsetup_r+0x4a>
 8007ca4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ca8:	4299      	cmp	r1, r3
 8007caa:	d002      	beq.n	8007cb2 <__swsetup_r+0x46>
 8007cac:	4628      	mov	r0, r5
 8007cae:	f7ff f937 	bl	8006f20 <_free_r>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cb6:	89a3      	ldrh	r3, [r4, #12]
 8007cb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007cbc:	81a3      	strh	r3, [r4, #12]
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	6063      	str	r3, [r4, #4]
 8007cc2:	6923      	ldr	r3, [r4, #16]
 8007cc4:	6023      	str	r3, [r4, #0]
 8007cc6:	89a3      	ldrh	r3, [r4, #12]
 8007cc8:	f043 0308 	orr.w	r3, r3, #8
 8007ccc:	81a3      	strh	r3, [r4, #12]
 8007cce:	6923      	ldr	r3, [r4, #16]
 8007cd0:	b94b      	cbnz	r3, 8007ce6 <__swsetup_r+0x7a>
 8007cd2:	89a3      	ldrh	r3, [r4, #12]
 8007cd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007cd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cdc:	d003      	beq.n	8007ce6 <__swsetup_r+0x7a>
 8007cde:	4621      	mov	r1, r4
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	f000 f8c1 	bl	8007e68 <__smakebuf_r>
 8007ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cea:	f013 0201 	ands.w	r2, r3, #1
 8007cee:	d00a      	beq.n	8007d06 <__swsetup_r+0x9a>
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	60a2      	str	r2, [r4, #8]
 8007cf4:	6962      	ldr	r2, [r4, #20]
 8007cf6:	4252      	negs	r2, r2
 8007cf8:	61a2      	str	r2, [r4, #24]
 8007cfa:	6922      	ldr	r2, [r4, #16]
 8007cfc:	b942      	cbnz	r2, 8007d10 <__swsetup_r+0xa4>
 8007cfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d02:	d1c5      	bne.n	8007c90 <__swsetup_r+0x24>
 8007d04:	bd38      	pop	{r3, r4, r5, pc}
 8007d06:	0799      	lsls	r1, r3, #30
 8007d08:	bf58      	it	pl
 8007d0a:	6962      	ldrpl	r2, [r4, #20]
 8007d0c:	60a2      	str	r2, [r4, #8]
 8007d0e:	e7f4      	b.n	8007cfa <__swsetup_r+0x8e>
 8007d10:	2000      	movs	r0, #0
 8007d12:	e7f7      	b.n	8007d04 <__swsetup_r+0x98>
 8007d14:	20000018 	.word	0x20000018

08007d18 <_sbrk_r>:
 8007d18:	b538      	push	{r3, r4, r5, lr}
 8007d1a:	4d06      	ldr	r5, [pc, #24]	@ (8007d34 <_sbrk_r+0x1c>)
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	4604      	mov	r4, r0
 8007d20:	4608      	mov	r0, r1
 8007d22:	602b      	str	r3, [r5, #0]
 8007d24:	f7f9 fc6e 	bl	8001604 <_sbrk>
 8007d28:	1c43      	adds	r3, r0, #1
 8007d2a:	d102      	bne.n	8007d32 <_sbrk_r+0x1a>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	b103      	cbz	r3, 8007d32 <_sbrk_r+0x1a>
 8007d30:	6023      	str	r3, [r4, #0]
 8007d32:	bd38      	pop	{r3, r4, r5, pc}
 8007d34:	20000434 	.word	0x20000434

08007d38 <memcpy>:
 8007d38:	440a      	add	r2, r1
 8007d3a:	4291      	cmp	r1, r2
 8007d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d40:	d100      	bne.n	8007d44 <memcpy+0xc>
 8007d42:	4770      	bx	lr
 8007d44:	b510      	push	{r4, lr}
 8007d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d4e:	4291      	cmp	r1, r2
 8007d50:	d1f9      	bne.n	8007d46 <memcpy+0xe>
 8007d52:	bd10      	pop	{r4, pc}

08007d54 <__assert_func>:
 8007d54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d56:	4614      	mov	r4, r2
 8007d58:	461a      	mov	r2, r3
 8007d5a:	4b09      	ldr	r3, [pc, #36]	@ (8007d80 <__assert_func+0x2c>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4605      	mov	r5, r0
 8007d60:	68d8      	ldr	r0, [r3, #12]
 8007d62:	b14c      	cbz	r4, 8007d78 <__assert_func+0x24>
 8007d64:	4b07      	ldr	r3, [pc, #28]	@ (8007d84 <__assert_func+0x30>)
 8007d66:	9100      	str	r1, [sp, #0]
 8007d68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d6c:	4906      	ldr	r1, [pc, #24]	@ (8007d88 <__assert_func+0x34>)
 8007d6e:	462b      	mov	r3, r5
 8007d70:	f000 f842 	bl	8007df8 <fiprintf>
 8007d74:	f000 f8d6 	bl	8007f24 <abort>
 8007d78:	4b04      	ldr	r3, [pc, #16]	@ (8007d8c <__assert_func+0x38>)
 8007d7a:	461c      	mov	r4, r3
 8007d7c:	e7f3      	b.n	8007d66 <__assert_func+0x12>
 8007d7e:	bf00      	nop
 8007d80:	20000018 	.word	0x20000018
 8007d84:	08008181 	.word	0x08008181
 8007d88:	0800818e 	.word	0x0800818e
 8007d8c:	080081bc 	.word	0x080081bc

08007d90 <_calloc_r>:
 8007d90:	b570      	push	{r4, r5, r6, lr}
 8007d92:	fba1 5402 	umull	r5, r4, r1, r2
 8007d96:	b934      	cbnz	r4, 8007da6 <_calloc_r+0x16>
 8007d98:	4629      	mov	r1, r5
 8007d9a:	f7ff f935 	bl	8007008 <_malloc_r>
 8007d9e:	4606      	mov	r6, r0
 8007da0:	b928      	cbnz	r0, 8007dae <_calloc_r+0x1e>
 8007da2:	4630      	mov	r0, r6
 8007da4:	bd70      	pop	{r4, r5, r6, pc}
 8007da6:	220c      	movs	r2, #12
 8007da8:	6002      	str	r2, [r0, #0]
 8007daa:	2600      	movs	r6, #0
 8007dac:	e7f9      	b.n	8007da2 <_calloc_r+0x12>
 8007dae:	462a      	mov	r2, r5
 8007db0:	4621      	mov	r1, r4
 8007db2:	f7fe f9dc 	bl	800616e <memset>
 8007db6:	e7f4      	b.n	8007da2 <_calloc_r+0x12>

08007db8 <__ascii_mbtowc>:
 8007db8:	b082      	sub	sp, #8
 8007dba:	b901      	cbnz	r1, 8007dbe <__ascii_mbtowc+0x6>
 8007dbc:	a901      	add	r1, sp, #4
 8007dbe:	b142      	cbz	r2, 8007dd2 <__ascii_mbtowc+0x1a>
 8007dc0:	b14b      	cbz	r3, 8007dd6 <__ascii_mbtowc+0x1e>
 8007dc2:	7813      	ldrb	r3, [r2, #0]
 8007dc4:	600b      	str	r3, [r1, #0]
 8007dc6:	7812      	ldrb	r2, [r2, #0]
 8007dc8:	1e10      	subs	r0, r2, #0
 8007dca:	bf18      	it	ne
 8007dcc:	2001      	movne	r0, #1
 8007dce:	b002      	add	sp, #8
 8007dd0:	4770      	bx	lr
 8007dd2:	4610      	mov	r0, r2
 8007dd4:	e7fb      	b.n	8007dce <__ascii_mbtowc+0x16>
 8007dd6:	f06f 0001 	mvn.w	r0, #1
 8007dda:	e7f8      	b.n	8007dce <__ascii_mbtowc+0x16>

08007ddc <__ascii_wctomb>:
 8007ddc:	4603      	mov	r3, r0
 8007dde:	4608      	mov	r0, r1
 8007de0:	b141      	cbz	r1, 8007df4 <__ascii_wctomb+0x18>
 8007de2:	2aff      	cmp	r2, #255	@ 0xff
 8007de4:	d904      	bls.n	8007df0 <__ascii_wctomb+0x14>
 8007de6:	228a      	movs	r2, #138	@ 0x8a
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	f04f 30ff 	mov.w	r0, #4294967295
 8007dee:	4770      	bx	lr
 8007df0:	700a      	strb	r2, [r1, #0]
 8007df2:	2001      	movs	r0, #1
 8007df4:	4770      	bx	lr
	...

08007df8 <fiprintf>:
 8007df8:	b40e      	push	{r1, r2, r3}
 8007dfa:	b503      	push	{r0, r1, lr}
 8007dfc:	4601      	mov	r1, r0
 8007dfe:	ab03      	add	r3, sp, #12
 8007e00:	4805      	ldr	r0, [pc, #20]	@ (8007e18 <fiprintf+0x20>)
 8007e02:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e06:	6800      	ldr	r0, [r0, #0]
 8007e08:	9301      	str	r3, [sp, #4]
 8007e0a:	f7ff fd2d 	bl	8007868 <_vfiprintf_r>
 8007e0e:	b002      	add	sp, #8
 8007e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e14:	b003      	add	sp, #12
 8007e16:	4770      	bx	lr
 8007e18:	20000018 	.word	0x20000018

08007e1c <__swhatbuf_r>:
 8007e1c:	b570      	push	{r4, r5, r6, lr}
 8007e1e:	460c      	mov	r4, r1
 8007e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e24:	2900      	cmp	r1, #0
 8007e26:	b096      	sub	sp, #88	@ 0x58
 8007e28:	4615      	mov	r5, r2
 8007e2a:	461e      	mov	r6, r3
 8007e2c:	da0d      	bge.n	8007e4a <__swhatbuf_r+0x2e>
 8007e2e:	89a3      	ldrh	r3, [r4, #12]
 8007e30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e34:	f04f 0100 	mov.w	r1, #0
 8007e38:	bf14      	ite	ne
 8007e3a:	2340      	movne	r3, #64	@ 0x40
 8007e3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e40:	2000      	movs	r0, #0
 8007e42:	6031      	str	r1, [r6, #0]
 8007e44:	602b      	str	r3, [r5, #0]
 8007e46:	b016      	add	sp, #88	@ 0x58
 8007e48:	bd70      	pop	{r4, r5, r6, pc}
 8007e4a:	466a      	mov	r2, sp
 8007e4c:	f000 f848 	bl	8007ee0 <_fstat_r>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	dbec      	blt.n	8007e2e <__swhatbuf_r+0x12>
 8007e54:	9901      	ldr	r1, [sp, #4]
 8007e56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e5e:	4259      	negs	r1, r3
 8007e60:	4159      	adcs	r1, r3
 8007e62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e66:	e7eb      	b.n	8007e40 <__swhatbuf_r+0x24>

08007e68 <__smakebuf_r>:
 8007e68:	898b      	ldrh	r3, [r1, #12]
 8007e6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e6c:	079d      	lsls	r5, r3, #30
 8007e6e:	4606      	mov	r6, r0
 8007e70:	460c      	mov	r4, r1
 8007e72:	d507      	bpl.n	8007e84 <__smakebuf_r+0x1c>
 8007e74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e78:	6023      	str	r3, [r4, #0]
 8007e7a:	6123      	str	r3, [r4, #16]
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	6163      	str	r3, [r4, #20]
 8007e80:	b003      	add	sp, #12
 8007e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e84:	ab01      	add	r3, sp, #4
 8007e86:	466a      	mov	r2, sp
 8007e88:	f7ff ffc8 	bl	8007e1c <__swhatbuf_r>
 8007e8c:	9f00      	ldr	r7, [sp, #0]
 8007e8e:	4605      	mov	r5, r0
 8007e90:	4639      	mov	r1, r7
 8007e92:	4630      	mov	r0, r6
 8007e94:	f7ff f8b8 	bl	8007008 <_malloc_r>
 8007e98:	b948      	cbnz	r0, 8007eae <__smakebuf_r+0x46>
 8007e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e9e:	059a      	lsls	r2, r3, #22
 8007ea0:	d4ee      	bmi.n	8007e80 <__smakebuf_r+0x18>
 8007ea2:	f023 0303 	bic.w	r3, r3, #3
 8007ea6:	f043 0302 	orr.w	r3, r3, #2
 8007eaa:	81a3      	strh	r3, [r4, #12]
 8007eac:	e7e2      	b.n	8007e74 <__smakebuf_r+0xc>
 8007eae:	89a3      	ldrh	r3, [r4, #12]
 8007eb0:	6020      	str	r0, [r4, #0]
 8007eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eb6:	81a3      	strh	r3, [r4, #12]
 8007eb8:	9b01      	ldr	r3, [sp, #4]
 8007eba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ebe:	b15b      	cbz	r3, 8007ed8 <__smakebuf_r+0x70>
 8007ec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	f000 f81d 	bl	8007f04 <_isatty_r>
 8007eca:	b128      	cbz	r0, 8007ed8 <__smakebuf_r+0x70>
 8007ecc:	89a3      	ldrh	r3, [r4, #12]
 8007ece:	f023 0303 	bic.w	r3, r3, #3
 8007ed2:	f043 0301 	orr.w	r3, r3, #1
 8007ed6:	81a3      	strh	r3, [r4, #12]
 8007ed8:	89a3      	ldrh	r3, [r4, #12]
 8007eda:	431d      	orrs	r5, r3
 8007edc:	81a5      	strh	r5, [r4, #12]
 8007ede:	e7cf      	b.n	8007e80 <__smakebuf_r+0x18>

08007ee0 <_fstat_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	4d07      	ldr	r5, [pc, #28]	@ (8007f00 <_fstat_r+0x20>)
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	4608      	mov	r0, r1
 8007eea:	4611      	mov	r1, r2
 8007eec:	602b      	str	r3, [r5, #0]
 8007eee:	f7f9 fb60 	bl	80015b2 <_fstat>
 8007ef2:	1c43      	adds	r3, r0, #1
 8007ef4:	d102      	bne.n	8007efc <_fstat_r+0x1c>
 8007ef6:	682b      	ldr	r3, [r5, #0]
 8007ef8:	b103      	cbz	r3, 8007efc <_fstat_r+0x1c>
 8007efa:	6023      	str	r3, [r4, #0]
 8007efc:	bd38      	pop	{r3, r4, r5, pc}
 8007efe:	bf00      	nop
 8007f00:	20000434 	.word	0x20000434

08007f04 <_isatty_r>:
 8007f04:	b538      	push	{r3, r4, r5, lr}
 8007f06:	4d06      	ldr	r5, [pc, #24]	@ (8007f20 <_isatty_r+0x1c>)
 8007f08:	2300      	movs	r3, #0
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	4608      	mov	r0, r1
 8007f0e:	602b      	str	r3, [r5, #0]
 8007f10:	f7f9 fb5f 	bl	80015d2 <_isatty>
 8007f14:	1c43      	adds	r3, r0, #1
 8007f16:	d102      	bne.n	8007f1e <_isatty_r+0x1a>
 8007f18:	682b      	ldr	r3, [r5, #0]
 8007f1a:	b103      	cbz	r3, 8007f1e <_isatty_r+0x1a>
 8007f1c:	6023      	str	r3, [r4, #0]
 8007f1e:	bd38      	pop	{r3, r4, r5, pc}
 8007f20:	20000434 	.word	0x20000434

08007f24 <abort>:
 8007f24:	b508      	push	{r3, lr}
 8007f26:	2006      	movs	r0, #6
 8007f28:	f000 f82c 	bl	8007f84 <raise>
 8007f2c:	2001      	movs	r0, #1
 8007f2e:	f7f9 faf0 	bl	8001512 <_exit>

08007f32 <_raise_r>:
 8007f32:	291f      	cmp	r1, #31
 8007f34:	b538      	push	{r3, r4, r5, lr}
 8007f36:	4605      	mov	r5, r0
 8007f38:	460c      	mov	r4, r1
 8007f3a:	d904      	bls.n	8007f46 <_raise_r+0x14>
 8007f3c:	2316      	movs	r3, #22
 8007f3e:	6003      	str	r3, [r0, #0]
 8007f40:	f04f 30ff 	mov.w	r0, #4294967295
 8007f44:	bd38      	pop	{r3, r4, r5, pc}
 8007f46:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007f48:	b112      	cbz	r2, 8007f50 <_raise_r+0x1e>
 8007f4a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f4e:	b94b      	cbnz	r3, 8007f64 <_raise_r+0x32>
 8007f50:	4628      	mov	r0, r5
 8007f52:	f000 f831 	bl	8007fb8 <_getpid_r>
 8007f56:	4622      	mov	r2, r4
 8007f58:	4601      	mov	r1, r0
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f60:	f000 b818 	b.w	8007f94 <_kill_r>
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d00a      	beq.n	8007f7e <_raise_r+0x4c>
 8007f68:	1c59      	adds	r1, r3, #1
 8007f6a:	d103      	bne.n	8007f74 <_raise_r+0x42>
 8007f6c:	2316      	movs	r3, #22
 8007f6e:	6003      	str	r3, [r0, #0]
 8007f70:	2001      	movs	r0, #1
 8007f72:	e7e7      	b.n	8007f44 <_raise_r+0x12>
 8007f74:	2100      	movs	r1, #0
 8007f76:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	4798      	blx	r3
 8007f7e:	2000      	movs	r0, #0
 8007f80:	e7e0      	b.n	8007f44 <_raise_r+0x12>
	...

08007f84 <raise>:
 8007f84:	4b02      	ldr	r3, [pc, #8]	@ (8007f90 <raise+0xc>)
 8007f86:	4601      	mov	r1, r0
 8007f88:	6818      	ldr	r0, [r3, #0]
 8007f8a:	f7ff bfd2 	b.w	8007f32 <_raise_r>
 8007f8e:	bf00      	nop
 8007f90:	20000018 	.word	0x20000018

08007f94 <_kill_r>:
 8007f94:	b538      	push	{r3, r4, r5, lr}
 8007f96:	4d07      	ldr	r5, [pc, #28]	@ (8007fb4 <_kill_r+0x20>)
 8007f98:	2300      	movs	r3, #0
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	4608      	mov	r0, r1
 8007f9e:	4611      	mov	r1, r2
 8007fa0:	602b      	str	r3, [r5, #0]
 8007fa2:	f7f9 faa6 	bl	80014f2 <_kill>
 8007fa6:	1c43      	adds	r3, r0, #1
 8007fa8:	d102      	bne.n	8007fb0 <_kill_r+0x1c>
 8007faa:	682b      	ldr	r3, [r5, #0]
 8007fac:	b103      	cbz	r3, 8007fb0 <_kill_r+0x1c>
 8007fae:	6023      	str	r3, [r4, #0]
 8007fb0:	bd38      	pop	{r3, r4, r5, pc}
 8007fb2:	bf00      	nop
 8007fb4:	20000434 	.word	0x20000434

08007fb8 <_getpid_r>:
 8007fb8:	f7f9 ba93 	b.w	80014e2 <_getpid>

08007fbc <_init>:
 8007fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fbe:	bf00      	nop
 8007fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc2:	bc08      	pop	{r3}
 8007fc4:	469e      	mov	lr, r3
 8007fc6:	4770      	bx	lr

08007fc8 <_fini>:
 8007fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fca:	bf00      	nop
 8007fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fce:	bc08      	pop	{r3}
 8007fd0:	469e      	mov	lr, r3
 8007fd2:	4770      	bx	lr
