
11_SPI_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001084  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001210  08001210  00002210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001260  08001260  00003004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001260  08001260  00002260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001268  08001268  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001268  08001268  00002268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800126c  0800126c  0000226c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001270  00003000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00003004  2**0
                  CONTENTS
 10 .bss          00000060  20000004  20000004  00003004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000064  20000064  00003004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000022f7  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000696  00000000  00000000  0000532b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000228  00000000  00000000  000059c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000195  00000000  00000000  00005bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002193  00000000  00000000  00005d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000026b2  00000000  00000000  00007f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000ac19  00000000  00000000  0000a5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000151e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000864  00000000  00000000  00015228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00015a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000004 	.word	0x20000004
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080011f8 	.word	0x080011f8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000008 	.word	0x20000008
 80001c8:	080011f8 	.word	0x080011f8

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <GPIO_PeriClockControl>:
#include "GPIO_driver.h"

/*peripheral clock setup */
void GPIO_PeriClockControl(GPIO_Regdef_t *pGPIOx , uint8_t EnorDi)
{
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	460b      	mov	r3, r1
 80001e6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80001e8:	78fb      	ldrb	r3, [r7, #3]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d157      	bne.n	800029e <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80001f4:	d106      	bne.n	8000204 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80001f6:	4b58      	ldr	r3, [pc, #352]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80001f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001fa:	4a57      	ldr	r2, [pc, #348]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80001fc:	f043 0301 	orr.w	r3, r3, #1
 8000200:	64d3      	str	r3, [r2, #76]	@ 0x4c
				else if(pGPIOx==GPIOH)
				{
					GPIOH_PCLK_DI();
				}
	}
}
 8000202:	e0a3      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOB)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4a55      	ldr	r2, [pc, #340]	@ (800035c <GPIO_PeriClockControl+0x180>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d106      	bne.n	800021a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800020c:	4b52      	ldr	r3, [pc, #328]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800020e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000210:	4a51      	ldr	r2, [pc, #324]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000212:	f043 0302 	orr.w	r3, r3, #2
 8000216:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000218:	e098      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOC)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4a50      	ldr	r2, [pc, #320]	@ (8000360 <GPIO_PeriClockControl+0x184>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d106      	bne.n	8000230 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000222:	4b4d      	ldr	r3, [pc, #308]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000226:	4a4c      	ldr	r2, [pc, #304]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000228:	f043 0304 	orr.w	r3, r3, #4
 800022c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800022e:	e08d      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOD)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a4c      	ldr	r2, [pc, #304]	@ (8000364 <GPIO_PeriClockControl+0x188>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d106      	bne.n	8000246 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000238:	4b47      	ldr	r3, [pc, #284]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800023a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800023c:	4a46      	ldr	r2, [pc, #280]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800023e:	f043 0308 	orr.w	r3, r3, #8
 8000242:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000244:	e082      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOE)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4a47      	ldr	r2, [pc, #284]	@ (8000368 <GPIO_PeriClockControl+0x18c>)
 800024a:	4293      	cmp	r3, r2
 800024c:	d106      	bne.n	800025c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800024e:	4b42      	ldr	r3, [pc, #264]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000252:	4a41      	ldr	r2, [pc, #260]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000254:	f043 0310 	orr.w	r3, r3, #16
 8000258:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800025a:	e077      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOF)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	4a43      	ldr	r2, [pc, #268]	@ (800036c <GPIO_PeriClockControl+0x190>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d106      	bne.n	8000272 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000264:	4b3c      	ldr	r3, [pc, #240]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000268:	4a3b      	ldr	r2, [pc, #236]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800026a:	f043 0320 	orr.w	r3, r3, #32
 800026e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000270:	e06c      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOG)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4a3e      	ldr	r2, [pc, #248]	@ (8000370 <GPIO_PeriClockControl+0x194>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d106      	bne.n	8000288 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800027a:	4b37      	ldr	r3, [pc, #220]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800027c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800027e:	4a36      	ldr	r2, [pc, #216]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000284:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000286:	e061      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOH)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4a3a      	ldr	r2, [pc, #232]	@ (8000374 <GPIO_PeriClockControl+0x198>)
 800028c:	4293      	cmp	r3, r2
 800028e:	d15d      	bne.n	800034c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000290:	4b31      	ldr	r3, [pc, #196]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000294:	4a30      	ldr	r2, [pc, #192]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800029a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800029c:	e056      	b.n	800034c <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80002a4:	d106      	bne.n	80002b4 <GPIO_PeriClockControl+0xd8>
					GPIOA_PCLK_DI();
 80002a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002aa:	4a2b      	ldr	r2, [pc, #172]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002ac:	f023 0301 	bic.w	r3, r3, #1
 80002b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002b2:	e04b      	b.n	800034c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOB)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a29      	ldr	r2, [pc, #164]	@ (800035c <GPIO_PeriClockControl+0x180>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d106      	bne.n	80002ca <GPIO_PeriClockControl+0xee>
					GPIOB_PCLK_DI();
 80002bc:	4b26      	ldr	r3, [pc, #152]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002c0:	4a25      	ldr	r2, [pc, #148]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002c2:	f023 0302 	bic.w	r3, r3, #2
 80002c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002c8:	e040      	b.n	800034c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOC)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4a24      	ldr	r2, [pc, #144]	@ (8000360 <GPIO_PeriClockControl+0x184>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d106      	bne.n	80002e0 <GPIO_PeriClockControl+0x104>
					GPIOC_PCLK_DI();
 80002d2:	4b21      	ldr	r3, [pc, #132]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002d6:	4a20      	ldr	r2, [pc, #128]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002d8:	f023 0304 	bic.w	r3, r3, #4
 80002dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002de:	e035      	b.n	800034c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOD)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4a20      	ldr	r2, [pc, #128]	@ (8000364 <GPIO_PeriClockControl+0x188>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d106      	bne.n	80002f6 <GPIO_PeriClockControl+0x11a>
					GPIOD_PCLK_DI();
 80002e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ec:	4a1a      	ldr	r2, [pc, #104]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002ee:	f023 0308 	bic.w	r3, r3, #8
 80002f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002f4:	e02a      	b.n	800034c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOE)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000368 <GPIO_PeriClockControl+0x18c>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d106      	bne.n	800030c <GPIO_PeriClockControl+0x130>
					GPIOE_PCLK_DI();
 80002fe:	4b16      	ldr	r3, [pc, #88]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000302:	4a15      	ldr	r2, [pc, #84]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000304:	f023 0310 	bic.w	r3, r3, #16
 8000308:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800030a:	e01f      	b.n	800034c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOF)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a17      	ldr	r2, [pc, #92]	@ (800036c <GPIO_PeriClockControl+0x190>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d106      	bne.n	8000322 <GPIO_PeriClockControl+0x146>
					GPIOF_PCLK_DI();
 8000314:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000318:	4a0f      	ldr	r2, [pc, #60]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800031a:	f023 0320 	bic.w	r3, r3, #32
 800031e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000320:	e014      	b.n	800034c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOG)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a12      	ldr	r2, [pc, #72]	@ (8000370 <GPIO_PeriClockControl+0x194>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d106      	bne.n	8000338 <GPIO_PeriClockControl+0x15c>
					GPIOG_PCLK_DI();
 800032a:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800032e:	4a0a      	ldr	r2, [pc, #40]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000330:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000334:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000336:	e009      	b.n	800034c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOH)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a0e      	ldr	r2, [pc, #56]	@ (8000374 <GPIO_PeriClockControl+0x198>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d105      	bne.n	800034c <GPIO_PeriClockControl+0x170>
					GPIOH_PCLK_DI();
 8000340:	4b05      	ldr	r3, [pc, #20]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000344:	4a04      	ldr	r2, [pc, #16]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000346:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800034a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	40021000 	.word	0x40021000
 800035c:	48000400 	.word	0x48000400
 8000360:	48000800 	.word	0x48000800
 8000364:	48000c00 	.word	0x48000c00
 8000368:	48001000 	.word	0x48001000
 800036c:	48001400 	.word	0x48001400
 8000370:	48001800 	.word	0x48001800
 8000374:	48001c00 	.word	0x48001c00

08000378 <GPIO_Init>:

/*Init and Deinit */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000378:	b480      	push	{r7}
 800037a:	b087      	sub	sp, #28
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	795b      	ldrb	r3, [r3, #5]
 8000388:	2b03      	cmp	r3, #3
 800038a:	d822      	bhi.n	80003d2 <GPIO_Init+0x5a>
	{
		temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	795b      	ldrb	r3, [r3, #5]
 8000390:	461a      	mov	r2, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	791b      	ldrb	r3, [r3, #4]
 8000396:	005b      	lsls	r3, r3, #1
 8000398:	fa02 f303 	lsl.w	r3, r2, r3
 800039c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	791b      	ldrb	r3, [r3, #4]
 80003a8:	005b      	lsls	r3, r3, #1
 80003aa:	2103      	movs	r1, #3
 80003ac:	fa01 f303 	lsl.w	r3, r1, r3
 80003b0:	43db      	mvns	r3, r3
 80003b2:	4619      	mov	r1, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	400a      	ands	r2, r1
 80003ba:	601a      	str	r2, [r3, #0]
		pGPIOHandle ->pGPIOx->MODER |= temp;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	6819      	ldr	r1, [r3, #0]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	697a      	ldr	r2, [r7, #20]
 80003c8:	430a      	orrs	r2, r1
 80003ca:	601a      	str	r2, [r3, #0]
		temp=0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
 80003d0:	e0e1      	b.n	8000596 <GPIO_Init+0x21e>
	}
	else{
		temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	795b      	ldrb	r3, [r3, #5]
 80003d6:	461a      	mov	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	791b      	ldrb	r3, [r3, #4]
 80003dc:	005b      	lsls	r3, r3, #1
 80003de:	fa02 f303 	lsl.w	r3, r2, r3
 80003e2:	617b      	str	r3, [r7, #20]
				pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	791b      	ldrb	r3, [r3, #4]
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	2103      	movs	r1, #3
 80003f2:	fa01 f303 	lsl.w	r3, r1, r3
 80003f6:	43db      	mvns	r3, r3
 80003f8:	4619      	mov	r1, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	400a      	ands	r2, r1
 8000400:	601a      	str	r2, [r3, #0]
				pGPIOHandle ->pGPIOx->MODER |= temp;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	6819      	ldr	r1, [r3, #0]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	697a      	ldr	r2, [r7, #20]
 800040e:	430a      	orrs	r2, r1
 8000410:	601a      	str	r2, [r3, #0]
				temp=0;
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	795b      	ldrb	r3, [r3, #5]
 800041a:	2b04      	cmp	r3, #4
 800041c:	d117      	bne.n	800044e <GPIO_Init+0xd6>
		{
			EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800041e:	4b47      	ldr	r3, [pc, #284]	@ (800053c <GPIO_Init+0x1c4>)
 8000420:	68db      	ldr	r3, [r3, #12]
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	7912      	ldrb	r2, [r2, #4]
 8000426:	4611      	mov	r1, r2
 8000428:	2201      	movs	r2, #1
 800042a:	408a      	lsls	r2, r1
 800042c:	4611      	mov	r1, r2
 800042e:	4a43      	ldr	r2, [pc, #268]	@ (800053c <GPIO_Init+0x1c4>)
 8000430:	430b      	orrs	r3, r1
 8000432:	60d3      	str	r3, [r2, #12]

			EXTI->RTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000434:	4b41      	ldr	r3, [pc, #260]	@ (800053c <GPIO_Init+0x1c4>)
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	7912      	ldrb	r2, [r2, #4]
 800043c:	4611      	mov	r1, r2
 800043e:	2201      	movs	r2, #1
 8000440:	408a      	lsls	r2, r1
 8000442:	43d2      	mvns	r2, r2
 8000444:	4611      	mov	r1, r2
 8000446:	4a3d      	ldr	r2, [pc, #244]	@ (800053c <GPIO_Init+0x1c4>)
 8000448:	400b      	ands	r3, r1
 800044a:	6093      	str	r3, [r2, #8]
 800044c:	e035      	b.n	80004ba <GPIO_Init+0x142>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	795b      	ldrb	r3, [r3, #5]
 8000452:	2b05      	cmp	r3, #5
 8000454:	d117      	bne.n	8000486 <GPIO_Init+0x10e>
		{
			EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000456:	4b39      	ldr	r3, [pc, #228]	@ (800053c <GPIO_Init+0x1c4>)
 8000458:	689b      	ldr	r3, [r3, #8]
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	7912      	ldrb	r2, [r2, #4]
 800045e:	4611      	mov	r1, r2
 8000460:	2201      	movs	r2, #1
 8000462:	408a      	lsls	r2, r1
 8000464:	4611      	mov	r1, r2
 8000466:	4a35      	ldr	r2, [pc, #212]	@ (800053c <GPIO_Init+0x1c4>)
 8000468:	430b      	orrs	r3, r1
 800046a:	6093      	str	r3, [r2, #8]

			EXTI->FTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800046c:	4b33      	ldr	r3, [pc, #204]	@ (800053c <GPIO_Init+0x1c4>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	7912      	ldrb	r2, [r2, #4]
 8000474:	4611      	mov	r1, r2
 8000476:	2201      	movs	r2, #1
 8000478:	408a      	lsls	r2, r1
 800047a:	43d2      	mvns	r2, r2
 800047c:	4611      	mov	r1, r2
 800047e:	4a2f      	ldr	r2, [pc, #188]	@ (800053c <GPIO_Init+0x1c4>)
 8000480:	400b      	ands	r3, r1
 8000482:	60d3      	str	r3, [r2, #12]
 8000484:	e019      	b.n	80004ba <GPIO_Init+0x142>

		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	795b      	ldrb	r3, [r3, #5]
 800048a:	2b06      	cmp	r3, #6
 800048c:	d115      	bne.n	80004ba <GPIO_Init+0x142>
		{
			EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800048e:	4b2b      	ldr	r3, [pc, #172]	@ (800053c <GPIO_Init+0x1c4>)
 8000490:	68db      	ldr	r3, [r3, #12]
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	7912      	ldrb	r2, [r2, #4]
 8000496:	4611      	mov	r1, r2
 8000498:	2201      	movs	r2, #1
 800049a:	408a      	lsls	r2, r1
 800049c:	4611      	mov	r1, r2
 800049e:	4a27      	ldr	r2, [pc, #156]	@ (800053c <GPIO_Init+0x1c4>)
 80004a0:	430b      	orrs	r3, r1
 80004a2:	60d3      	str	r3, [r2, #12]

			EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80004a4:	4b25      	ldr	r3, [pc, #148]	@ (800053c <GPIO_Init+0x1c4>)
 80004a6:	689b      	ldr	r3, [r3, #8]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	7912      	ldrb	r2, [r2, #4]
 80004ac:	4611      	mov	r1, r2
 80004ae:	2201      	movs	r2, #1
 80004b0:	408a      	lsls	r2, r1
 80004b2:	4611      	mov	r1, r2
 80004b4:	4a21      	ldr	r2, [pc, #132]	@ (800053c <GPIO_Init+0x1c4>)
 80004b6:	430b      	orrs	r3, r1
 80004b8:	6093      	str	r3, [r2, #8]
		}
	 uint8_t temp1=pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber/4;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	791b      	ldrb	r3, [r3, #4]
 80004be:	089b      	lsrs	r3, r3, #2
 80004c0:	74fb      	strb	r3, [r7, #19]
	 uint8_t temp2=pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber%4;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	791b      	ldrb	r3, [r3, #4]
 80004c6:	f003 0303 	and.w	r3, r3, #3
 80004ca:	74bb      	strb	r3, [r7, #18]
	 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80004d4:	d042      	beq.n	800055c <GPIO_Init+0x1e4>
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a19      	ldr	r2, [pc, #100]	@ (8000540 <GPIO_Init+0x1c8>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d02b      	beq.n	8000538 <GPIO_Init+0x1c0>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a17      	ldr	r2, [pc, #92]	@ (8000544 <GPIO_Init+0x1cc>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d024      	beq.n	8000534 <GPIO_Init+0x1bc>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a16      	ldr	r2, [pc, #88]	@ (8000548 <GPIO_Init+0x1d0>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d01d      	beq.n	8000530 <GPIO_Init+0x1b8>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a14      	ldr	r2, [pc, #80]	@ (800054c <GPIO_Init+0x1d4>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d016      	beq.n	800052c <GPIO_Init+0x1b4>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a13      	ldr	r2, [pc, #76]	@ (8000550 <GPIO_Init+0x1d8>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d00f      	beq.n	8000528 <GPIO_Init+0x1b0>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a11      	ldr	r2, [pc, #68]	@ (8000554 <GPIO_Init+0x1dc>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d008      	beq.n	8000524 <GPIO_Init+0x1ac>
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a10      	ldr	r2, [pc, #64]	@ (8000558 <GPIO_Init+0x1e0>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d101      	bne.n	8000520 <GPIO_Init+0x1a8>
 800051c:	2307      	movs	r3, #7
 800051e:	e01e      	b.n	800055e <GPIO_Init+0x1e6>
 8000520:	2300      	movs	r3, #0
 8000522:	e01c      	b.n	800055e <GPIO_Init+0x1e6>
 8000524:	2306      	movs	r3, #6
 8000526:	e01a      	b.n	800055e <GPIO_Init+0x1e6>
 8000528:	2305      	movs	r3, #5
 800052a:	e018      	b.n	800055e <GPIO_Init+0x1e6>
 800052c:	2304      	movs	r3, #4
 800052e:	e016      	b.n	800055e <GPIO_Init+0x1e6>
 8000530:	2303      	movs	r3, #3
 8000532:	e014      	b.n	800055e <GPIO_Init+0x1e6>
 8000534:	2302      	movs	r3, #2
 8000536:	e012      	b.n	800055e <GPIO_Init+0x1e6>
 8000538:	2301      	movs	r3, #1
 800053a:	e010      	b.n	800055e <GPIO_Init+0x1e6>
 800053c:	40010400 	.word	0x40010400
 8000540:	48000400 	.word	0x48000400
 8000544:	48000800 	.word	0x48000800
 8000548:	48000c00 	.word	0x48000c00
 800054c:	48001000 	.word	0x48001000
 8000550:	48001400 	.word	0x48001400
 8000554:	48001800 	.word	0x48001800
 8000558:	48001c00 	.word	0x48001c00
 800055c:	2300      	movs	r3, #0
 800055e:	747b      	strb	r3, [r7, #17]
	 SYSCFG_PCLK_EN();
 8000560:	4b5e      	ldr	r3, [pc, #376]	@ (80006dc <GPIO_Init+0x364>)
 8000562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000564:	4a5d      	ldr	r2, [pc, #372]	@ (80006dc <GPIO_Init+0x364>)
 8000566:	f043 0301 	orr.w	r3, r3, #1
 800056a:	6613      	str	r3, [r2, #96]	@ 0x60
	 SYSCFG->EXTICR[temp1]=portcode << (temp2 * 4);
 800056c:	7c7a      	ldrb	r2, [r7, #17]
 800056e:	7cbb      	ldrb	r3, [r7, #18]
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	fa02 f103 	lsl.w	r1, r2, r3
 8000576:	4a5a      	ldr	r2, [pc, #360]	@ (80006e0 <GPIO_Init+0x368>)
 8000578:	7cfb      	ldrb	r3, [r7, #19]
 800057a:	3302      	adds	r3, #2
 800057c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 EXTI -> IMR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000580:	4b58      	ldr	r3, [pc, #352]	@ (80006e4 <GPIO_Init+0x36c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	7912      	ldrb	r2, [r2, #4]
 8000588:	4611      	mov	r1, r2
 800058a:	2201      	movs	r2, #1
 800058c:	408a      	lsls	r2, r1
 800058e:	4611      	mov	r1, r2
 8000590:	4a54      	ldr	r2, [pc, #336]	@ (80006e4 <GPIO_Init+0x36c>)
 8000592:	430b      	orrs	r3, r1
 8000594:	6013      	str	r3, [r2, #0]
	}

	temp=0;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
	temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	799b      	ldrb	r3, [r3, #6]
 800059e:	461a      	mov	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	791b      	ldrb	r3, [r3, #4]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	fa02 f303 	lsl.w	r3, r2, r3
 80005aa:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->OSPEEDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	689a      	ldr	r2, [r3, #8]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	791b      	ldrb	r3, [r3, #4]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	2103      	movs	r1, #3
 80005ba:	fa01 f303 	lsl.w	r3, r1, r3
 80005be:	43db      	mvns	r3, r3
 80005c0:	4619      	mov	r1, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	400a      	ands	r2, r1
 80005c8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6899      	ldr	r1, [r3, #8]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	430a      	orrs	r2, r1
 80005d8:	609a      	str	r2, [r3, #8]
	temp=0;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]

	temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	79db      	ldrb	r3, [r3, #7]
 80005e2:	461a      	mov	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	fa02 f303 	lsl.w	r3, r2, r3
 80005ee:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->PUPDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	68da      	ldr	r2, [r3, #12]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	791b      	ldrb	r3, [r3, #4]
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	2103      	movs	r1, #3
 80005fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000602:	43db      	mvns	r3, r3
 8000604:	4619      	mov	r1, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	400a      	ands	r2, r1
 800060c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	68d9      	ldr	r1, [r3, #12]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	697a      	ldr	r2, [r7, #20]
 800061a:	430a      	orrs	r2, r1
 800061c:	60da      	str	r2, [r3, #12]
	temp=0;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]

	temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType<<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	7a1b      	ldrb	r3, [r3, #8]
 8000626:	461a      	mov	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	fa02 f303 	lsl.w	r3, r2, r3
 8000630:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->OTYPER &= ~(0X01 << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	685a      	ldr	r2, [r3, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	4619      	mov	r1, r3
 800063e:	2301      	movs	r3, #1
 8000640:	408b      	lsls	r3, r1
 8000642:	43db      	mvns	r3, r3
 8000644:	4619      	mov	r1, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	400a      	ands	r2, r1
 800064c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	6859      	ldr	r1, [r3, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	430a      	orrs	r2, r1
 800065c:	605a      	str	r2, [r3, #4]
	temp=0;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	795b      	ldrb	r3, [r3, #5]
 8000666:	2b02      	cmp	r3, #2
 8000668:	d132      	bne.n	80006d0 <GPIO_Init+0x358>
	{
		uint32_t temp1 ,temp2;
		temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	791b      	ldrb	r3, [r3, #4]
 800066e:	08db      	lsrs	r3, r3, #3
 8000670:	b2db      	uxtb	r3, r3
 8000672:	60fb      	str	r3, [r7, #12]
		temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	791b      	ldrb	r3, [r3, #4]
 8000678:	f003 0307 	and.w	r3, r3, #7
 800067c:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0X0f<< (4*temp2));
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	3208      	adds	r2, #8
 8000686:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	210f      	movs	r1, #15
 8000690:	fa01 f303 	lsl.w	r3, r1, r3
 8000694:	43db      	mvns	r3, r3
 8000696:	4619      	mov	r1, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4011      	ands	r1, r2
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	3208      	adds	r2, #8
 80006a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	3208      	adds	r2, #8
 80006ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7a5b      	ldrb	r3, [r3, #9]
 80006b6:	4619      	mov	r1, r3
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	fa01 f303 	lsl.w	r3, r1, r3
 80006c0:	4619      	mov	r1, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4311      	orrs	r1, r2
 80006c8:	68fa      	ldr	r2, [r7, #12]
 80006ca:	3208      	adds	r2, #8
 80006cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80006d0:	bf00      	nop
 80006d2:	371c      	adds	r7, #28
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40010000 	.word	0x40010000
 80006e4:	40010400 	.word	0x40010400

080006e8 <SPI_PeriClockControl>:
/*
 *  Peripheral Clock configuration
 */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx , uint8_t EnorDi)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	460b      	mov	r3, r1
 80006f2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d120      	bne.n	800073c <SPI_PeriClockControl+0x54>
			{
				if(pSPIx == SPI1)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a22      	ldr	r2, [pc, #136]	@ (8000788 <SPI_PeriClockControl+0xa0>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d106      	bne.n	8000710 <SPI_PeriClockControl+0x28>
				{
					SPI1_PCLK_EN();
 8000702:	4b22      	ldr	r3, [pc, #136]	@ (800078c <SPI_PeriClockControl+0xa4>)
 8000704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000706:	4a21      	ldr	r2, [pc, #132]	@ (800078c <SPI_PeriClockControl+0xa4>)
 8000708:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800070c:	6613      	str	r3, [r2, #96]	@ 0x60
							SPI3_PCLK_DI();
						}

			}

}
 800070e:	e035      	b.n	800077c <SPI_PeriClockControl+0x94>
				else if(pSPIx==SPI2)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SPI_PeriClockControl+0xa8>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d106      	bne.n	8000726 <SPI_PeriClockControl+0x3e>
					SPI2_PCLK_EN();
 8000718:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <SPI_PeriClockControl+0xa4>)
 800071a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800071c:	4a1b      	ldr	r2, [pc, #108]	@ (800078c <SPI_PeriClockControl+0xa4>)
 800071e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000722:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000724:	e02a      	b.n	800077c <SPI_PeriClockControl+0x94>
				else if(pSPIx==SPI3)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a1a      	ldr	r2, [pc, #104]	@ (8000794 <SPI_PeriClockControl+0xac>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d126      	bne.n	800077c <SPI_PeriClockControl+0x94>
					SPI3_PCLK_EN();
 800072e:	4b17      	ldr	r3, [pc, #92]	@ (800078c <SPI_PeriClockControl+0xa4>)
 8000730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000732:	4a16      	ldr	r2, [pc, #88]	@ (800078c <SPI_PeriClockControl+0xa4>)
 8000734:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000738:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800073a:	e01f      	b.n	800077c <SPI_PeriClockControl+0x94>
				if(pSPIx == SPI1)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <SPI_PeriClockControl+0xa0>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d106      	bne.n	8000752 <SPI_PeriClockControl+0x6a>
							SPI1_PCLK_DI();
 8000744:	4b11      	ldr	r3, [pc, #68]	@ (800078c <SPI_PeriClockControl+0xa4>)
 8000746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000748:	4a10      	ldr	r2, [pc, #64]	@ (800078c <SPI_PeriClockControl+0xa4>)
 800074a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800074e:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8000750:	e014      	b.n	800077c <SPI_PeriClockControl+0x94>
						else if(pSPIx==SPI2)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a0e      	ldr	r2, [pc, #56]	@ (8000790 <SPI_PeriClockControl+0xa8>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d106      	bne.n	8000768 <SPI_PeriClockControl+0x80>
							SPI2_PCLK_DI();
 800075a:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <SPI_PeriClockControl+0xa4>)
 800075c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800075e:	4a0b      	ldr	r2, [pc, #44]	@ (800078c <SPI_PeriClockControl+0xa4>)
 8000760:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000764:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000766:	e009      	b.n	800077c <SPI_PeriClockControl+0x94>
						else if(pSPIx==SPI3)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a0a      	ldr	r2, [pc, #40]	@ (8000794 <SPI_PeriClockControl+0xac>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d105      	bne.n	800077c <SPI_PeriClockControl+0x94>
							SPI3_PCLK_DI();
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <SPI_PeriClockControl+0xa4>)
 8000772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000774:	4a05      	ldr	r2, [pc, #20]	@ (800078c <SPI_PeriClockControl+0xa4>)
 8000776:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800077a:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	40013000 	.word	0x40013000
 800078c:	40021000 	.word	0x40021000
 8000790:	40003800 	.word	0x40003800
 8000794:	40003c00 	.word	0x40003c00

08000798 <SPI_Init>:
/*
 *  Init and De-init
 */

void SPI_Init(SPI_Handle_t *pSPIHANDLE)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	// Configure the SPI_CR1 Register
	uint32_t tempreg=0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]

			SPI_PeriClockControl(pSPIHANDLE->pSPIx, ENABLE);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2101      	movs	r1, #1
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ff9c 	bl	80006e8 <SPI_PeriClockControl>

			// Configure the device mode
			tempreg |=pSPIHANDLE->SPIConfig.SPI_DeviceMode<<2;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	791b      	ldrb	r3, [r3, #4]
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	60fb      	str	r3, [r7, #12]

			//Configure the Bus config
			if(pSPIHANDLE->SPIConfig.SPI_BusConfig==SPI_BUS_CONFIG_FD)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	795b      	ldrb	r3, [r3, #5]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d104      	bne.n	80007ce <SPI_Init+0x36>
			{
				//  BIDI mode should be cleared
				tempreg &=~(1<<15);
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	e014      	b.n	80007f8 <SPI_Init+0x60>
			}
			else if(pSPIHANDLE->SPIConfig.SPI_BusConfig==SPI_BUS_CONFIG_HD)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	795b      	ldrb	r3, [r3, #5]
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d104      	bne.n	80007e0 <SPI_Init+0x48>
			{
				//  BIDI mode should be set
				tempreg |=(1<<15);
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	e00b      	b.n	80007f8 <SPI_Init+0x60>
			}
			else if(pSPIHANDLE->SPIConfig.SPI_BusConfig==SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	795b      	ldrb	r3, [r3, #5]
 80007e4:	2b03      	cmp	r3, #3
 80007e6:	d107      	bne.n	80007f8 <SPI_Init+0x60>
			{
				// BIDI mode should be cleared
				tempreg &=~(1<<15);
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80007ee:	60fb      	str	r3, [r7, #12]

				// RXONLY bit must be set
				tempreg |=(1<<10);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007f6:	60fb      	str	r3, [r7, #12]
			}

			// Configure the SPI Serial Clock Speed(baud rate)
			tempreg |=pSPIHANDLE->SPIConfig.SPI_SclkSpeed<<3;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	799b      	ldrb	r3, [r3, #6]
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	4313      	orrs	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]

			// Configure the CPOL
			tempreg |=pSPIHANDLE->SPIConfig.SPI_CPOL<<1;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	7a1b      	ldrb	r3, [r3, #8]
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	4313      	orrs	r3, r2
 800080e:	60fb      	str	r3, [r7, #12]

			// Configure the CPHA
			tempreg |=pSPIHANDLE->SPIConfig.SPI_CPHA<<0;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	7a5b      	ldrb	r3, [r3, #9]
 8000814:	461a      	mov	r2, r3
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	4313      	orrs	r3, r2
 800081a:	60fb      	str	r3, [r7, #12]

			pSPIHANDLE->pSPIx->CR1 |=tempreg;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	6819      	ldr	r1, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	430a      	orrs	r2, r1
 800082a:	601a      	str	r2, [r3, #0]

			tempreg=0;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]

			//// Configure the DFF
			tempreg |=pSPIHANDLE->SPIConfig.SPI_DFF<<8;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	79db      	ldrb	r3, [r3, #7]
 8000834:	021b      	lsls	r3, r3, #8
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	4313      	orrs	r3, r2
 800083a:	60fb      	str	r3, [r7, #12]

			pSPIHANDLE->pSPIx->CR2 |=tempreg;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	6859      	ldr	r1, [r3, #4]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	430a      	orrs	r2, r1
 800084a:	605a      	str	r2, [r3, #4]


}
 800084c:	bf00      	nop
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <SPI_PeripheralControl>:
	}
}

// Enable or disable SPI peripheral
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000860:	78fb      	ldrb	r3, [r7, #3]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d106      	bne.n	8000874 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << 6);  // Set SPE bit
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << 6);  // Clear SPE bit
	}
}
 8000872:	e005      	b.n	8000880 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << 6);  // Clear SPE bit
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	601a      	str	r2, [r3, #0]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <SPI_SSOEConfig>:
	}
}

// Configure SSOE (Slave Select Output Enable)
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d106      	bne.n	80008ac <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << 2);  // Set SSOE bit
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f043 0204 	orr.w	r2, r3, #4
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1 << 2);  // Clear SSOE bit
	}
}
 80008aa:	e005      	b.n	80008b8 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << 2);  // Clear SSOE bit
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	f023 0204 	bic.w	r2, r3, #4
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	605a      	str	r2, [r3, #4]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <SPI_SendDataIT>:

// Interrupt-based (non-blocking) send data function
uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b087      	sub	sp, #28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
    uint8_t state = pSPIHandle->TxState;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	7f1b      	ldrb	r3, [r3, #28]
 80008d4:	75fb      	strb	r3, [r7, #23]
    if (state != SPI_BUSY_IN_TX)
 80008d6:	7dfb      	ldrb	r3, [r7, #23]
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d010      	beq.n	80008fe <SPI_SendDataIT+0x3a>
    {
        pSPIHandle->pTxBuffer = pTxBuffer;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	60da      	str	r2, [r3, #12]
        pSPIHandle->TxLen     = Len;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	615a      	str	r2, [r3, #20]
        pSPIHandle->TxState   = SPI_BUSY_IN_TX;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	2202      	movs	r2, #2
 80008ec:	771a      	strb	r2, [r3, #28]
        pSPIHandle->pSPIx->CR2 |= (1U << SPI_CR2_TXEIE_Pos);
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	685a      	ldr	r2, [r3, #4]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80008fc:	605a      	str	r2, [r3, #4]
       /* if (pSPIHandle->pSPIx->SR & (1U << SPI_SR_TXE_Pos))
        {
            spi_txe_interrupt_handle(pSPIHandle);
        }*/
    }
    return state;
 80008fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000900:	4618      	mov	r0, r3
 8000902:	371c      	adds	r7, #28
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <SPI_IRQInterruptConfig>:
 *  IRQ Configuration and ISR Handling
 */

// Enable or disable SPI interrupt in NVIC
void SPI_IRQInterruptConfig(uint8_t IRQNumber,  uint8_t EnorDi)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	460a      	mov	r2, r1
 8000916:	71fb      	strb	r3, [r7, #7]
 8000918:	4613      	mov	r3, r2
 800091a:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 800091c:	79bb      	ldrb	r3, [r7, #6]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d133      	bne.n	800098a <SPI_IRQInterruptConfig+0x7e>
	{
		// NVIC ISER0 for IRQ 0-31
		if(IRQNumber <= 31)
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	2b1f      	cmp	r3, #31
 8000926:	d80a      	bhi.n	800093e <SPI_IRQInterruptConfig+0x32>
		{
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000928:	4b35      	ldr	r3, [pc, #212]	@ (8000a00 <SPI_IRQInterruptConfig+0xf4>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	79fa      	ldrb	r2, [r7, #7]
 800092e:	2101      	movs	r1, #1
 8000930:	fa01 f202 	lsl.w	r2, r1, r2
 8000934:	4611      	mov	r1, r2
 8000936:	4a32      	ldr	r2, [pc, #200]	@ (8000a00 <SPI_IRQInterruptConfig+0xf4>)
 8000938:	430b      	orrs	r3, r1
 800093a:	6013      	str	r3, [r2, #0]
		else if(IRQNumber >= 6 && IRQNumber < 96 )
		{
			*NVIC_ICER3 |= (1 << (IRQNumber % 64));
		}
	}
}
 800093c:	e059      	b.n	80009f2 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64 )
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	2b1f      	cmp	r3, #31
 8000942:	d90f      	bls.n	8000964 <SPI_IRQInterruptConfig+0x58>
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	2b3f      	cmp	r3, #63	@ 0x3f
 8000948:	d80c      	bhi.n	8000964 <SPI_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800094a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a04 <SPI_IRQInterruptConfig+0xf8>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	79fa      	ldrb	r2, [r7, #7]
 8000950:	f002 021f 	and.w	r2, r2, #31
 8000954:	2101      	movs	r1, #1
 8000956:	fa01 f202 	lsl.w	r2, r1, r2
 800095a:	4611      	mov	r1, r2
 800095c:	4a29      	ldr	r2, [pc, #164]	@ (8000a04 <SPI_IRQInterruptConfig+0xf8>)
 800095e:	430b      	orrs	r3, r1
 8000960:	6013      	str	r3, [r2, #0]
 8000962:	e046      	b.n	80009f2 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	2b3f      	cmp	r3, #63	@ 0x3f
 8000968:	d943      	bls.n	80009f2 <SPI_IRQInterruptConfig+0xe6>
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b5f      	cmp	r3, #95	@ 0x5f
 800096e:	d840      	bhi.n	80009f2 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= (1 << (IRQNumber % 64));
 8000970:	4b25      	ldr	r3, [pc, #148]	@ (8000a08 <SPI_IRQInterruptConfig+0xfc>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	79fa      	ldrb	r2, [r7, #7]
 8000976:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800097a:	2101      	movs	r1, #1
 800097c:	fa01 f202 	lsl.w	r2, r1, r2
 8000980:	4611      	mov	r1, r2
 8000982:	4a21      	ldr	r2, [pc, #132]	@ (8000a08 <SPI_IRQInterruptConfig+0xfc>)
 8000984:	430b      	orrs	r3, r1
 8000986:	6013      	str	r3, [r2, #0]
}
 8000988:	e033      	b.n	80009f2 <SPI_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	2b1f      	cmp	r3, #31
 800098e:	d80a      	bhi.n	80009a6 <SPI_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000990:	4b1e      	ldr	r3, [pc, #120]	@ (8000a0c <SPI_IRQInterruptConfig+0x100>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	79fa      	ldrb	r2, [r7, #7]
 8000996:	2101      	movs	r1, #1
 8000998:	fa01 f202 	lsl.w	r2, r1, r2
 800099c:	4611      	mov	r1, r2
 800099e:	4a1b      	ldr	r2, [pc, #108]	@ (8000a0c <SPI_IRQInterruptConfig+0x100>)
 80009a0:	430b      	orrs	r3, r1
 80009a2:	6013      	str	r3, [r2, #0]
}
 80009a4:	e025      	b.n	80009f2 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64 )
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	2b1f      	cmp	r3, #31
 80009aa:	d90f      	bls.n	80009cc <SPI_IRQInterruptConfig+0xc0>
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80009b0:	d80c      	bhi.n	80009cc <SPI_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80009b2:	4b17      	ldr	r3, [pc, #92]	@ (8000a10 <SPI_IRQInterruptConfig+0x104>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	79fa      	ldrb	r2, [r7, #7]
 80009b8:	f002 021f 	and.w	r2, r2, #31
 80009bc:	2101      	movs	r1, #1
 80009be:	fa01 f202 	lsl.w	r2, r1, r2
 80009c2:	4611      	mov	r1, r2
 80009c4:	4a12      	ldr	r2, [pc, #72]	@ (8000a10 <SPI_IRQInterruptConfig+0x104>)
 80009c6:	430b      	orrs	r3, r1
 80009c8:	6013      	str	r3, [r2, #0]
 80009ca:	e012      	b.n	80009f2 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	2b05      	cmp	r3, #5
 80009d0:	d90f      	bls.n	80009f2 <SPI_IRQInterruptConfig+0xe6>
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b5f      	cmp	r3, #95	@ 0x5f
 80009d6:	d80c      	bhi.n	80009f2 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= (1 << (IRQNumber % 64));
 80009d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <SPI_IRQInterruptConfig+0x108>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	79fa      	ldrb	r2, [r7, #7]
 80009de:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80009e2:	2101      	movs	r1, #1
 80009e4:	fa01 f202 	lsl.w	r2, r1, r2
 80009e8:	4611      	mov	r1, r2
 80009ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <SPI_IRQInterruptConfig+0x108>)
 80009ec:	430b      	orrs	r3, r1
 80009ee:	6013      	str	r3, [r2, #0]
}
 80009f0:	e7ff      	b.n	80009f2 <SPI_IRQInterruptConfig+0xe6>
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000e100 	.word	0xe000e100
 8000a04:	e000e104 	.word	0xe000e104
 8000a08:	e000e10c 	.word	0xe000e10c
 8000a0c:	e000e180 	.word	0xe000e180
 8000a10:	e000e184 	.word	0xe000e184
 8000a14:	e000e18c 	.word	0xe000e18c

08000a18 <SPI_IRQHandling>:
	*(NVIC_PR_BASE_ADDR + iprx) |=  (IRQPriority << shift_amount);
}

// Main SPI IRQ handling (checks different interrupt sources)
void SPI_IRQHandling(SPI_Handle_t *pSPIHandle)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
    uint8_t temp1, temp2;
    temp1 = (pSPIHandle->pSPIx->SR & (1 << SPI_SR_TXE_Pos));
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	73fb      	strb	r3, [r7, #15]
    temp2 = (pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_TXEIE_Pos));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000a3a:	73bb      	strb	r3, [r7, #14]
    if (temp1 && temp2)
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d005      	beq.n	8000a4e <SPI_IRQHandling+0x36>
 8000a42:	7bbb      	ldrb	r3, [r7, #14]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d002      	beq.n	8000a4e <SPI_IRQHandling+0x36>
    {
        spi_txe_interrupt_handle(pSPIHandle);
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f000 f832 	bl	8000ab2 <spi_txe_interrupt_handle>
    }
    temp1 = (pSPIHandle->pSPIx->SR & (1 << SPI_SR_RXNE_Pos));
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
    temp2 = (pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_RXNEIE_Pos));
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a68:	73bb      	strb	r3, [r7, #14]
    if (temp1 && temp2)
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d005      	beq.n	8000a7c <SPI_IRQHandling+0x64>
 8000a70:	7bbb      	ldrb	r3, [r7, #14]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d002      	beq.n	8000a7c <SPI_IRQHandling+0x64>
    {
        spi_rxne_interrupt_handle(pSPIHandle);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f000 f83e 	bl	8000af8 <spi_rxne_interrupt_handle>
    }
    temp1 = (pSPIHandle->pSPIx->SR & (1 << SPI_SR_OVR_Pos));
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a88:	73fb      	strb	r3, [r7, #15]
    temp2 = (pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_ERRIE_Pos));
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	f003 0320 	and.w	r3, r3, #32
 8000a96:	73bb      	strb	r3, [r7, #14]
    if (temp1 && temp2)
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d005      	beq.n	8000aaa <SPI_IRQHandling+0x92>
 8000a9e:	7bbb      	ldrb	r3, [r7, #14]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d002      	beq.n	8000aaa <SPI_IRQHandling+0x92>
    {
        spi_ovr_err_interrupt_handle(pSPIHandle);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f000 f84b 	bl	8000b40 <spi_ovr_err_interrupt_handle>
    }
}
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <spi_txe_interrupt_handle>:
// Handle TXE interrupt (send next byte)
static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->DR = *pSPIHandle->pTxBuffer;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	781a      	ldrb	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen--;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	615a      	str	r2, [r3, #20]
	pSPIHandle->pTxBuffer++;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	1c5a      	adds	r2, r3, #1
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	60da      	str	r2, [r3, #12]

	if(!pSPIHandle ->TxLen)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d106      	bne.n	8000af0 <spi_txe_interrupt_handle+0x3e>
	{
		SPI_CloseTransmisson(pSPIHandle);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f000 f85f 	bl	8000ba6 <SPI_CloseTransmisson>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_TX_CMPLT);
 8000ae8:	2101      	movs	r1, #1
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f000 faa0 	bl	8001030 <SPI_ApplicationEventCallback>
	}
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <spi_rxne_interrupt_handle>:



// Handle RXNE interrupt (read received byte)
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	*(pSPIHandle->pRxBuffer) = (uint8_t)pSPIHandle->pSPIx->DR;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	68da      	ldr	r2, [r3, #12]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	691b      	ldr	r3, [r3, #16]
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	701a      	strb	r2, [r3, #0]
	pSPIHandle->RxLen--;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	1e5a      	subs	r2, r3, #1
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	619a      	str	r2, [r3, #24]
	pSPIHandle->pRxBuffer++;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	1c5a      	adds	r2, r3, #1
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	611a      	str	r2, [r3, #16]

	if(!pSPIHandle->RxLen) // Reception finished
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d106      	bne.n	8000b38 <spi_rxne_interrupt_handle+0x40>
	{
		SPI_CloseReception(pSPIHandle);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f000 f820 	bl	8000b70 <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_RX_CMPLT);
 8000b30:	2102      	movs	r1, #2
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f000 fa7c 	bl	8001030 <SPI_ApplicationEventCallback>
	}
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <spi_ovr_err_interrupt_handle>:

// Handle Overrun Error interrupt
static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	uint8_t temp;
	if(pSPIHandle->TxState != SPI_BUSY_IN_TX)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	7f1b      	ldrb	r3, [r3, #28]
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d007      	beq.n	8000b60 <spi_ovr_err_interrupt_handle+0x20>
	{
		// Clear OVR flag by reading DR and SR
		temp = pSPIHandle->pSPIx->DR;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp;
	SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_OVR_ERR);
 8000b60:	2103      	movs	r1, #3
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 fa64 	bl	8001030 <SPI_ApplicationEventCallback>
}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <SPI_CloseReception>:
	temp = pSPIx->SR;
	(void)temp;
}

void SPI_CloseReception(SPI_Handle_t *pSPIHandle)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~(1 << 6);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b86:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2200      	movs	r2, #0
 8000b98:	775a      	strb	r2, [r3, #29]
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <SPI_CloseTransmisson>:


// Close reception (reset state, disable interrupt)
void SPI_CloseTransmisson(SPI_Handle_t *pSPIHandle)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
    pSPIHandle->pSPIx->CR2 &= ~(1U << SPI_CR2_TXEIE_Pos);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000bbc:	605a      	str	r2, [r3, #4]
    pSPIHandle->pTxBuffer = NULL;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
    pSPIHandle->TxLen = 0;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	615a      	str	r2, [r3, #20]
    pSPIHandle->TxState = SPI_READY;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	771a      	strb	r2, [r3, #28]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <USART_PeriClockControl>:
#include "USART_driver.h"
#include "RCC_driver.h"

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	460b      	mov	r3, r1
 8000be6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000be8:	78fb      	ldrb	r3, [r7, #3]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d136      	bne.n	8000c5c <USART_PeriClockControl+0x80>
	{
		if(pUSARTx == USART1)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a38      	ldr	r2, [pc, #224]	@ (8000cd4 <USART_PeriClockControl+0xf8>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d106      	bne.n	8000c04 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000bf6:	4b38      	ldr	r3, [pc, #224]	@ (8000cd8 <USART_PeriClockControl+0xfc>)
 8000bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bfa:	4a37      	ldr	r2, [pc, #220]	@ (8000cd8 <USART_PeriClockControl+0xfc>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c00:	6613      	str	r3, [r2, #96]	@ 0x60
		else if(pUSARTx == UART5)
		{
			UART5_PCLK_DI();
		}
	}
}
 8000c02:	e061      	b.n	8000cc8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a35      	ldr	r2, [pc, #212]	@ (8000cdc <USART_PeriClockControl+0x100>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d106      	bne.n	8000c1a <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000c0c:	4b32      	ldr	r3, [pc, #200]	@ (8000cd8 <USART_PeriClockControl+0xfc>)
 8000c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c10:	4a31      	ldr	r2, [pc, #196]	@ (8000cd8 <USART_PeriClockControl+0xfc>)
 8000c12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c16:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000c18:	e056      	b.n	8000cc8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a30      	ldr	r2, [pc, #192]	@ (8000ce0 <USART_PeriClockControl+0x104>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d106      	bne.n	8000c30 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000c22:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd8 <USART_PeriClockControl+0xfc>)
 8000c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c26:	4a2c      	ldr	r2, [pc, #176]	@ (8000cd8 <USART_PeriClockControl+0xfc>)
 8000c28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c2c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000c2e:	e04b      	b.n	8000cc8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a2c      	ldr	r2, [pc, #176]	@ (8000ce4 <USART_PeriClockControl+0x108>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d106      	bne.n	8000c46 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000c38:	4b27      	ldr	r3, [pc, #156]	@ (8000cd8 <USART_PeriClockControl+0xfc>)
 8000c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c3c:	4a26      	ldr	r2, [pc, #152]	@ (8000cd8 <USART_PeriClockControl+0xfc>)
 8000c3e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c42:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000c44:	e040      	b.n	8000cc8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a27      	ldr	r2, [pc, #156]	@ (8000ce8 <USART_PeriClockControl+0x10c>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d13c      	bne.n	8000cc8 <USART_PeriClockControl+0xec>
			UART5_PCLK_EN();
 8000c4e:	4b22      	ldr	r3, [pc, #136]	@ (8000cd8 <USART_PeriClockControl+0xfc>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c52:	4a21      	ldr	r2, [pc, #132]	@ (8000cd8 <USART_PeriClockControl+0xfc>)
 8000c54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000c58:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000c5a:	e035      	b.n	8000cc8 <USART_PeriClockControl+0xec>
		if(pUSARTx == USART1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8000cd4 <USART_PeriClockControl+0xf8>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d106      	bne.n	8000c72 <USART_PeriClockControl+0x96>
			USART1_PCLK_DI();
 8000c64:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd8 <USART_PeriClockControl+0xfc>)
 8000c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c68:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd8 <USART_PeriClockControl+0xfc>)
 8000c6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000c6e:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8000c70:	e02a      	b.n	8000cc8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a19      	ldr	r2, [pc, #100]	@ (8000cdc <USART_PeriClockControl+0x100>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d106      	bne.n	8000c88 <USART_PeriClockControl+0xac>
			USART2_PCLK_DI();
 8000c7a:	4b17      	ldr	r3, [pc, #92]	@ (8000cd8 <USART_PeriClockControl+0xfc>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c7e:	4a16      	ldr	r2, [pc, #88]	@ (8000cd8 <USART_PeriClockControl+0xfc>)
 8000c80:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000c84:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000c86:	e01f      	b.n	8000cc8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a15      	ldr	r2, [pc, #84]	@ (8000ce0 <USART_PeriClockControl+0x104>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d106      	bne.n	8000c9e <USART_PeriClockControl+0xc2>
			USART3_PCLK_DI();
 8000c90:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <USART_PeriClockControl+0xfc>)
 8000c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c94:	4a10      	ldr	r2, [pc, #64]	@ (8000cd8 <USART_PeriClockControl+0xfc>)
 8000c96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c9a:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000c9c:	e014      	b.n	8000cc8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a10      	ldr	r2, [pc, #64]	@ (8000ce4 <USART_PeriClockControl+0x108>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d106      	bne.n	8000cb4 <USART_PeriClockControl+0xd8>
			UART4_PCLK_DI();
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <USART_PeriClockControl+0xfc>)
 8000ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000caa:	4a0b      	ldr	r2, [pc, #44]	@ (8000cd8 <USART_PeriClockControl+0xfc>)
 8000cac:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000cb0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000cb2:	e009      	b.n	8000cc8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce8 <USART_PeriClockControl+0x10c>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d105      	bne.n	8000cc8 <USART_PeriClockControl+0xec>
			UART5_PCLK_DI();
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <USART_PeriClockControl+0xfc>)
 8000cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc0:	4a05      	ldr	r2, [pc, #20]	@ (8000cd8 <USART_PeriClockControl+0xfc>)
 8000cc2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000cc6:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	40013800 	.word	0x40013800
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40004400 	.word	0x40004400
 8000ce0:	40004800 	.word	0x40004800
 8000ce4:	40004c00 	.word	0x40004c00
 8000ce8:	40005000 	.word	0x40005000

08000cec <USART_Init>:
}



void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
		uint32_t tempreg=0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]

		USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ff6c 	bl	8000bdc <USART_PeriClockControl>

		if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	791b      	ldrb	r3, [r3, #4]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d104      	bne.n	8000d16 <USART_Init+0x2a>
		{
			tempreg|= (1 << USART_CR1_RE);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f043 0304 	orr.w	r3, r3, #4
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	e010      	b.n	8000d38 <USART_Init+0x4c>
		}
		else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	791b      	ldrb	r3, [r3, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d104      	bne.n	8000d28 <USART_Init+0x3c>
		{
			tempreg |= ( 1 << USART_CR1_TE );
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f043 0308 	orr.w	r3, r3, #8
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	e007      	b.n	8000d38 <USART_Init+0x4c>
		}
		else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	791b      	ldrb	r3, [r3, #4]
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d103      	bne.n	8000d38 <USART_Init+0x4c>
		{
			tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f043 030c 	orr.w	r3, r3, #12
 8000d36:	60fb      	str	r3, [r7, #12]
		}

		tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7b5b      	ldrb	r3, [r3, #13]
 8000d3c:	031b      	lsls	r3, r3, #12
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]

		if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	7b9b      	ldrb	r3, [r3, #14]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d104      	bne.n	8000d56 <USART_Init+0x6a>
		{
			tempreg |= ( 1 << USART_CR1_PCE);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	e00b      	b.n	8000d6e <USART_Init+0x82>

		}
		else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	7b9b      	ldrb	r3, [r3, #14]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d107      	bne.n	8000d6e <USART_Init+0x82>
		{
		    tempreg |= ( 1 << USART_CR1_PCE);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d64:	60fb      	str	r3, [r7, #12]
		    tempreg |= ( 1 << USART_CR1_PS);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d6c:	60fb      	str	r3, [r7, #12]
		}


		pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	601a      	str	r2, [r3, #0]
		tempreg=0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
		tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	7b1b      	ldrb	r3, [r3, #12]
 8000d7e:	031b      	lsls	r3, r3, #12
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
		pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	605a      	str	r2, [r3, #4]

		tempreg=0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]


		if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	7bdb      	ldrb	r3, [r3, #15]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d104      	bne.n	8000da4 <USART_Init+0xb8>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	e014      	b.n	8000dce <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	7bdb      	ldrb	r3, [r3, #15]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d104      	bne.n	8000db6 <USART_Init+0xca>
		{
			tempreg |= ( 1 << USART_CR3_RTSE);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	e00b      	b.n	8000dce <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7bdb      	ldrb	r3, [r3, #15]
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d107      	bne.n	8000dce <USART_Init+0xe2>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dc4:	60fb      	str	r3, [r7, #12]
			tempreg |= ( 1 << USART_CR3_RTSE);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dcc:	60fb      	str	r3, [r7, #12]
		}

		pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	609a      	str	r2, [r3, #8]
		pUSARTHandle->pUSARTx->BRR=0X25;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2225      	movs	r2, #37	@ 0x25
 8000ddc:	60da      	str	r2, [r3, #12]
	//	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <USART_SendData>:




void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

	for(uint32_t i = 0 ; i < Len; i++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	e031      	b.n	8000e5c <USART_SendData+0x76>
	{
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000df8:	bf00      	nop
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2180      	movs	r1, #128	@ 0x80
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 f85a 	bl	8000eba <USART_GetFlagStatus>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d0f6      	beq.n	8000dfa <USART_SendData+0x14>

		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	7b5b      	ldrb	r3, [r3, #13]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d118      	bne.n	8000e46 <USART_SendData+0x60>
		{
			pdata = (uint16_t*) pTxBuffer;
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e26:	629a      	str	r2, [r3, #40]	@ 0x28

			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	7b9b      	ldrb	r3, [r3, #14]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d106      	bne.n	8000e3e <USART_SendData+0x58>
			{
				pTxBuffer++;
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	3301      	adds	r3, #1
 8000e34:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	e00b      	b.n	8000e56 <USART_SendData+0x70>

			}
			else
			{
				pTxBuffer++;
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	3301      	adds	r3, #1
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	e007      	b.n	8000e56 <USART_SendData+0x70>
			}
		}
		else
		{

			pUSARTHandle->pUSARTx->TDR = (*pTxBuffer  & (uint8_t)0xFF);
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	781a      	ldrb	r2, [r3, #0]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	629a      	str	r2, [r3, #40]	@ 0x28
			pTxBuffer++;
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	3301      	adds	r3, #1
 8000e54:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d3c9      	bcc.n	8000df8 <USART_SendData+0x12>
		}
	}
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000e64:	bf00      	nop
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2140      	movs	r1, #64	@ 0x40
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 f824 	bl	8000eba <USART_GetFlagStatus>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0f6      	beq.n	8000e66 <USART_SendData+0x80>
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <USART_PeripheralControl>:
	temp2=0;

}

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e8e:	78fb      	ldrb	r3, [r7, #3]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d106      	bne.n	8000ea2 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |=(1<<USART_CR1_UE);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f043 0201 	orr.w	r2, r3, #1
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
	}
}
 8000ea0:	e005      	b.n	8000eae <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f023 0201 	bic.w	r2, r3, #1
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	601a      	str	r2, [r3, #0]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <USART_GetFlagStatus>:


uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx,uint8_t StatusFlagName)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx ->ISR & StatusFlagName)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69da      	ldr	r2, [r3, #28]
 8000eca:	78fb      	ldrb	r3, [r7, #3]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <USART_GetFlagStatus+0x1c>
	{
		return SET;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e000      	b.n	8000ed8 <USART_GetFlagStatus+0x1e>
	}
	return RESET;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <USART2_GPIOInits>:
    for(volatile int i = 0; i < 25000; i++);   // Waste time in loop
}

// Init USART2 GPIO (PA2 TX, PA3 RX)
void USART2_GPIOInits(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
    GPIO_Handle_t usart2_gpio;
    memset(&usart2_gpio,0,sizeof(usart2_gpio)); // Reset struct
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	220c      	movs	r2, #12
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 f954 	bl	800119e <memset>

    usart2_gpio.pGPIOx = GPIOA;
 8000ef6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000efa:	607b      	str	r3, [r7, #4]
    usart2_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;   // Alternate function
 8000efc:	2302      	movs	r3, #2
 8000efe:	727b      	strb	r3, [r7, #9]
    usart2_gpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP; // Push-pull
 8000f00:	2300      	movs	r3, #0
 8000f02:	733b      	strb	r3, [r7, #12]
    usart2_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;// Pull-up
 8000f04:	2301      	movs	r3, #1
 8000f06:	72fb      	strb	r3, [r7, #11]
    usart2_gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;  // Fast I/O
 8000f08:	2302      	movs	r3, #2
 8000f0a:	72bb      	strb	r3, [r7, #10]
    usart2_gpio.GPIO_PinConfig.GPIO_PinAltFunMode = 7;           // AF7 = USART2
 8000f0c:	2307      	movs	r3, #7
 8000f0e:	737b      	strb	r3, [r7, #13]

    GPIOA_PCLK_EN(); // Enable port A clock
 8000f10:	4b0a      	ldr	r3, [pc, #40]	@ (8000f3c <USART2_GPIOInits+0x58>)
 8000f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f14:	4a09      	ldr	r2, [pc, #36]	@ (8000f3c <USART2_GPIOInits+0x58>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	64d3      	str	r3, [r2, #76]	@ 0x4c

    usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;   // TX pin
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&usart2_gpio);
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fa28 	bl	8000378 <GPIO_Init>

    usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;   // RX pin
 8000f28:	2303      	movs	r3, #3
 8000f2a:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&usart2_gpio);
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fa22 	bl	8000378 <GPIO_Init>
}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40021000 	.word	0x40021000

08000f40 <USART2_Inits>:

// Init USART2 peripheral
void USART2_Inits(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
    usart2_handle.pUSARTx = USART2;                          // Use USART2
 8000f44:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <USART2_Inits+0x3c>)
 8000f46:	4a0e      	ldr	r2, [pc, #56]	@ (8000f80 <USART2_Inits+0x40>)
 8000f48:	601a      	str	r2, [r3, #0]
    usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200; // Baud rate 115200
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <USART2_Inits+0x3c>)
 8000f4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f50:	609a      	str	r2, [r3, #8]
    usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE; // No flow ctrl
 8000f52:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <USART2_Inits+0x3c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	73da      	strb	r2, [r3, #15]
    usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX; // Enable TX and RX
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <USART2_Inits+0x3c>)
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	711a      	strb	r2, [r3, #4]
    usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1; // 1 stop bit
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <USART2_Inits+0x3c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	731a      	strb	r2, [r3, #12]
    usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS; // 8 bits
 8000f64:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <USART2_Inits+0x3c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	735a      	strb	r2, [r3, #13]
    usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE; // No parity
 8000f6a:	4b04      	ldr	r3, [pc, #16]	@ (8000f7c <USART2_Inits+0x3c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	739a      	strb	r2, [r3, #14]
    USART_Init(&usart2_handle); // Apply config
 8000f70:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <USART2_Inits+0x3c>)
 8000f72:	f7ff febb 	bl	8000cec <USART_Init>
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000040 	.word	0x20000040
 8000f80:	40004400 	.word	0x40004400

08000f84 <SPI2_GPIOInits>:

// Init SPI2 GPIO (PB12..PB15)
void SPI2_GPIOInits(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
    GPIO_Handle_t SPIPins;
    SPIPins.pGPIOx = GPIOB;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <SPI2_GPIOInits+0x60>)
 8000f8c:	607b      	str	r3, [r7, #4]
    SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;   // Alternate function
 8000f8e:	2302      	movs	r3, #2
 8000f90:	727b      	strb	r3, [r7, #9]
    SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;           // AF5 = SPI2
 8000f92:	2305      	movs	r3, #5
 8000f94:	737b      	strb	r3, [r7, #13]
    SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP; // Push-pull
 8000f96:	2300      	movs	r3, #0
 8000f98:	733b      	strb	r3, [r7, #12]
    SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;// No pull
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	72fb      	strb	r3, [r7, #11]
    SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // High speed
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	72bb      	strb	r3, [r7, #10]
    GPIO_PeriClockControl(GPIOB, ENABLE);                    // Enable port B clock
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	480f      	ldr	r0, [pc, #60]	@ (8000fe4 <SPI2_GPIOInits+0x60>)
 8000fa6:	f7ff f919 	bl	80001dc <GPIO_PeriClockControl>

    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;  // NSS
 8000faa:	230c      	movs	r3, #12
 8000fac:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff f9e1 	bl	8000378 <GPIO_Init>

    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;  // SCK
 8000fb6:	230d      	movs	r3, #13
 8000fb8:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff f9db 	bl	8000378 <GPIO_Init>

    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;  // MISO
 8000fc2:	230e      	movs	r3, #14
 8000fc4:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff f9d5 	bl	8000378 <GPIO_Init>

    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;  // MOSI
 8000fce:	230f      	movs	r3, #15
 8000fd0:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff f9cf 	bl	8000378 <GPIO_Init>
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	48000400 	.word	0x48000400

08000fe8 <SPI2_Inits>:

// Init SPI2 peripheral
void SPI2_Inits(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
    SPI2Handle.pSPIx = SPI2;                        // Use SPI2
 8000fec:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <SPI2_Inits+0x40>)
 8000fee:	4a0f      	ldr	r2, [pc, #60]	@ (800102c <SPI2_Inits+0x44>)
 8000ff0:	601a      	str	r2, [r3, #0]
    SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER; // Master mode
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <SPI2_Inits+0x40>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	711a      	strb	r2, [r3, #4]
    SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;       // Full duplex
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <SPI2_Inits+0x40>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	715a      	strb	r2, [r3, #5]
    SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;    // PCLK/32
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <SPI2_Inits+0x40>)
 8001000:	2204      	movs	r2, #4
 8001002:	719a      	strb	r2, [r3, #6]
    SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;                 // 8-bit data
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <SPI2_Inits+0x40>)
 8001006:	2200      	movs	r2, #0
 8001008:	71da      	strb	r2, [r3, #7]
    SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;                 // CPOL = 0
 800100a:	4b07      	ldr	r3, [pc, #28]	@ (8001028 <SPI2_Inits+0x40>)
 800100c:	2200      	movs	r2, #0
 800100e:	721a      	strb	r2, [r3, #8]
    SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;                 // CPHA = 0
 8001010:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <SPI2_Inits+0x40>)
 8001012:	2200      	movs	r2, #0
 8001014:	725a      	strb	r2, [r3, #9]
    SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DI;                    // Hardware NSS
 8001016:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <SPI2_Inits+0x40>)
 8001018:	2200      	movs	r2, #0
 800101a:	729a      	strb	r2, [r3, #10]
    SPI_Init(&SPI2Handle);                                        // Apply config
 800101c:	4802      	ldr	r0, [pc, #8]	@ (8001028 <SPI2_Inits+0x40>)
 800101e:	f7ff fbbb 	bl	8000798 <SPI_Init>
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000020 	.word	0x20000020
 800102c:	40003800 	.word	0x40003800

08001030 <SPI_ApplicationEventCallback>:

// SPI event callback
void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle, uint8_t AppEv)
{
 8001030:	b5b0      	push	{r4, r5, r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	70fb      	strb	r3, [r7, #3]
    if(AppEv == SPI_EVENT_TX_CMPLT)                 // TX complete event
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d117      	bne.n	8001072 <SPI_ApplicationEventCallback+0x42>
    {
        char msg[] = "SPI TX Complete!\r\n";
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <SPI_ApplicationEventCallback+0x4c>)
 8001044:	f107 040c 	add.w	r4, r7, #12
 8001048:	461d      	mov	r5, r3
 800104a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104e:	682b      	ldr	r3, [r5, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	8022      	strh	r2, [r4, #0]
 8001054:	3402      	adds	r4, #2
 8001056:	0c1b      	lsrs	r3, r3, #16
 8001058:	7023      	strb	r3, [r4, #0]
        USART_SendData(&usart2_handle, (uint8_t*)msg, strlen(msg)); // Print via UART
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f8b4 	bl	80001cc <strlen>
 8001064:	4602      	mov	r2, r0
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	4619      	mov	r1, r3
 800106c:	4804      	ldr	r0, [pc, #16]	@ (8001080 <SPI_ApplicationEventCallback+0x50>)
 800106e:	f7ff feba 	bl	8000de6 <USART_SendData>
    }
}
 8001072:	bf00      	nop
 8001074:	3720      	adds	r7, #32
 8001076:	46bd      	mov	sp, r7
 8001078:	bdb0      	pop	{r4, r5, r7, pc}
 800107a:	bf00      	nop
 800107c:	08001210 	.word	0x08001210
 8001080:	20000040 	.word	0x20000040

08001084 <main>:

// Main function
int main(void)
{
 8001084:	b5b0      	push	{r4, r5, r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
    USART2_GPIOInits();                         // Init USART2 pins
 800108a:	f7ff ff2b 	bl	8000ee4 <USART2_GPIOInits>
    USART2_Inits();                             // Init USART2 peripheral
 800108e:	f7ff ff57 	bl	8000f40 <USART2_Inits>
    USART_PeripheralControl(USART2, ENABLE);    // Enable USART2
 8001092:	2101      	movs	r1, #1
 8001094:	4816      	ldr	r0, [pc, #88]	@ (80010f0 <main+0x6c>)
 8001096:	f7ff fef4 	bl	8000e82 <USART_PeripheralControl>

    SPI2_GPIOInits();                           // Init SPI2 pins
 800109a:	f7ff ff73 	bl	8000f84 <SPI2_GPIOInits>
    SPI2_Inits();                               // Init SPI2 peripheral
 800109e:	f7ff ffa3 	bl	8000fe8 <SPI2_Inits>

    SPI_SSOEConfig(SPI2, ENABLE);               // Enable NSS output
 80010a2:	2101      	movs	r1, #1
 80010a4:	4813      	ldr	r0, [pc, #76]	@ (80010f4 <main+0x70>)
 80010a6:	f7ff fbf1 	bl	800088c <SPI_SSOEConfig>
    SPI_PeripheralControl(SPI2, ENABLE);        // Enable SPI2
 80010aa:	2101      	movs	r1, #1
 80010ac:	4811      	ldr	r0, [pc, #68]	@ (80010f4 <main+0x70>)
 80010ae:	f7ff fbd1 	bl	8000854 <SPI_PeripheralControl>

    SPI_IRQInterruptConfig(IRQ_NO_SPI2, ENABLE);// Enable SPI2 interrupt
 80010b2:	2101      	movs	r1, #1
 80010b4:	2024      	movs	r0, #36	@ 0x24
 80010b6:	f7ff fc29 	bl	800090c <SPI_IRQInterruptConfig>

    char start_msg[] = "SPI Interrupt Example Started\r\n";
 80010ba:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <main+0x74>)
 80010bc:	463c      	mov	r4, r7
 80010be:	461d      	mov	r5, r3
 80010c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    USART_SendData(&usart2_handle, (uint8_t*)start_msg, strlen(start_msg)); // Print start msg
 80010cc:	463b      	mov	r3, r7
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f87c 	bl	80001cc <strlen>
 80010d4:	4602      	mov	r2, r0
 80010d6:	463b      	mov	r3, r7
 80010d8:	4619      	mov	r1, r3
 80010da:	4808      	ldr	r0, [pc, #32]	@ (80010fc <main+0x78>)
 80010dc:	f7ff fe83 	bl	8000de6 <USART_SendData>

    SPI_SendDataIT(&SPI2Handle, &data, 1);      // Send 1 byte via SPI interrupt
 80010e0:	2201      	movs	r2, #1
 80010e2:	4907      	ldr	r1, [pc, #28]	@ (8001100 <main+0x7c>)
 80010e4:	4807      	ldr	r0, [pc, #28]	@ (8001104 <main+0x80>)
 80010e6:	f7ff fbed 	bl	80008c4 <SPI_SendDataIT>

    while(1)
 80010ea:	bf00      	nop
 80010ec:	e7fd      	b.n	80010ea <main+0x66>
 80010ee:	bf00      	nop
 80010f0:	40004400 	.word	0x40004400
 80010f4:	40003800 	.word	0x40003800
 80010f8:	08001224 	.word	0x08001224
 80010fc:	20000040 	.word	0x20000040
 8001100:	20000000 	.word	0x20000000
 8001104:	20000020 	.word	0x20000020

08001108 <SPI2_IRQHandler>:
    }
}

// SPI2 interrupt handler
void SPI2_IRQHandler(void)
{
 8001108:	b5b0      	push	{r4, r5, r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
    const char msg[] = "SPI2 Interrupt generated\r\n";
 800110e:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <SPI2_IRQHandler+0x38>)
 8001110:	1d3c      	adds	r4, r7, #4
 8001112:	461d      	mov	r5, r3
 8001114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001118:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800111c:	c403      	stmia	r4!, {r0, r1}
 800111e:	8022      	strh	r2, [r4, #0]
 8001120:	3402      	adds	r4, #2
 8001122:	0c13      	lsrs	r3, r2, #16
 8001124:	7023      	strb	r3, [r4, #0]
    USART_SendData(&usart2_handle, (uint8_t*)msg, sizeof(msg)-1); // Debug print
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	221a      	movs	r2, #26
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	@ (8001144 <SPI2_IRQHandler+0x3c>)
 800112e:	f7ff fe5a 	bl	8000de6 <USART_SendData>
    SPI_IRQHandling(&SPI2Handle); // Handle SPI2 events
 8001132:	4805      	ldr	r0, [pc, #20]	@ (8001148 <SPI2_IRQHandler+0x40>)
 8001134:	f7ff fc70 	bl	8000a18 <SPI_IRQHandling>
}
 8001138:	bf00      	nop
 800113a:	3720      	adds	r7, #32
 800113c:	46bd      	mov	sp, r7
 800113e:	bdb0      	pop	{r4, r5, r7, pc}
 8001140:	08001244 	.word	0x08001244
 8001144:	20000040 	.word	0x20000040
 8001148:	20000020 	.word	0x20000020

0800114c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800114c:	480d      	ldr	r0, [pc, #52]	@ (8001184 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800114e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001150:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001154:	480c      	ldr	r0, [pc, #48]	@ (8001188 <LoopForever+0x6>)
  ldr r1, =_edata
 8001156:	490d      	ldr	r1, [pc, #52]	@ (800118c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001158:	4a0d      	ldr	r2, [pc, #52]	@ (8001190 <LoopForever+0xe>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <LoopForever+0x12>)
  ldr r4, =_ebss
 800116c:	4c0a      	ldr	r4, [pc, #40]	@ (8001198 <LoopForever+0x16>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800117a:	f000 f819 	bl	80011b0 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800117e:	f7ff ff81 	bl	8001084 <main>

08001182 <LoopForever>:

LoopForever:
  b LoopForever
 8001182:	e7fe      	b.n	8001182 <LoopForever>
  ldr   r0, =_estack
 8001184:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800118c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001190:	08001270 	.word	0x08001270
  ldr r2, =_sbss
 8001194:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001198:	20000064 	.word	0x20000064

0800119c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800119c:	e7fe      	b.n	800119c <ADC1_2_IRQHandler>

0800119e <memset>:
 800119e:	4402      	add	r2, r0
 80011a0:	4603      	mov	r3, r0
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d100      	bne.n	80011a8 <memset+0xa>
 80011a6:	4770      	bx	lr
 80011a8:	f803 1b01 	strb.w	r1, [r3], #1
 80011ac:	e7f9      	b.n	80011a2 <memset+0x4>
	...

080011b0 <__libc_init_array>:
 80011b0:	b570      	push	{r4, r5, r6, lr}
 80011b2:	4d0d      	ldr	r5, [pc, #52]	@ (80011e8 <__libc_init_array+0x38>)
 80011b4:	4c0d      	ldr	r4, [pc, #52]	@ (80011ec <__libc_init_array+0x3c>)
 80011b6:	1b64      	subs	r4, r4, r5
 80011b8:	10a4      	asrs	r4, r4, #2
 80011ba:	2600      	movs	r6, #0
 80011bc:	42a6      	cmp	r6, r4
 80011be:	d109      	bne.n	80011d4 <__libc_init_array+0x24>
 80011c0:	4d0b      	ldr	r5, [pc, #44]	@ (80011f0 <__libc_init_array+0x40>)
 80011c2:	4c0c      	ldr	r4, [pc, #48]	@ (80011f4 <__libc_init_array+0x44>)
 80011c4:	f000 f818 	bl	80011f8 <_init>
 80011c8:	1b64      	subs	r4, r4, r5
 80011ca:	10a4      	asrs	r4, r4, #2
 80011cc:	2600      	movs	r6, #0
 80011ce:	42a6      	cmp	r6, r4
 80011d0:	d105      	bne.n	80011de <__libc_init_array+0x2e>
 80011d2:	bd70      	pop	{r4, r5, r6, pc}
 80011d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80011d8:	4798      	blx	r3
 80011da:	3601      	adds	r6, #1
 80011dc:	e7ee      	b.n	80011bc <__libc_init_array+0xc>
 80011de:	f855 3b04 	ldr.w	r3, [r5], #4
 80011e2:	4798      	blx	r3
 80011e4:	3601      	adds	r6, #1
 80011e6:	e7f2      	b.n	80011ce <__libc_init_array+0x1e>
 80011e8:	08001268 	.word	0x08001268
 80011ec:	08001268 	.word	0x08001268
 80011f0:	08001268 	.word	0x08001268
 80011f4:	0800126c 	.word	0x0800126c

080011f8 <_init>:
 80011f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011fa:	bf00      	nop
 80011fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011fe:	bc08      	pop	{r3}
 8001200:	469e      	mov	lr, r3
 8001202:	4770      	bx	lr

08001204 <_fini>:
 8001204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001206:	bf00      	nop
 8001208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800120a:	bc08      	pop	{r3}
 800120c:	469e      	mov	lr, r3
 800120e:	4770      	bx	lr
