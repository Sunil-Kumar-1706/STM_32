
Timer_input_Capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a14  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001ba4  08001ba4  00002ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001be8  08001be8  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001be8  08001be8  00002be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001bf0  08001bf0  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bf0  08001bf0  00002bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001bf4  08001bf4  00002bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001bf8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          00000190  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ec  200001ec  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000024bb  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008c7  00000000  00000000  00005547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000250  00000000  00000000  00005e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001a6  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001843  00000000  00000000  00006206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003089  00000000  00000000  00007a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c8d3  00000000  00000000  0000aad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000173a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000fb0  00000000  00000000  000173e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00018398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001b8c 	.word	0x08001b8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08001b8c 	.word	0x08001b8c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <GPIO_Init>:
}

/*Init and Deinit */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000270:	b480      	push	{r7}
 8000272:	b087      	sub	sp, #28
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000278:	2300      	movs	r3, #0
 800027a:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	795b      	ldrb	r3, [r3, #5]
 8000280:	2b03      	cmp	r3, #3
 8000282:	d822      	bhi.n	80002ca <GPIO_Init+0x5a>
	{
		temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	795b      	ldrb	r3, [r3, #5]
 8000288:	461a      	mov	r2, r3
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	791b      	ldrb	r3, [r3, #4]
 800028e:	005b      	lsls	r3, r3, #1
 8000290:	fa02 f303 	lsl.w	r3, r2, r3
 8000294:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	791b      	ldrb	r3, [r3, #4]
 80002a0:	005b      	lsls	r3, r3, #1
 80002a2:	2103      	movs	r1, #3
 80002a4:	fa01 f303 	lsl.w	r3, r1, r3
 80002a8:	43db      	mvns	r3, r3
 80002aa:	4619      	mov	r1, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	400a      	ands	r2, r1
 80002b2:	601a      	str	r2, [r3, #0]
		pGPIOHandle ->pGPIOx->MODER |= temp;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	6819      	ldr	r1, [r3, #0]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	697a      	ldr	r2, [r7, #20]
 80002c0:	430a      	orrs	r2, r1
 80002c2:	601a      	str	r2, [r3, #0]
		temp=0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	617b      	str	r3, [r7, #20]
 80002c8:	e0e1      	b.n	800048e <GPIO_Init+0x21e>
	}
	else{
		temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	795b      	ldrb	r3, [r3, #5]
 80002ce:	461a      	mov	r2, r3
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	791b      	ldrb	r3, [r3, #4]
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	fa02 f303 	lsl.w	r3, r2, r3
 80002da:	617b      	str	r3, [r7, #20]
				pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	791b      	ldrb	r3, [r3, #4]
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	2103      	movs	r1, #3
 80002ea:	fa01 f303 	lsl.w	r3, r1, r3
 80002ee:	43db      	mvns	r3, r3
 80002f0:	4619      	mov	r1, r3
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	400a      	ands	r2, r1
 80002f8:	601a      	str	r2, [r3, #0]
				pGPIOHandle ->pGPIOx->MODER |= temp;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	6819      	ldr	r1, [r3, #0]
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	697a      	ldr	r2, [r7, #20]
 8000306:	430a      	orrs	r2, r1
 8000308:	601a      	str	r2, [r3, #0]
				temp=0;
 800030a:	2300      	movs	r3, #0
 800030c:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	795b      	ldrb	r3, [r3, #5]
 8000312:	2b04      	cmp	r3, #4
 8000314:	d117      	bne.n	8000346 <GPIO_Init+0xd6>
		{
			EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000316:	4b47      	ldr	r3, [pc, #284]	@ (8000434 <GPIO_Init+0x1c4>)
 8000318:	68db      	ldr	r3, [r3, #12]
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	7912      	ldrb	r2, [r2, #4]
 800031e:	4611      	mov	r1, r2
 8000320:	2201      	movs	r2, #1
 8000322:	408a      	lsls	r2, r1
 8000324:	4611      	mov	r1, r2
 8000326:	4a43      	ldr	r2, [pc, #268]	@ (8000434 <GPIO_Init+0x1c4>)
 8000328:	430b      	orrs	r3, r1
 800032a:	60d3      	str	r3, [r2, #12]

			EXTI->RTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800032c:	4b41      	ldr	r3, [pc, #260]	@ (8000434 <GPIO_Init+0x1c4>)
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	7912      	ldrb	r2, [r2, #4]
 8000334:	4611      	mov	r1, r2
 8000336:	2201      	movs	r2, #1
 8000338:	408a      	lsls	r2, r1
 800033a:	43d2      	mvns	r2, r2
 800033c:	4611      	mov	r1, r2
 800033e:	4a3d      	ldr	r2, [pc, #244]	@ (8000434 <GPIO_Init+0x1c4>)
 8000340:	400b      	ands	r3, r1
 8000342:	6093      	str	r3, [r2, #8]
 8000344:	e035      	b.n	80003b2 <GPIO_Init+0x142>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	795b      	ldrb	r3, [r3, #5]
 800034a:	2b05      	cmp	r3, #5
 800034c:	d117      	bne.n	800037e <GPIO_Init+0x10e>
		{
			EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800034e:	4b39      	ldr	r3, [pc, #228]	@ (8000434 <GPIO_Init+0x1c4>)
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	7912      	ldrb	r2, [r2, #4]
 8000356:	4611      	mov	r1, r2
 8000358:	2201      	movs	r2, #1
 800035a:	408a      	lsls	r2, r1
 800035c:	4611      	mov	r1, r2
 800035e:	4a35      	ldr	r2, [pc, #212]	@ (8000434 <GPIO_Init+0x1c4>)
 8000360:	430b      	orrs	r3, r1
 8000362:	6093      	str	r3, [r2, #8]

			EXTI->FTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000364:	4b33      	ldr	r3, [pc, #204]	@ (8000434 <GPIO_Init+0x1c4>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	7912      	ldrb	r2, [r2, #4]
 800036c:	4611      	mov	r1, r2
 800036e:	2201      	movs	r2, #1
 8000370:	408a      	lsls	r2, r1
 8000372:	43d2      	mvns	r2, r2
 8000374:	4611      	mov	r1, r2
 8000376:	4a2f      	ldr	r2, [pc, #188]	@ (8000434 <GPIO_Init+0x1c4>)
 8000378:	400b      	ands	r3, r1
 800037a:	60d3      	str	r3, [r2, #12]
 800037c:	e019      	b.n	80003b2 <GPIO_Init+0x142>

		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	795b      	ldrb	r3, [r3, #5]
 8000382:	2b06      	cmp	r3, #6
 8000384:	d115      	bne.n	80003b2 <GPIO_Init+0x142>
		{
			EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000386:	4b2b      	ldr	r3, [pc, #172]	@ (8000434 <GPIO_Init+0x1c4>)
 8000388:	68db      	ldr	r3, [r3, #12]
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	7912      	ldrb	r2, [r2, #4]
 800038e:	4611      	mov	r1, r2
 8000390:	2201      	movs	r2, #1
 8000392:	408a      	lsls	r2, r1
 8000394:	4611      	mov	r1, r2
 8000396:	4a27      	ldr	r2, [pc, #156]	@ (8000434 <GPIO_Init+0x1c4>)
 8000398:	430b      	orrs	r3, r1
 800039a:	60d3      	str	r3, [r2, #12]

			EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800039c:	4b25      	ldr	r3, [pc, #148]	@ (8000434 <GPIO_Init+0x1c4>)
 800039e:	689b      	ldr	r3, [r3, #8]
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	7912      	ldrb	r2, [r2, #4]
 80003a4:	4611      	mov	r1, r2
 80003a6:	2201      	movs	r2, #1
 80003a8:	408a      	lsls	r2, r1
 80003aa:	4611      	mov	r1, r2
 80003ac:	4a21      	ldr	r2, [pc, #132]	@ (8000434 <GPIO_Init+0x1c4>)
 80003ae:	430b      	orrs	r3, r1
 80003b0:	6093      	str	r3, [r2, #8]
		}
	 uint8_t temp1=pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber/4;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	791b      	ldrb	r3, [r3, #4]
 80003b6:	089b      	lsrs	r3, r3, #2
 80003b8:	74fb      	strb	r3, [r7, #19]
	 uint8_t temp2=pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber%4;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	791b      	ldrb	r3, [r3, #4]
 80003be:	f003 0303 	and.w	r3, r3, #3
 80003c2:	74bb      	strb	r3, [r7, #18]
	 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80003cc:	d042      	beq.n	8000454 <GPIO_Init+0x1e4>
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a19      	ldr	r2, [pc, #100]	@ (8000438 <GPIO_Init+0x1c8>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d02b      	beq.n	8000430 <GPIO_Init+0x1c0>
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a17      	ldr	r2, [pc, #92]	@ (800043c <GPIO_Init+0x1cc>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d024      	beq.n	800042c <GPIO_Init+0x1bc>
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a16      	ldr	r2, [pc, #88]	@ (8000440 <GPIO_Init+0x1d0>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d01d      	beq.n	8000428 <GPIO_Init+0x1b8>
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a14      	ldr	r2, [pc, #80]	@ (8000444 <GPIO_Init+0x1d4>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d016      	beq.n	8000424 <GPIO_Init+0x1b4>
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a13      	ldr	r2, [pc, #76]	@ (8000448 <GPIO_Init+0x1d8>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d00f      	beq.n	8000420 <GPIO_Init+0x1b0>
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a11      	ldr	r2, [pc, #68]	@ (800044c <GPIO_Init+0x1dc>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d008      	beq.n	800041c <GPIO_Init+0x1ac>
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a10      	ldr	r2, [pc, #64]	@ (8000450 <GPIO_Init+0x1e0>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d101      	bne.n	8000418 <GPIO_Init+0x1a8>
 8000414:	2307      	movs	r3, #7
 8000416:	e01e      	b.n	8000456 <GPIO_Init+0x1e6>
 8000418:	2300      	movs	r3, #0
 800041a:	e01c      	b.n	8000456 <GPIO_Init+0x1e6>
 800041c:	2306      	movs	r3, #6
 800041e:	e01a      	b.n	8000456 <GPIO_Init+0x1e6>
 8000420:	2305      	movs	r3, #5
 8000422:	e018      	b.n	8000456 <GPIO_Init+0x1e6>
 8000424:	2304      	movs	r3, #4
 8000426:	e016      	b.n	8000456 <GPIO_Init+0x1e6>
 8000428:	2303      	movs	r3, #3
 800042a:	e014      	b.n	8000456 <GPIO_Init+0x1e6>
 800042c:	2302      	movs	r3, #2
 800042e:	e012      	b.n	8000456 <GPIO_Init+0x1e6>
 8000430:	2301      	movs	r3, #1
 8000432:	e010      	b.n	8000456 <GPIO_Init+0x1e6>
 8000434:	40010400 	.word	0x40010400
 8000438:	48000400 	.word	0x48000400
 800043c:	48000800 	.word	0x48000800
 8000440:	48000c00 	.word	0x48000c00
 8000444:	48001000 	.word	0x48001000
 8000448:	48001400 	.word	0x48001400
 800044c:	48001800 	.word	0x48001800
 8000450:	48001c00 	.word	0x48001c00
 8000454:	2300      	movs	r3, #0
 8000456:	747b      	strb	r3, [r7, #17]
	 SYSCFG_PCLK_EN();
 8000458:	4b5e      	ldr	r3, [pc, #376]	@ (80005d4 <GPIO_Init+0x364>)
 800045a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800045c:	4a5d      	ldr	r2, [pc, #372]	@ (80005d4 <GPIO_Init+0x364>)
 800045e:	f043 0301 	orr.w	r3, r3, #1
 8000462:	6613      	str	r3, [r2, #96]	@ 0x60
	 SYSCFG->EXTICR[temp1]=portcode << (temp2 * 4);
 8000464:	7c7a      	ldrb	r2, [r7, #17]
 8000466:	7cbb      	ldrb	r3, [r7, #18]
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	fa02 f103 	lsl.w	r1, r2, r3
 800046e:	4a5a      	ldr	r2, [pc, #360]	@ (80005d8 <GPIO_Init+0x368>)
 8000470:	7cfb      	ldrb	r3, [r7, #19]
 8000472:	3302      	adds	r3, #2
 8000474:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 EXTI -> IMR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000478:	4b58      	ldr	r3, [pc, #352]	@ (80005dc <GPIO_Init+0x36c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	7912      	ldrb	r2, [r2, #4]
 8000480:	4611      	mov	r1, r2
 8000482:	2201      	movs	r2, #1
 8000484:	408a      	lsls	r2, r1
 8000486:	4611      	mov	r1, r2
 8000488:	4a54      	ldr	r2, [pc, #336]	@ (80005dc <GPIO_Init+0x36c>)
 800048a:	430b      	orrs	r3, r1
 800048c:	6013      	str	r3, [r2, #0]
	}

	temp=0;
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]
	temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	799b      	ldrb	r3, [r3, #6]
 8000496:	461a      	mov	r2, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	791b      	ldrb	r3, [r3, #4]
 800049c:	005b      	lsls	r3, r3, #1
 800049e:	fa02 f303 	lsl.w	r3, r2, r3
 80004a2:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->OSPEEDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	689a      	ldr	r2, [r3, #8]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	791b      	ldrb	r3, [r3, #4]
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	2103      	movs	r1, #3
 80004b2:	fa01 f303 	lsl.w	r3, r1, r3
 80004b6:	43db      	mvns	r3, r3
 80004b8:	4619      	mov	r1, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	400a      	ands	r2, r1
 80004c0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	6899      	ldr	r1, [r3, #8]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	697a      	ldr	r2, [r7, #20]
 80004ce:	430a      	orrs	r2, r1
 80004d0:	609a      	str	r2, [r3, #8]
	temp=0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	617b      	str	r3, [r7, #20]

	temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	79db      	ldrb	r3, [r3, #7]
 80004da:	461a      	mov	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	791b      	ldrb	r3, [r3, #4]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	fa02 f303 	lsl.w	r3, r2, r3
 80004e6:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->PUPDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	68da      	ldr	r2, [r3, #12]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	791b      	ldrb	r3, [r3, #4]
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	2103      	movs	r1, #3
 80004f6:	fa01 f303 	lsl.w	r3, r1, r3
 80004fa:	43db      	mvns	r3, r3
 80004fc:	4619      	mov	r1, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	400a      	ands	r2, r1
 8000504:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	68d9      	ldr	r1, [r3, #12]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	697a      	ldr	r2, [r7, #20]
 8000512:	430a      	orrs	r2, r1
 8000514:	60da      	str	r2, [r3, #12]
	temp=0;
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]

	temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType<<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	7a1b      	ldrb	r3, [r3, #8]
 800051e:	461a      	mov	r2, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	791b      	ldrb	r3, [r3, #4]
 8000524:	fa02 f303 	lsl.w	r3, r2, r3
 8000528:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->OTYPER &= ~(0X01 << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	685a      	ldr	r2, [r3, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	791b      	ldrb	r3, [r3, #4]
 8000534:	4619      	mov	r1, r3
 8000536:	2301      	movs	r3, #1
 8000538:	408b      	lsls	r3, r1
 800053a:	43db      	mvns	r3, r3
 800053c:	4619      	mov	r1, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	400a      	ands	r2, r1
 8000544:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	6859      	ldr	r1, [r3, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	697a      	ldr	r2, [r7, #20]
 8000552:	430a      	orrs	r2, r1
 8000554:	605a      	str	r2, [r3, #4]
	temp=0;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	795b      	ldrb	r3, [r3, #5]
 800055e:	2b02      	cmp	r3, #2
 8000560:	d132      	bne.n	80005c8 <GPIO_Init+0x358>
	{
		uint32_t temp1 ,temp2;
		temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	791b      	ldrb	r3, [r3, #4]
 8000566:	08db      	lsrs	r3, r3, #3
 8000568:	b2db      	uxtb	r3, r3
 800056a:	60fb      	str	r3, [r7, #12]
		temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	791b      	ldrb	r3, [r3, #4]
 8000570:	f003 0307 	and.w	r3, r3, #7
 8000574:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0X0f<< (4*temp2));
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	3208      	adds	r2, #8
 800057e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	210f      	movs	r1, #15
 8000588:	fa01 f303 	lsl.w	r3, r1, r3
 800058c:	43db      	mvns	r3, r3
 800058e:	4619      	mov	r1, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4011      	ands	r1, r2
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	3208      	adds	r2, #8
 800059a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	3208      	adds	r2, #8
 80005a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	7a5b      	ldrb	r3, [r3, #9]
 80005ae:	4619      	mov	r1, r3
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	fa01 f303 	lsl.w	r3, r1, r3
 80005b8:	4619      	mov	r1, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4311      	orrs	r1, r2
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	3208      	adds	r2, #8
 80005c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80005c8:	bf00      	nop
 80005ca:	371c      	adds	r7, #28
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40010000 	.word	0x40010000
 80005dc:	40010400 	.word	0x40010400

080005e0 <timer2_pa5_output_compare>:
    TIM2->CR1 = CR1_CEN;         // Start timer
}


void timer2_pa5_output_compare(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= GPIOA_EN;            // Enable GPIOA clock
 80005e4:	4b2d      	ldr	r3, [pc, #180]	@ (800069c <timer2_pa5_output_compare+0xbc>)
 80005e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e8:	4a2c      	ldr	r2, [pc, #176]	@ (800069c <timer2_pa5_output_compare+0xbc>)
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	64d3      	str	r3, [r2, #76]	@ 0x4c

    GPIOA->MODER &= ~(3U << 10);         // Clear PA5 mode bits
 80005f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005fa:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80005fe:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2U << 10);         // Set PA5 to alternate function
 8000600:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800060a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800060e:	6013      	str	r3, [r2, #0]

    GPIOA->AFR[0] &= ~(0xF << 20);       // Clear AFR for PA5
 8000610:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000614:	6a1b      	ldr	r3, [r3, #32]
 8000616:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800061a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800061e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (1U << 20);        // AF1 = TIM2_CH1
 8000620:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000624:	6a1b      	ldr	r3, [r3, #32]
 8000626:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800062a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800062e:	6213      	str	r3, [r2, #32]

    RCC->APB1ENR1 |= TIM2EN;             // Enable TIM2 clock
 8000630:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <timer2_pa5_output_compare+0xbc>)
 8000632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000634:	4a19      	ldr	r2, [pc, #100]	@ (800069c <timer2_pa5_output_compare+0xbc>)
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	6593      	str	r3, [r2, #88]	@ 0x58

    TIM2->PSC = 4000 - 1;               // Prescaler: 16 MHz → 1 kHz
 800063c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000640:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000644:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 1000 - 1;                // Auto-reload: 1000 ticks = 1 Hz
 8000646:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800064a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800064e:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM2->CCMR1 &= ~(7U << 4);           // Clear channel 1 mode
 8000650:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800065a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800065e:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |=  (3U << 4);           // Set toggle mode on CH1
 8000660:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800066a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800066e:	6193      	str	r3, [r2, #24]

    TIM2->CCER |= (1U << 0);             // Enable channel 1 output
 8000670:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000674:	6a1b      	ldr	r3, [r3, #32]
 8000676:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800067a:	f043 0301 	orr.w	r3, r3, #1
 800067e:	6213      	str	r3, [r2, #32]

    TIM2->CNT = 0;                       // Reset counter
 8000680:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000684:	2200      	movs	r2, #0
 8000686:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->CR1 = CR1_CEN;                 // Enable TIM2
 8000688:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800068c:	2201      	movs	r2, #1
 800068e:	601a      	str	r2, [r3, #0]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40021000 	.word	0x40021000

080006a0 <timer3_pa6_input_capture>:

void timer3_pa6_input_capture(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
    /* Enable GPIOA clock */
    RCC->AHB2ENR |= GPIOA_EN;
 80006a4:	4b27      	ldr	r3, [pc, #156]	@ (8000744 <timer3_pa6_input_capture+0xa4>)
 80006a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a8:	4a26      	ldr	r2, [pc, #152]	@ (8000744 <timer3_pa6_input_capture+0xa4>)
 80006aa:	f043 0301 	orr.w	r3, r3, #1
 80006ae:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Set PA6 to alternate function mode */
    GPIOA->MODER &= ~(3U << 12);
 80006b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80006ba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80006be:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2U << 12);
 80006c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80006ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006ce:	6013      	str	r3, [r2, #0]

    /* Set AF2 (TIM3_CH1 on PA6) */
    GPIOA->AFR[0] &= ~(0xF << 24);
 80006d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006d4:	6a1b      	ldr	r3, [r3, #32]
 80006d6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80006da:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80006de:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (2U << 24);
 80006e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006e4:	6a1b      	ldr	r3, [r3, #32]
 80006e6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80006ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006ee:	6213      	str	r3, [r2, #32]

    /* Enable clock access to TIM3 */
    RCC->APB1ENR1 |= TIM3EN;
 80006f0:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <timer3_pa6_input_capture+0xa4>)
 80006f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006f4:	4a13      	ldr	r2, [pc, #76]	@ (8000744 <timer3_pa6_input_capture+0xa4>)
 80006f6:	f043 0302 	orr.w	r3, r3, #2
 80006fa:	6593      	str	r3, [r2, #88]	@ 0x58

    /* Prescaler */
    TIM3->PSC = 16 - 1;   // 16 MHz / 16 = 1 MHz timer clock
 80006fc:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <timer3_pa6_input_capture+0xa8>)
 80006fe:	220f      	movs	r2, #15
 8000700:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set CH1 to input capture mode */
    TIM3->CCMR1 &= ~(3U << 0);
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <timer3_pa6_input_capture+0xa8>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	4a10      	ldr	r2, [pc, #64]	@ (8000748 <timer3_pa6_input_capture+0xa8>)
 8000708:	f023 0303 	bic.w	r3, r3, #3
 800070c:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |=  (1U << 0);   // CC1S = 01 -> IC1 mapped on TI1
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <timer3_pa6_input_capture+0xa8>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	4a0d      	ldr	r2, [pc, #52]	@ (8000748 <timer3_pa6_input_capture+0xa8>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6193      	str	r3, [r2, #24]

    /* Capture on rising edge */
    TIM3->CCER &= ~(1U << 1);    // CC1P = 0 (rising)
 800071a:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <timer3_pa6_input_capture+0xa8>)
 800071c:	6a1b      	ldr	r3, [r3, #32]
 800071e:	4a0a      	ldr	r2, [pc, #40]	@ (8000748 <timer3_pa6_input_capture+0xa8>)
 8000720:	f023 0302 	bic.w	r3, r3, #2
 8000724:	6213      	str	r3, [r2, #32]

    /* Enable capture from channel 1 */
    TIM3->CCER |= (1U << 0);
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <timer3_pa6_input_capture+0xa8>)
 8000728:	6a1b      	ldr	r3, [r3, #32]
 800072a:	4a07      	ldr	r2, [pc, #28]	@ (8000748 <timer3_pa6_input_capture+0xa8>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6213      	str	r3, [r2, #32]

    /* Enable timer */
    TIM3->CR1 = CR1_CEN;
 8000732:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <timer3_pa6_input_capture+0xa8>)
 8000734:	2201      	movs	r2, #1
 8000736:	601a      	str	r2, [r3, #0]
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000
 8000748:	40000400 	.word	0x40000400

0800074c <USART_PeriClockControl>:
#include "USART_driver.h"
#include "RCC_driver.h"

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d136      	bne.n	80007cc <USART_PeriClockControl+0x80>
	{
		if(pUSARTx == USART1)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a38      	ldr	r2, [pc, #224]	@ (8000844 <USART_PeriClockControl+0xf8>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d106      	bne.n	8000774 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000766:	4b38      	ldr	r3, [pc, #224]	@ (8000848 <USART_PeriClockControl+0xfc>)
 8000768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800076a:	4a37      	ldr	r2, [pc, #220]	@ (8000848 <USART_PeriClockControl+0xfc>)
 800076c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000770:	6613      	str	r3, [r2, #96]	@ 0x60
		else if(pUSARTx == UART5)
		{
			UART5_PCLK_DI();
		}
	}
}
 8000772:	e061      	b.n	8000838 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4a35      	ldr	r2, [pc, #212]	@ (800084c <USART_PeriClockControl+0x100>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d106      	bne.n	800078a <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 800077c:	4b32      	ldr	r3, [pc, #200]	@ (8000848 <USART_PeriClockControl+0xfc>)
 800077e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000780:	4a31      	ldr	r2, [pc, #196]	@ (8000848 <USART_PeriClockControl+0xfc>)
 8000782:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000786:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000788:	e056      	b.n	8000838 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a30      	ldr	r2, [pc, #192]	@ (8000850 <USART_PeriClockControl+0x104>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d106      	bne.n	80007a0 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000792:	4b2d      	ldr	r3, [pc, #180]	@ (8000848 <USART_PeriClockControl+0xfc>)
 8000794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000796:	4a2c      	ldr	r2, [pc, #176]	@ (8000848 <USART_PeriClockControl+0xfc>)
 8000798:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800079c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800079e:	e04b      	b.n	8000838 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a2c      	ldr	r2, [pc, #176]	@ (8000854 <USART_PeriClockControl+0x108>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d106      	bne.n	80007b6 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 80007a8:	4b27      	ldr	r3, [pc, #156]	@ (8000848 <USART_PeriClockControl+0xfc>)
 80007aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ac:	4a26      	ldr	r2, [pc, #152]	@ (8000848 <USART_PeriClockControl+0xfc>)
 80007ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80007b2:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80007b4:	e040      	b.n	8000838 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a27      	ldr	r2, [pc, #156]	@ (8000858 <USART_PeriClockControl+0x10c>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d13c      	bne.n	8000838 <USART_PeriClockControl+0xec>
			UART5_PCLK_EN();
 80007be:	4b22      	ldr	r3, [pc, #136]	@ (8000848 <USART_PeriClockControl+0xfc>)
 80007c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c2:	4a21      	ldr	r2, [pc, #132]	@ (8000848 <USART_PeriClockControl+0xfc>)
 80007c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80007c8:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80007ca:	e035      	b.n	8000838 <USART_PeriClockControl+0xec>
		if(pUSARTx == USART1)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a1d      	ldr	r2, [pc, #116]	@ (8000844 <USART_PeriClockControl+0xf8>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d106      	bne.n	80007e2 <USART_PeriClockControl+0x96>
			USART1_PCLK_DI();
 80007d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <USART_PeriClockControl+0xfc>)
 80007d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000848 <USART_PeriClockControl+0xfc>)
 80007da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80007de:	6613      	str	r3, [r2, #96]	@ 0x60
}
 80007e0:	e02a      	b.n	8000838 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a19      	ldr	r2, [pc, #100]	@ (800084c <USART_PeriClockControl+0x100>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d106      	bne.n	80007f8 <USART_PeriClockControl+0xac>
			USART2_PCLK_DI();
 80007ea:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <USART_PeriClockControl+0xfc>)
 80007ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ee:	4a16      	ldr	r2, [pc, #88]	@ (8000848 <USART_PeriClockControl+0xfc>)
 80007f0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80007f4:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80007f6:	e01f      	b.n	8000838 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a15      	ldr	r2, [pc, #84]	@ (8000850 <USART_PeriClockControl+0x104>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d106      	bne.n	800080e <USART_PeriClockControl+0xc2>
			USART3_PCLK_DI();
 8000800:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <USART_PeriClockControl+0xfc>)
 8000802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000804:	4a10      	ldr	r2, [pc, #64]	@ (8000848 <USART_PeriClockControl+0xfc>)
 8000806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800080a:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800080c:	e014      	b.n	8000838 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a10      	ldr	r2, [pc, #64]	@ (8000854 <USART_PeriClockControl+0x108>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d106      	bne.n	8000824 <USART_PeriClockControl+0xd8>
			UART4_PCLK_DI();
 8000816:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <USART_PeriClockControl+0xfc>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800081a:	4a0b      	ldr	r2, [pc, #44]	@ (8000848 <USART_PeriClockControl+0xfc>)
 800081c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000820:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000822:	e009      	b.n	8000838 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a0c      	ldr	r2, [pc, #48]	@ (8000858 <USART_PeriClockControl+0x10c>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d105      	bne.n	8000838 <USART_PeriClockControl+0xec>
			UART5_PCLK_DI();
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <USART_PeriClockControl+0xfc>)
 800082e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000830:	4a05      	ldr	r2, [pc, #20]	@ (8000848 <USART_PeriClockControl+0xfc>)
 8000832:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000836:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	40013800 	.word	0x40013800
 8000848:	40021000 	.word	0x40021000
 800084c:	40004400 	.word	0x40004400
 8000850:	40004800 	.word	0x40004800
 8000854:	40004c00 	.word	0x40004c00
 8000858:	40005000 	.word	0x40005000

0800085c <USART_Init>:
}



void USART_Init(USART_Handle_t *pUSARTHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
		uint32_t tempreg=0;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]

		USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2101      	movs	r1, #1
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff ff6c 	bl	800074c <USART_PeriClockControl>

		if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	791b      	ldrb	r3, [r3, #4]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d104      	bne.n	8000886 <USART_Init+0x2a>
		{
			tempreg|= (1 << USART_CR1_RE);
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f043 0304 	orr.w	r3, r3, #4
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	e010      	b.n	80008a8 <USART_Init+0x4c>
		}
		else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	791b      	ldrb	r3, [r3, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d104      	bne.n	8000898 <USART_Init+0x3c>
		{
			tempreg |= ( 1 << USART_CR1_TE );
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	e007      	b.n	80008a8 <USART_Init+0x4c>
		}
		else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	791b      	ldrb	r3, [r3, #4]
 800089c:	2b02      	cmp	r3, #2
 800089e:	d103      	bne.n	80008a8 <USART_Init+0x4c>
		{
			tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f043 030c 	orr.w	r3, r3, #12
 80008a6:	60fb      	str	r3, [r7, #12]
		}

		tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	7b5b      	ldrb	r3, [r3, #13]
 80008ac:	031b      	lsls	r3, r3, #12
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	60fb      	str	r3, [r7, #12]

		if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	7b9b      	ldrb	r3, [r3, #14]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d104      	bne.n	80008c6 <USART_Init+0x6a>
		{
			tempreg |= ( 1 << USART_CR1_PCE);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	e00b      	b.n	80008de <USART_Init+0x82>

		}
		else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	7b9b      	ldrb	r3, [r3, #14]
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d107      	bne.n	80008de <USART_Init+0x82>
		{
		    tempreg |= ( 1 << USART_CR1_PCE);
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008d4:	60fb      	str	r3, [r7, #12]
		    tempreg |= ( 1 << USART_CR1_PS);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008dc:	60fb      	str	r3, [r7, #12]
		}


		pUSARTHandle->pUSARTx->CR1 = tempreg;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	601a      	str	r2, [r3, #0]
		tempreg=0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
		tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	7b1b      	ldrb	r3, [r3, #12]
 80008ee:	031b      	lsls	r3, r3, #12
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]
		pUSARTHandle->pUSARTx->CR2 = tempreg;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	605a      	str	r2, [r3, #4]

		tempreg=0;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]


		if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	7bdb      	ldrb	r3, [r3, #15]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d104      	bne.n	8000914 <USART_Init+0xb8>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	e014      	b.n	800093e <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	7bdb      	ldrb	r3, [r3, #15]
 8000918:	2b02      	cmp	r3, #2
 800091a:	d104      	bne.n	8000926 <USART_Init+0xca>
		{
			tempreg |= ( 1 << USART_CR3_RTSE);
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	e00b      	b.n	800093e <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	7bdb      	ldrb	r3, [r3, #15]
 800092a:	2b03      	cmp	r3, #3
 800092c:	d107      	bne.n	800093e <USART_Init+0xe2>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000934:	60fb      	str	r3, [r7, #12]
			tempreg |= ( 1 << USART_CR3_RTSE);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800093c:	60fb      	str	r3, [r7, #12]
		}

		pUSARTHandle->pUSARTx->CR3 = tempreg;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	609a      	str	r2, [r3, #8]
		pUSARTHandle->pUSARTx->BRR=0X23;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2223      	movs	r2, #35	@ 0x23
 800094c:	60da      	str	r2, [r3, #12]
	//	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
}
 800094e:	bf00      	nop
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <USART_SendData>:




void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b086      	sub	sp, #24
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

	for(uint32_t i = 0 ; i < Len; i++)
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	e031      	b.n	80009cc <USART_SendData+0x76>
	{
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000968:	bf00      	nop
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2180      	movs	r1, #128	@ 0x80
 8000970:	4618      	mov	r0, r3
 8000972:	f000 f85a 	bl	8000a2a <USART_GetFlagStatus>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d0f6      	beq.n	800096a <USART_SendData+0x14>

		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	7b5b      	ldrb	r3, [r3, #13]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d118      	bne.n	80009b6 <USART_SendData+0x60>
		{
			pdata = (uint16_t*) pTxBuffer;
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000996:	629a      	str	r2, [r3, #40]	@ 0x28

			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	7b9b      	ldrb	r3, [r3, #14]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d106      	bne.n	80009ae <USART_SendData+0x58>
			{
				pTxBuffer++;
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	3301      	adds	r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	3301      	adds	r3, #1
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	e00b      	b.n	80009c6 <USART_SendData+0x70>

			}
			else
			{
				pTxBuffer++;
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	3301      	adds	r3, #1
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	e007      	b.n	80009c6 <USART_SendData+0x70>
			}
		}
		else
		{

			pUSARTHandle->pUSARTx->TDR = (*pTxBuffer  & (uint8_t)0xFF);
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	781a      	ldrb	r2, [r3, #0]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	629a      	str	r2, [r3, #40]	@ 0x28
			pTxBuffer++;
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	3301      	adds	r3, #1
 80009c4:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	3301      	adds	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697a      	ldr	r2, [r7, #20]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d3c9      	bcc.n	8000968 <USART_SendData+0x12>
		}
	}
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 80009d4:	bf00      	nop
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2140      	movs	r1, #64	@ 0x40
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 f824 	bl	8000a2a <USART_GetFlagStatus>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d0f6      	beq.n	80009d6 <USART_SendData+0x80>
}
 80009e8:	bf00      	nop
 80009ea:	bf00      	nop
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <USART_PeripheralControl>:
	temp2=0;

}

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
 80009fa:	460b      	mov	r3, r1
 80009fc:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80009fe:	78fb      	ldrb	r3, [r7, #3]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d106      	bne.n	8000a12 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |=(1<<USART_CR1_UE);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f043 0201 	orr.w	r2, r3, #1
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
	}
}
 8000a10:	e005      	b.n	8000a1e <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f023 0201 	bic.w	r2, r3, #1
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	601a      	str	r2, [r3, #0]
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <USART_GetFlagStatus>:


uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx,uint8_t StatusFlagName)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	460b      	mov	r3, r1
 8000a34:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx ->ISR & StatusFlagName)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	69da      	ldr	r2, [r3, #28]
 8000a3a:	78fb      	ldrb	r3, [r7, #3]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <USART_GetFlagStatus+0x1c>
	{
		return SET;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e000      	b.n	8000a48 <USART_GetFlagStatus+0x1e>
	}
	return RESET;
 8000a46:	2300      	movs	r3, #0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <USART2_Init>:

USART_Handle_t usart2_handle;  //USART2 handle

// Initialize USART2 peripheral with required settings
void USART2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;                                // Select USART2
 8000a58:	4b0d      	ldr	r3, [pc, #52]	@ (8000a90 <USART2_Init+0x3c>)
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a94 <USART2_Init+0x40>)
 8000a5c:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;  // Set baud rate to 115200
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <USART2_Init+0x3c>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a64:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE; // No hardware flow control
 8000a66:	4b0a      	ldr	r3, [pc, #40]	@ (8000a90 <USART2_Init+0x3c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;        // Enable both TX and RX
 8000a6c:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <USART2_Init+0x3c>)
 8000a6e:	2202      	movs	r2, #2
 8000a70:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1; // 1 stop bit
 8000a72:	4b07      	ldr	r3, [pc, #28]	@ (8000a90 <USART2_Init+0x3c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS; // 8-bit data
 8000a78:	4b05      	ldr	r3, [pc, #20]	@ (8000a90 <USART2_Init+0x3c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE; // No parity
 8000a7e:	4b04      	ldr	r3, [pc, #16]	@ (8000a90 <USART2_Init+0x3c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle); // Apply the configuration
 8000a84:	4802      	ldr	r0, [pc, #8]	@ (8000a90 <USART2_Init+0x3c>)
 8000a86:	f7ff fee9 	bl	800085c <USART_Init>
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000078 	.word	0x20000078
 8000a94:	40004400 	.word	0x40004400

08000a98 <USART2_GPIOInit>:

// Configure GPIO pins for USART2 (PA2=TX, PA3=RX)
void USART2_GPIOInit(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart2_gpio;
	memset(&usart2_gpio,0,sizeof(usart2_gpio)); // Clear structure
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	220c      	movs	r2, #12
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 fb08 	bl	80010ba <memset>

	usart2_gpio.pGPIOx = GPIOA;                           // Use GPIO Port A
 8000aaa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000aae:	607b      	str	r3, [r7, #4]
	usart2_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;     // Alternate function mode
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	727b      	strb	r3, [r7, #9]
	usart2_gpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;   // Push-pull output
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	733b      	strb	r3, [r7, #12]
	usart2_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;  // Pull-up resistor
 8000ab8:	2301      	movs	r3, #1
 8000aba:	72fb      	strb	r3, [r7, #11]
	usart2_gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;    // Fast speed
 8000abc:	2302      	movs	r3, #2
 8000abe:	72bb      	strb	r3, [r7, #10]
	usart2_gpio.GPIO_PinConfig.GPIO_PinAltFunMode = 7;             // AF7 = USART2
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	737b      	strb	r3, [r7, #13]

	// Configure PA2 as USART2_TX
	usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	723b      	strb	r3, [r7, #8]
	GPIOA_PCLK_EN();                // Enable clock for GPIOA
 8000ac8:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <USART2_GPIOInit+0x58>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000acc:	4a08      	ldr	r2, [pc, #32]	@ (8000af0 <USART2_GPIOInit+0x58>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIO_Init(&usart2_gpio);
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fbca 	bl	8000270 <GPIO_Init>

	// Configure PA3 as USART2_RX
	usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000adc:	2303      	movs	r3, #3
 8000ade:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart2_gpio);
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fbc4 	bl	8000270 <GPIO_Init>
}
 8000ae8:	bf00      	nop
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40021000 	.word	0x40021000

08000af4 <delay>:

//small software delay
void delay()
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<500000;i++);
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	e002      	b.n	8000b06 <delay+0x12>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3301      	adds	r3, #1
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <delay+0x28>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d9f8      	bls.n	8000b00 <delay+0xc>
}
 8000b0e:	bf00      	nop
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	0007a11f 	.word	0x0007a11f

08000b20 <__io_putchar>:

// Redirect low-level printf output to USART2
int __io_putchar(int ch)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	// Send one character through USART2
	USART_SendData(&usart2_handle, (uint8_t*)&ch, 1);
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4804      	ldr	r0, [pc, #16]	@ (8000b40 <__io_putchar+0x20>)
 8000b30:	f7ff ff11 	bl	8000956 <USART_SendData>
	return(ch);   // Return the character sent
 8000b34:	687b      	ldr	r3, [r7, #4]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000078 	.word	0x20000078

08000b44 <main>:

int main()
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
	int val;
	USART2_GPIOInit();                        // Initialize USART2 GPIO pins (PA2=TX, PA3=RX)
 8000b4a:	f7ff ffa5 	bl	8000a98 <USART2_GPIOInit>
	USART2_Init();                            // Configure USART2
 8000b4e:	f7ff ff81 	bl	8000a54 <USART2_Init>
	USART_PeripheralControl(USART2, ENABLE);  // Enable USART2 peripheral
 8000b52:	2101      	movs	r1, #1
 8000b54:	480c      	ldr	r0, [pc, #48]	@ (8000b88 <main+0x44>)
 8000b56:	f7ff ff4c 	bl	80009f2 <USART_PeripheralControl>
	timer2_pa5_output_compare();    // Configure PA5 as TIM2_CH1 (toggle mode) to generate a test signal
 8000b5a:	f7ff fd41 	bl	80005e0 <timer2_pa5_output_compare>
	timer3_pa6_input_capture();     // Configure PA6 as TIM3_CH1 (input capture) to measure signal
 8000b5e:	f7ff fd9f 	bl	80006a0 <timer3_pa6_input_capture>

	while(1)
	{
	    // Wait until TIM2 output compare flag is set (toggle event happened)
	    while(!(TIM2->SR & SR_CC1IF));
 8000b62:	bf00      	nop
 8000b64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b68:	691b      	ldr	r3, [r3, #16]
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d0f8      	beq.n	8000b64 <main+0x20>

	    // Read the captured timer value from TIM3 Channel 1
	    val = TIM3->CCR1;
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <main+0x48>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	607b      	str	r3, [r7, #4]

	    // Print the captured value for debugging
	    printf("Timestamp: %d\r\n", val);
 8000b78:	6879      	ldr	r1, [r7, #4]
 8000b7a:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <main+0x4c>)
 8000b7c:	f000 fa48 	bl	8001010 <iprintf>

	    // Small delay to avoid flooding the terminal
	    delay();
 8000b80:	f7ff ffb8 	bl	8000af4 <delay>
	    while(!(TIM2->SR & SR_CC1IF));
 8000b84:	e7ed      	b.n	8000b62 <main+0x1e>
 8000b86:	bf00      	nop
 8000b88:	40004400 	.word	0x40004400
 8000b8c:	40000400 	.word	0x40000400
 8000b90:	08001ba4 	.word	0x08001ba4

08000b94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	e00a      	b.n	8000bbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ba6:	f3af 8000 	nop.w
 8000baa:	4601      	mov	r1, r0
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	60ba      	str	r2, [r7, #8]
 8000bb2:	b2ca      	uxtb	r2, r1
 8000bb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697a      	ldr	r2, [r7, #20]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	dbf0      	blt.n	8000ba6 <_read+0x12>
  }

  return len;
 8000bc4:	687b      	ldr	r3, [r7, #4]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b086      	sub	sp, #24
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	e009      	b.n	8000bf4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	60ba      	str	r2, [r7, #8]
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff99 	bl	8000b20 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697a      	ldr	r2, [r7, #20]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	dbf1      	blt.n	8000be0 <_write+0x12>
  }
  return len;
 8000bfc:	687b      	ldr	r3, [r7, #4]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <_close>:

int _close(int file)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_isatty>:

int _isatty(int file)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c78:	4a14      	ldr	r2, [pc, #80]	@ (8000ccc <_sbrk+0x5c>)
 8000c7a:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <_sbrk+0x60>)
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c84:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d102      	bne.n	8000c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <_sbrk+0x64>)
 8000c8e:	4a12      	ldr	r2, [pc, #72]	@ (8000cd8 <_sbrk+0x68>)
 8000c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c92:	4b10      	ldr	r3, [pc, #64]	@ (8000cd4 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d207      	bcs.n	8000cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca0:	f000 fa6a 	bl	8001178 <__errno>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cae:	e009      	b.n	8000cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb6:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4a05      	ldr	r2, [pc, #20]	@ (8000cd4 <_sbrk+0x64>)
 8000cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20018000 	.word	0x20018000
 8000cd0:	00000400 	.word	0x00000400
 8000cd4:	2000009c 	.word	0x2000009c
 8000cd8:	200001f0 	.word	0x200001f0

08000cdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cdc:	480d      	ldr	r0, [pc, #52]	@ (8000d14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cde:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ce0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce4:	480c      	ldr	r0, [pc, #48]	@ (8000d18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce6:	490d      	ldr	r1, [pc, #52]	@ (8000d1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d20 <LoopForever+0xe>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cec:	e002      	b.n	8000cf4 <LoopCopyDataInit>

08000cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf2:	3304      	adds	r3, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf8:	d3f9      	bcc.n	8000cee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000d24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000d28 <LoopForever+0x16>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d00:	e001      	b.n	8000d06 <LoopFillZerobss>

08000d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d04:	3204      	adds	r2, #4

08000d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d08:	d3fb      	bcc.n	8000d02 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000d0a:	f000 fa3b 	bl	8001184 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000d0e:	f7ff ff19 	bl	8000b44 <main>

08000d12 <LoopForever>:

LoopForever:
  b LoopForever
 8000d12:	e7fe      	b.n	8000d12 <LoopForever>
  ldr   r0, =_estack
 8000d14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d1c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d20:	08001bf8 	.word	0x08001bf8
  ldr r2, =_sbss
 8000d24:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d28:	200001ec 	.word	0x200001ec

08000d2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC1_2_IRQHandler>
	...

08000d30 <sbrk_aligned>:
 8000d30:	b570      	push	{r4, r5, r6, lr}
 8000d32:	4e0f      	ldr	r6, [pc, #60]	@ (8000d70 <sbrk_aligned+0x40>)
 8000d34:	460c      	mov	r4, r1
 8000d36:	6831      	ldr	r1, [r6, #0]
 8000d38:	4605      	mov	r5, r0
 8000d3a:	b911      	cbnz	r1, 8000d42 <sbrk_aligned+0x12>
 8000d3c:	f000 f9fa 	bl	8001134 <_sbrk_r>
 8000d40:	6030      	str	r0, [r6, #0]
 8000d42:	4621      	mov	r1, r4
 8000d44:	4628      	mov	r0, r5
 8000d46:	f000 f9f5 	bl	8001134 <_sbrk_r>
 8000d4a:	1c43      	adds	r3, r0, #1
 8000d4c:	d103      	bne.n	8000d56 <sbrk_aligned+0x26>
 8000d4e:	f04f 34ff 	mov.w	r4, #4294967295
 8000d52:	4620      	mov	r0, r4
 8000d54:	bd70      	pop	{r4, r5, r6, pc}
 8000d56:	1cc4      	adds	r4, r0, #3
 8000d58:	f024 0403 	bic.w	r4, r4, #3
 8000d5c:	42a0      	cmp	r0, r4
 8000d5e:	d0f8      	beq.n	8000d52 <sbrk_aligned+0x22>
 8000d60:	1a21      	subs	r1, r4, r0
 8000d62:	4628      	mov	r0, r5
 8000d64:	f000 f9e6 	bl	8001134 <_sbrk_r>
 8000d68:	3001      	adds	r0, #1
 8000d6a:	d1f2      	bne.n	8000d52 <sbrk_aligned+0x22>
 8000d6c:	e7ef      	b.n	8000d4e <sbrk_aligned+0x1e>
 8000d6e:	bf00      	nop
 8000d70:	200000a0 	.word	0x200000a0

08000d74 <_malloc_r>:
 8000d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d78:	1ccd      	adds	r5, r1, #3
 8000d7a:	f025 0503 	bic.w	r5, r5, #3
 8000d7e:	3508      	adds	r5, #8
 8000d80:	2d0c      	cmp	r5, #12
 8000d82:	bf38      	it	cc
 8000d84:	250c      	movcc	r5, #12
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	4606      	mov	r6, r0
 8000d8a:	db01      	blt.n	8000d90 <_malloc_r+0x1c>
 8000d8c:	42a9      	cmp	r1, r5
 8000d8e:	d904      	bls.n	8000d9a <_malloc_r+0x26>
 8000d90:	230c      	movs	r3, #12
 8000d92:	6033      	str	r3, [r6, #0]
 8000d94:	2000      	movs	r0, #0
 8000d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000e70 <_malloc_r+0xfc>
 8000d9e:	f000 f869 	bl	8000e74 <__malloc_lock>
 8000da2:	f8d8 3000 	ldr.w	r3, [r8]
 8000da6:	461c      	mov	r4, r3
 8000da8:	bb44      	cbnz	r4, 8000dfc <_malloc_r+0x88>
 8000daa:	4629      	mov	r1, r5
 8000dac:	4630      	mov	r0, r6
 8000dae:	f7ff ffbf 	bl	8000d30 <sbrk_aligned>
 8000db2:	1c43      	adds	r3, r0, #1
 8000db4:	4604      	mov	r4, r0
 8000db6:	d158      	bne.n	8000e6a <_malloc_r+0xf6>
 8000db8:	f8d8 4000 	ldr.w	r4, [r8]
 8000dbc:	4627      	mov	r7, r4
 8000dbe:	2f00      	cmp	r7, #0
 8000dc0:	d143      	bne.n	8000e4a <_malloc_r+0xd6>
 8000dc2:	2c00      	cmp	r4, #0
 8000dc4:	d04b      	beq.n	8000e5e <_malloc_r+0xea>
 8000dc6:	6823      	ldr	r3, [r4, #0]
 8000dc8:	4639      	mov	r1, r7
 8000dca:	4630      	mov	r0, r6
 8000dcc:	eb04 0903 	add.w	r9, r4, r3
 8000dd0:	f000 f9b0 	bl	8001134 <_sbrk_r>
 8000dd4:	4581      	cmp	r9, r0
 8000dd6:	d142      	bne.n	8000e5e <_malloc_r+0xea>
 8000dd8:	6821      	ldr	r1, [r4, #0]
 8000dda:	1a6d      	subs	r5, r5, r1
 8000ddc:	4629      	mov	r1, r5
 8000dde:	4630      	mov	r0, r6
 8000de0:	f7ff ffa6 	bl	8000d30 <sbrk_aligned>
 8000de4:	3001      	adds	r0, #1
 8000de6:	d03a      	beq.n	8000e5e <_malloc_r+0xea>
 8000de8:	6823      	ldr	r3, [r4, #0]
 8000dea:	442b      	add	r3, r5
 8000dec:	6023      	str	r3, [r4, #0]
 8000dee:	f8d8 3000 	ldr.w	r3, [r8]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	bb62      	cbnz	r2, 8000e50 <_malloc_r+0xdc>
 8000df6:	f8c8 7000 	str.w	r7, [r8]
 8000dfa:	e00f      	b.n	8000e1c <_malloc_r+0xa8>
 8000dfc:	6822      	ldr	r2, [r4, #0]
 8000dfe:	1b52      	subs	r2, r2, r5
 8000e00:	d420      	bmi.n	8000e44 <_malloc_r+0xd0>
 8000e02:	2a0b      	cmp	r2, #11
 8000e04:	d917      	bls.n	8000e36 <_malloc_r+0xc2>
 8000e06:	1961      	adds	r1, r4, r5
 8000e08:	42a3      	cmp	r3, r4
 8000e0a:	6025      	str	r5, [r4, #0]
 8000e0c:	bf18      	it	ne
 8000e0e:	6059      	strne	r1, [r3, #4]
 8000e10:	6863      	ldr	r3, [r4, #4]
 8000e12:	bf08      	it	eq
 8000e14:	f8c8 1000 	streq.w	r1, [r8]
 8000e18:	5162      	str	r2, [r4, r5]
 8000e1a:	604b      	str	r3, [r1, #4]
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	f000 f82f 	bl	8000e80 <__malloc_unlock>
 8000e22:	f104 000b 	add.w	r0, r4, #11
 8000e26:	1d23      	adds	r3, r4, #4
 8000e28:	f020 0007 	bic.w	r0, r0, #7
 8000e2c:	1ac2      	subs	r2, r0, r3
 8000e2e:	bf1c      	itt	ne
 8000e30:	1a1b      	subne	r3, r3, r0
 8000e32:	50a3      	strne	r3, [r4, r2]
 8000e34:	e7af      	b.n	8000d96 <_malloc_r+0x22>
 8000e36:	6862      	ldr	r2, [r4, #4]
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	bf0c      	ite	eq
 8000e3c:	f8c8 2000 	streq.w	r2, [r8]
 8000e40:	605a      	strne	r2, [r3, #4]
 8000e42:	e7eb      	b.n	8000e1c <_malloc_r+0xa8>
 8000e44:	4623      	mov	r3, r4
 8000e46:	6864      	ldr	r4, [r4, #4]
 8000e48:	e7ae      	b.n	8000da8 <_malloc_r+0x34>
 8000e4a:	463c      	mov	r4, r7
 8000e4c:	687f      	ldr	r7, [r7, #4]
 8000e4e:	e7b6      	b.n	8000dbe <_malloc_r+0x4a>
 8000e50:	461a      	mov	r2, r3
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	42a3      	cmp	r3, r4
 8000e56:	d1fb      	bne.n	8000e50 <_malloc_r+0xdc>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	6053      	str	r3, [r2, #4]
 8000e5c:	e7de      	b.n	8000e1c <_malloc_r+0xa8>
 8000e5e:	230c      	movs	r3, #12
 8000e60:	6033      	str	r3, [r6, #0]
 8000e62:	4630      	mov	r0, r6
 8000e64:	f000 f80c 	bl	8000e80 <__malloc_unlock>
 8000e68:	e794      	b.n	8000d94 <_malloc_r+0x20>
 8000e6a:	6005      	str	r5, [r0, #0]
 8000e6c:	e7d6      	b.n	8000e1c <_malloc_r+0xa8>
 8000e6e:	bf00      	nop
 8000e70:	200000a4 	.word	0x200000a4

08000e74 <__malloc_lock>:
 8000e74:	4801      	ldr	r0, [pc, #4]	@ (8000e7c <__malloc_lock+0x8>)
 8000e76:	f000 b9aa 	b.w	80011ce <__retarget_lock_acquire_recursive>
 8000e7a:	bf00      	nop
 8000e7c:	200001e8 	.word	0x200001e8

08000e80 <__malloc_unlock>:
 8000e80:	4801      	ldr	r0, [pc, #4]	@ (8000e88 <__malloc_unlock+0x8>)
 8000e82:	f000 b9a5 	b.w	80011d0 <__retarget_lock_release_recursive>
 8000e86:	bf00      	nop
 8000e88:	200001e8 	.word	0x200001e8

08000e8c <std>:
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	b510      	push	{r4, lr}
 8000e90:	4604      	mov	r4, r0
 8000e92:	e9c0 3300 	strd	r3, r3, [r0]
 8000e96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e9a:	6083      	str	r3, [r0, #8]
 8000e9c:	8181      	strh	r1, [r0, #12]
 8000e9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000ea0:	81c2      	strh	r2, [r0, #14]
 8000ea2:	6183      	str	r3, [r0, #24]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	2208      	movs	r2, #8
 8000ea8:	305c      	adds	r0, #92	@ 0x5c
 8000eaa:	f000 f906 	bl	80010ba <memset>
 8000eae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <std+0x58>)
 8000eb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <std+0x5c>)
 8000eb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <std+0x60>)
 8000eb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000eba:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef0 <std+0x64>)
 8000ebc:	6323      	str	r3, [r4, #48]	@ 0x30
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef4 <std+0x68>)
 8000ec0:	6224      	str	r4, [r4, #32]
 8000ec2:	429c      	cmp	r4, r3
 8000ec4:	d006      	beq.n	8000ed4 <std+0x48>
 8000ec6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000eca:	4294      	cmp	r4, r2
 8000ecc:	d002      	beq.n	8000ed4 <std+0x48>
 8000ece:	33d0      	adds	r3, #208	@ 0xd0
 8000ed0:	429c      	cmp	r4, r3
 8000ed2:	d105      	bne.n	8000ee0 <std+0x54>
 8000ed4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000edc:	f000 b976 	b.w	80011cc <__retarget_lock_init_recursive>
 8000ee0:	bd10      	pop	{r4, pc}
 8000ee2:	bf00      	nop
 8000ee4:	08001035 	.word	0x08001035
 8000ee8:	08001057 	.word	0x08001057
 8000eec:	0800108f 	.word	0x0800108f
 8000ef0:	080010b3 	.word	0x080010b3
 8000ef4:	200000a8 	.word	0x200000a8

08000ef8 <stdio_exit_handler>:
 8000ef8:	4a02      	ldr	r2, [pc, #8]	@ (8000f04 <stdio_exit_handler+0xc>)
 8000efa:	4903      	ldr	r1, [pc, #12]	@ (8000f08 <stdio_exit_handler+0x10>)
 8000efc:	4803      	ldr	r0, [pc, #12]	@ (8000f0c <stdio_exit_handler+0x14>)
 8000efe:	f000 b869 	b.w	8000fd4 <_fwalk_sglue>
 8000f02:	bf00      	nop
 8000f04:	20000000 	.word	0x20000000
 8000f08:	0800190d 	.word	0x0800190d
 8000f0c:	20000010 	.word	0x20000010

08000f10 <cleanup_stdio>:
 8000f10:	6841      	ldr	r1, [r0, #4]
 8000f12:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <cleanup_stdio+0x34>)
 8000f14:	4299      	cmp	r1, r3
 8000f16:	b510      	push	{r4, lr}
 8000f18:	4604      	mov	r4, r0
 8000f1a:	d001      	beq.n	8000f20 <cleanup_stdio+0x10>
 8000f1c:	f000 fcf6 	bl	800190c <_fflush_r>
 8000f20:	68a1      	ldr	r1, [r4, #8]
 8000f22:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <cleanup_stdio+0x38>)
 8000f24:	4299      	cmp	r1, r3
 8000f26:	d002      	beq.n	8000f2e <cleanup_stdio+0x1e>
 8000f28:	4620      	mov	r0, r4
 8000f2a:	f000 fcef 	bl	800190c <_fflush_r>
 8000f2e:	68e1      	ldr	r1, [r4, #12]
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <cleanup_stdio+0x3c>)
 8000f32:	4299      	cmp	r1, r3
 8000f34:	d004      	beq.n	8000f40 <cleanup_stdio+0x30>
 8000f36:	4620      	mov	r0, r4
 8000f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f3c:	f000 bce6 	b.w	800190c <_fflush_r>
 8000f40:	bd10      	pop	{r4, pc}
 8000f42:	bf00      	nop
 8000f44:	200000a8 	.word	0x200000a8
 8000f48:	20000110 	.word	0x20000110
 8000f4c:	20000178 	.word	0x20000178

08000f50 <global_stdio_init.part.0>:
 8000f50:	b510      	push	{r4, lr}
 8000f52:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <global_stdio_init.part.0+0x30>)
 8000f54:	4c0b      	ldr	r4, [pc, #44]	@ (8000f84 <global_stdio_init.part.0+0x34>)
 8000f56:	4a0c      	ldr	r2, [pc, #48]	@ (8000f88 <global_stdio_init.part.0+0x38>)
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2104      	movs	r1, #4
 8000f60:	f7ff ff94 	bl	8000e8c <std>
 8000f64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2109      	movs	r1, #9
 8000f6c:	f7ff ff8e 	bl	8000e8c <std>
 8000f70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000f74:	2202      	movs	r2, #2
 8000f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f7a:	2112      	movs	r1, #18
 8000f7c:	f7ff bf86 	b.w	8000e8c <std>
 8000f80:	200001e0 	.word	0x200001e0
 8000f84:	200000a8 	.word	0x200000a8
 8000f88:	08000ef9 	.word	0x08000ef9

08000f8c <__sfp_lock_acquire>:
 8000f8c:	4801      	ldr	r0, [pc, #4]	@ (8000f94 <__sfp_lock_acquire+0x8>)
 8000f8e:	f000 b91e 	b.w	80011ce <__retarget_lock_acquire_recursive>
 8000f92:	bf00      	nop
 8000f94:	200001e9 	.word	0x200001e9

08000f98 <__sfp_lock_release>:
 8000f98:	4801      	ldr	r0, [pc, #4]	@ (8000fa0 <__sfp_lock_release+0x8>)
 8000f9a:	f000 b919 	b.w	80011d0 <__retarget_lock_release_recursive>
 8000f9e:	bf00      	nop
 8000fa0:	200001e9 	.word	0x200001e9

08000fa4 <__sinit>:
 8000fa4:	b510      	push	{r4, lr}
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	f7ff fff0 	bl	8000f8c <__sfp_lock_acquire>
 8000fac:	6a23      	ldr	r3, [r4, #32]
 8000fae:	b11b      	cbz	r3, 8000fb8 <__sinit+0x14>
 8000fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fb4:	f7ff bff0 	b.w	8000f98 <__sfp_lock_release>
 8000fb8:	4b04      	ldr	r3, [pc, #16]	@ (8000fcc <__sinit+0x28>)
 8000fba:	6223      	str	r3, [r4, #32]
 8000fbc:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <__sinit+0x2c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1f5      	bne.n	8000fb0 <__sinit+0xc>
 8000fc4:	f7ff ffc4 	bl	8000f50 <global_stdio_init.part.0>
 8000fc8:	e7f2      	b.n	8000fb0 <__sinit+0xc>
 8000fca:	bf00      	nop
 8000fcc:	08000f11 	.word	0x08000f11
 8000fd0:	200001e0 	.word	0x200001e0

08000fd4 <_fwalk_sglue>:
 8000fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fd8:	4607      	mov	r7, r0
 8000fda:	4688      	mov	r8, r1
 8000fdc:	4614      	mov	r4, r2
 8000fde:	2600      	movs	r6, #0
 8000fe0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000fe4:	f1b9 0901 	subs.w	r9, r9, #1
 8000fe8:	d505      	bpl.n	8000ff6 <_fwalk_sglue+0x22>
 8000fea:	6824      	ldr	r4, [r4, #0]
 8000fec:	2c00      	cmp	r4, #0
 8000fee:	d1f7      	bne.n	8000fe0 <_fwalk_sglue+0xc>
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ff6:	89ab      	ldrh	r3, [r5, #12]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d907      	bls.n	800100c <_fwalk_sglue+0x38>
 8000ffc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001000:	3301      	adds	r3, #1
 8001002:	d003      	beq.n	800100c <_fwalk_sglue+0x38>
 8001004:	4629      	mov	r1, r5
 8001006:	4638      	mov	r0, r7
 8001008:	47c0      	blx	r8
 800100a:	4306      	orrs	r6, r0
 800100c:	3568      	adds	r5, #104	@ 0x68
 800100e:	e7e9      	b.n	8000fe4 <_fwalk_sglue+0x10>

08001010 <iprintf>:
 8001010:	b40f      	push	{r0, r1, r2, r3}
 8001012:	b507      	push	{r0, r1, r2, lr}
 8001014:	4906      	ldr	r1, [pc, #24]	@ (8001030 <iprintf+0x20>)
 8001016:	ab04      	add	r3, sp, #16
 8001018:	6808      	ldr	r0, [r1, #0]
 800101a:	f853 2b04 	ldr.w	r2, [r3], #4
 800101e:	6881      	ldr	r1, [r0, #8]
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	f000 f94b 	bl	80012bc <_vfiprintf_r>
 8001026:	b003      	add	sp, #12
 8001028:	f85d eb04 	ldr.w	lr, [sp], #4
 800102c:	b004      	add	sp, #16
 800102e:	4770      	bx	lr
 8001030:	2000000c 	.word	0x2000000c

08001034 <__sread>:
 8001034:	b510      	push	{r4, lr}
 8001036:	460c      	mov	r4, r1
 8001038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800103c:	f000 f868 	bl	8001110 <_read_r>
 8001040:	2800      	cmp	r0, #0
 8001042:	bfab      	itete	ge
 8001044:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001046:	89a3      	ldrhlt	r3, [r4, #12]
 8001048:	181b      	addge	r3, r3, r0
 800104a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800104e:	bfac      	ite	ge
 8001050:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001052:	81a3      	strhlt	r3, [r4, #12]
 8001054:	bd10      	pop	{r4, pc}

08001056 <__swrite>:
 8001056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800105a:	461f      	mov	r7, r3
 800105c:	898b      	ldrh	r3, [r1, #12]
 800105e:	05db      	lsls	r3, r3, #23
 8001060:	4605      	mov	r5, r0
 8001062:	460c      	mov	r4, r1
 8001064:	4616      	mov	r6, r2
 8001066:	d505      	bpl.n	8001074 <__swrite+0x1e>
 8001068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800106c:	2302      	movs	r3, #2
 800106e:	2200      	movs	r2, #0
 8001070:	f000 f83c 	bl	80010ec <_lseek_r>
 8001074:	89a3      	ldrh	r3, [r4, #12]
 8001076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800107a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800107e:	81a3      	strh	r3, [r4, #12]
 8001080:	4632      	mov	r2, r6
 8001082:	463b      	mov	r3, r7
 8001084:	4628      	mov	r0, r5
 8001086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800108a:	f000 b863 	b.w	8001154 <_write_r>

0800108e <__sseek>:
 800108e:	b510      	push	{r4, lr}
 8001090:	460c      	mov	r4, r1
 8001092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001096:	f000 f829 	bl	80010ec <_lseek_r>
 800109a:	1c43      	adds	r3, r0, #1
 800109c:	89a3      	ldrh	r3, [r4, #12]
 800109e:	bf15      	itete	ne
 80010a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80010a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80010a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80010aa:	81a3      	strheq	r3, [r4, #12]
 80010ac:	bf18      	it	ne
 80010ae:	81a3      	strhne	r3, [r4, #12]
 80010b0:	bd10      	pop	{r4, pc}

080010b2 <__sclose>:
 80010b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010b6:	f000 b809 	b.w	80010cc <_close_r>

080010ba <memset>:
 80010ba:	4402      	add	r2, r0
 80010bc:	4603      	mov	r3, r0
 80010be:	4293      	cmp	r3, r2
 80010c0:	d100      	bne.n	80010c4 <memset+0xa>
 80010c2:	4770      	bx	lr
 80010c4:	f803 1b01 	strb.w	r1, [r3], #1
 80010c8:	e7f9      	b.n	80010be <memset+0x4>
	...

080010cc <_close_r>:
 80010cc:	b538      	push	{r3, r4, r5, lr}
 80010ce:	4d06      	ldr	r5, [pc, #24]	@ (80010e8 <_close_r+0x1c>)
 80010d0:	2300      	movs	r3, #0
 80010d2:	4604      	mov	r4, r0
 80010d4:	4608      	mov	r0, r1
 80010d6:	602b      	str	r3, [r5, #0]
 80010d8:	f7ff fd95 	bl	8000c06 <_close>
 80010dc:	1c43      	adds	r3, r0, #1
 80010de:	d102      	bne.n	80010e6 <_close_r+0x1a>
 80010e0:	682b      	ldr	r3, [r5, #0]
 80010e2:	b103      	cbz	r3, 80010e6 <_close_r+0x1a>
 80010e4:	6023      	str	r3, [r4, #0]
 80010e6:	bd38      	pop	{r3, r4, r5, pc}
 80010e8:	200001e4 	.word	0x200001e4

080010ec <_lseek_r>:
 80010ec:	b538      	push	{r3, r4, r5, lr}
 80010ee:	4d07      	ldr	r5, [pc, #28]	@ (800110c <_lseek_r+0x20>)
 80010f0:	4604      	mov	r4, r0
 80010f2:	4608      	mov	r0, r1
 80010f4:	4611      	mov	r1, r2
 80010f6:	2200      	movs	r2, #0
 80010f8:	602a      	str	r2, [r5, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	f7ff fdaa 	bl	8000c54 <_lseek>
 8001100:	1c43      	adds	r3, r0, #1
 8001102:	d102      	bne.n	800110a <_lseek_r+0x1e>
 8001104:	682b      	ldr	r3, [r5, #0]
 8001106:	b103      	cbz	r3, 800110a <_lseek_r+0x1e>
 8001108:	6023      	str	r3, [r4, #0]
 800110a:	bd38      	pop	{r3, r4, r5, pc}
 800110c:	200001e4 	.word	0x200001e4

08001110 <_read_r>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	4d07      	ldr	r5, [pc, #28]	@ (8001130 <_read_r+0x20>)
 8001114:	4604      	mov	r4, r0
 8001116:	4608      	mov	r0, r1
 8001118:	4611      	mov	r1, r2
 800111a:	2200      	movs	r2, #0
 800111c:	602a      	str	r2, [r5, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	f7ff fd38 	bl	8000b94 <_read>
 8001124:	1c43      	adds	r3, r0, #1
 8001126:	d102      	bne.n	800112e <_read_r+0x1e>
 8001128:	682b      	ldr	r3, [r5, #0]
 800112a:	b103      	cbz	r3, 800112e <_read_r+0x1e>
 800112c:	6023      	str	r3, [r4, #0]
 800112e:	bd38      	pop	{r3, r4, r5, pc}
 8001130:	200001e4 	.word	0x200001e4

08001134 <_sbrk_r>:
 8001134:	b538      	push	{r3, r4, r5, lr}
 8001136:	4d06      	ldr	r5, [pc, #24]	@ (8001150 <_sbrk_r+0x1c>)
 8001138:	2300      	movs	r3, #0
 800113a:	4604      	mov	r4, r0
 800113c:	4608      	mov	r0, r1
 800113e:	602b      	str	r3, [r5, #0]
 8001140:	f7ff fd96 	bl	8000c70 <_sbrk>
 8001144:	1c43      	adds	r3, r0, #1
 8001146:	d102      	bne.n	800114e <_sbrk_r+0x1a>
 8001148:	682b      	ldr	r3, [r5, #0]
 800114a:	b103      	cbz	r3, 800114e <_sbrk_r+0x1a>
 800114c:	6023      	str	r3, [r4, #0]
 800114e:	bd38      	pop	{r3, r4, r5, pc}
 8001150:	200001e4 	.word	0x200001e4

08001154 <_write_r>:
 8001154:	b538      	push	{r3, r4, r5, lr}
 8001156:	4d07      	ldr	r5, [pc, #28]	@ (8001174 <_write_r+0x20>)
 8001158:	4604      	mov	r4, r0
 800115a:	4608      	mov	r0, r1
 800115c:	4611      	mov	r1, r2
 800115e:	2200      	movs	r2, #0
 8001160:	602a      	str	r2, [r5, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	f7ff fd33 	bl	8000bce <_write>
 8001168:	1c43      	adds	r3, r0, #1
 800116a:	d102      	bne.n	8001172 <_write_r+0x1e>
 800116c:	682b      	ldr	r3, [r5, #0]
 800116e:	b103      	cbz	r3, 8001172 <_write_r+0x1e>
 8001170:	6023      	str	r3, [r4, #0]
 8001172:	bd38      	pop	{r3, r4, r5, pc}
 8001174:	200001e4 	.word	0x200001e4

08001178 <__errno>:
 8001178:	4b01      	ldr	r3, [pc, #4]	@ (8001180 <__errno+0x8>)
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	2000000c 	.word	0x2000000c

08001184 <__libc_init_array>:
 8001184:	b570      	push	{r4, r5, r6, lr}
 8001186:	4d0d      	ldr	r5, [pc, #52]	@ (80011bc <__libc_init_array+0x38>)
 8001188:	4c0d      	ldr	r4, [pc, #52]	@ (80011c0 <__libc_init_array+0x3c>)
 800118a:	1b64      	subs	r4, r4, r5
 800118c:	10a4      	asrs	r4, r4, #2
 800118e:	2600      	movs	r6, #0
 8001190:	42a6      	cmp	r6, r4
 8001192:	d109      	bne.n	80011a8 <__libc_init_array+0x24>
 8001194:	4d0b      	ldr	r5, [pc, #44]	@ (80011c4 <__libc_init_array+0x40>)
 8001196:	4c0c      	ldr	r4, [pc, #48]	@ (80011c8 <__libc_init_array+0x44>)
 8001198:	f000 fcf8 	bl	8001b8c <_init>
 800119c:	1b64      	subs	r4, r4, r5
 800119e:	10a4      	asrs	r4, r4, #2
 80011a0:	2600      	movs	r6, #0
 80011a2:	42a6      	cmp	r6, r4
 80011a4:	d105      	bne.n	80011b2 <__libc_init_array+0x2e>
 80011a6:	bd70      	pop	{r4, r5, r6, pc}
 80011a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80011ac:	4798      	blx	r3
 80011ae:	3601      	adds	r6, #1
 80011b0:	e7ee      	b.n	8001190 <__libc_init_array+0xc>
 80011b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80011b6:	4798      	blx	r3
 80011b8:	3601      	adds	r6, #1
 80011ba:	e7f2      	b.n	80011a2 <__libc_init_array+0x1e>
 80011bc:	08001bf0 	.word	0x08001bf0
 80011c0:	08001bf0 	.word	0x08001bf0
 80011c4:	08001bf0 	.word	0x08001bf0
 80011c8:	08001bf4 	.word	0x08001bf4

080011cc <__retarget_lock_init_recursive>:
 80011cc:	4770      	bx	lr

080011ce <__retarget_lock_acquire_recursive>:
 80011ce:	4770      	bx	lr

080011d0 <__retarget_lock_release_recursive>:
 80011d0:	4770      	bx	lr
	...

080011d4 <_free_r>:
 80011d4:	b538      	push	{r3, r4, r5, lr}
 80011d6:	4605      	mov	r5, r0
 80011d8:	2900      	cmp	r1, #0
 80011da:	d041      	beq.n	8001260 <_free_r+0x8c>
 80011dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011e0:	1f0c      	subs	r4, r1, #4
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	bfb8      	it	lt
 80011e6:	18e4      	addlt	r4, r4, r3
 80011e8:	f7ff fe44 	bl	8000e74 <__malloc_lock>
 80011ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001264 <_free_r+0x90>)
 80011ee:	6813      	ldr	r3, [r2, #0]
 80011f0:	b933      	cbnz	r3, 8001200 <_free_r+0x2c>
 80011f2:	6063      	str	r3, [r4, #4]
 80011f4:	6014      	str	r4, [r2, #0]
 80011f6:	4628      	mov	r0, r5
 80011f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011fc:	f7ff be40 	b.w	8000e80 <__malloc_unlock>
 8001200:	42a3      	cmp	r3, r4
 8001202:	d908      	bls.n	8001216 <_free_r+0x42>
 8001204:	6820      	ldr	r0, [r4, #0]
 8001206:	1821      	adds	r1, r4, r0
 8001208:	428b      	cmp	r3, r1
 800120a:	bf01      	itttt	eq
 800120c:	6819      	ldreq	r1, [r3, #0]
 800120e:	685b      	ldreq	r3, [r3, #4]
 8001210:	1809      	addeq	r1, r1, r0
 8001212:	6021      	streq	r1, [r4, #0]
 8001214:	e7ed      	b.n	80011f2 <_free_r+0x1e>
 8001216:	461a      	mov	r2, r3
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	b10b      	cbz	r3, 8001220 <_free_r+0x4c>
 800121c:	42a3      	cmp	r3, r4
 800121e:	d9fa      	bls.n	8001216 <_free_r+0x42>
 8001220:	6811      	ldr	r1, [r2, #0]
 8001222:	1850      	adds	r0, r2, r1
 8001224:	42a0      	cmp	r0, r4
 8001226:	d10b      	bne.n	8001240 <_free_r+0x6c>
 8001228:	6820      	ldr	r0, [r4, #0]
 800122a:	4401      	add	r1, r0
 800122c:	1850      	adds	r0, r2, r1
 800122e:	4283      	cmp	r3, r0
 8001230:	6011      	str	r1, [r2, #0]
 8001232:	d1e0      	bne.n	80011f6 <_free_r+0x22>
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	6053      	str	r3, [r2, #4]
 800123a:	4408      	add	r0, r1
 800123c:	6010      	str	r0, [r2, #0]
 800123e:	e7da      	b.n	80011f6 <_free_r+0x22>
 8001240:	d902      	bls.n	8001248 <_free_r+0x74>
 8001242:	230c      	movs	r3, #12
 8001244:	602b      	str	r3, [r5, #0]
 8001246:	e7d6      	b.n	80011f6 <_free_r+0x22>
 8001248:	6820      	ldr	r0, [r4, #0]
 800124a:	1821      	adds	r1, r4, r0
 800124c:	428b      	cmp	r3, r1
 800124e:	bf04      	itt	eq
 8001250:	6819      	ldreq	r1, [r3, #0]
 8001252:	685b      	ldreq	r3, [r3, #4]
 8001254:	6063      	str	r3, [r4, #4]
 8001256:	bf04      	itt	eq
 8001258:	1809      	addeq	r1, r1, r0
 800125a:	6021      	streq	r1, [r4, #0]
 800125c:	6054      	str	r4, [r2, #4]
 800125e:	e7ca      	b.n	80011f6 <_free_r+0x22>
 8001260:	bd38      	pop	{r3, r4, r5, pc}
 8001262:	bf00      	nop
 8001264:	200000a4 	.word	0x200000a4

08001268 <__sfputc_r>:
 8001268:	6893      	ldr	r3, [r2, #8]
 800126a:	3b01      	subs	r3, #1
 800126c:	2b00      	cmp	r3, #0
 800126e:	b410      	push	{r4}
 8001270:	6093      	str	r3, [r2, #8]
 8001272:	da08      	bge.n	8001286 <__sfputc_r+0x1e>
 8001274:	6994      	ldr	r4, [r2, #24]
 8001276:	42a3      	cmp	r3, r4
 8001278:	db01      	blt.n	800127e <__sfputc_r+0x16>
 800127a:	290a      	cmp	r1, #10
 800127c:	d103      	bne.n	8001286 <__sfputc_r+0x1e>
 800127e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001282:	f000 bb6b 	b.w	800195c <__swbuf_r>
 8001286:	6813      	ldr	r3, [r2, #0]
 8001288:	1c58      	adds	r0, r3, #1
 800128a:	6010      	str	r0, [r2, #0]
 800128c:	7019      	strb	r1, [r3, #0]
 800128e:	4608      	mov	r0, r1
 8001290:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001294:	4770      	bx	lr

08001296 <__sfputs_r>:
 8001296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001298:	4606      	mov	r6, r0
 800129a:	460f      	mov	r7, r1
 800129c:	4614      	mov	r4, r2
 800129e:	18d5      	adds	r5, r2, r3
 80012a0:	42ac      	cmp	r4, r5
 80012a2:	d101      	bne.n	80012a8 <__sfputs_r+0x12>
 80012a4:	2000      	movs	r0, #0
 80012a6:	e007      	b.n	80012b8 <__sfputs_r+0x22>
 80012a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012ac:	463a      	mov	r2, r7
 80012ae:	4630      	mov	r0, r6
 80012b0:	f7ff ffda 	bl	8001268 <__sfputc_r>
 80012b4:	1c43      	adds	r3, r0, #1
 80012b6:	d1f3      	bne.n	80012a0 <__sfputs_r+0xa>
 80012b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080012bc <_vfiprintf_r>:
 80012bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012c0:	460d      	mov	r5, r1
 80012c2:	b09d      	sub	sp, #116	@ 0x74
 80012c4:	4614      	mov	r4, r2
 80012c6:	4698      	mov	r8, r3
 80012c8:	4606      	mov	r6, r0
 80012ca:	b118      	cbz	r0, 80012d4 <_vfiprintf_r+0x18>
 80012cc:	6a03      	ldr	r3, [r0, #32]
 80012ce:	b90b      	cbnz	r3, 80012d4 <_vfiprintf_r+0x18>
 80012d0:	f7ff fe68 	bl	8000fa4 <__sinit>
 80012d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80012d6:	07d9      	lsls	r1, r3, #31
 80012d8:	d405      	bmi.n	80012e6 <_vfiprintf_r+0x2a>
 80012da:	89ab      	ldrh	r3, [r5, #12]
 80012dc:	059a      	lsls	r2, r3, #22
 80012de:	d402      	bmi.n	80012e6 <_vfiprintf_r+0x2a>
 80012e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80012e2:	f7ff ff74 	bl	80011ce <__retarget_lock_acquire_recursive>
 80012e6:	89ab      	ldrh	r3, [r5, #12]
 80012e8:	071b      	lsls	r3, r3, #28
 80012ea:	d501      	bpl.n	80012f0 <_vfiprintf_r+0x34>
 80012ec:	692b      	ldr	r3, [r5, #16]
 80012ee:	b99b      	cbnz	r3, 8001318 <_vfiprintf_r+0x5c>
 80012f0:	4629      	mov	r1, r5
 80012f2:	4630      	mov	r0, r6
 80012f4:	f000 fb70 	bl	80019d8 <__swsetup_r>
 80012f8:	b170      	cbz	r0, 8001318 <_vfiprintf_r+0x5c>
 80012fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80012fc:	07dc      	lsls	r4, r3, #31
 80012fe:	d504      	bpl.n	800130a <_vfiprintf_r+0x4e>
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	b01d      	add	sp, #116	@ 0x74
 8001306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800130a:	89ab      	ldrh	r3, [r5, #12]
 800130c:	0598      	lsls	r0, r3, #22
 800130e:	d4f7      	bmi.n	8001300 <_vfiprintf_r+0x44>
 8001310:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001312:	f7ff ff5d 	bl	80011d0 <__retarget_lock_release_recursive>
 8001316:	e7f3      	b.n	8001300 <_vfiprintf_r+0x44>
 8001318:	2300      	movs	r3, #0
 800131a:	9309      	str	r3, [sp, #36]	@ 0x24
 800131c:	2320      	movs	r3, #32
 800131e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001322:	f8cd 800c 	str.w	r8, [sp, #12]
 8001326:	2330      	movs	r3, #48	@ 0x30
 8001328:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80014d8 <_vfiprintf_r+0x21c>
 800132c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001330:	f04f 0901 	mov.w	r9, #1
 8001334:	4623      	mov	r3, r4
 8001336:	469a      	mov	sl, r3
 8001338:	f813 2b01 	ldrb.w	r2, [r3], #1
 800133c:	b10a      	cbz	r2, 8001342 <_vfiprintf_r+0x86>
 800133e:	2a25      	cmp	r2, #37	@ 0x25
 8001340:	d1f9      	bne.n	8001336 <_vfiprintf_r+0x7a>
 8001342:	ebba 0b04 	subs.w	fp, sl, r4
 8001346:	d00b      	beq.n	8001360 <_vfiprintf_r+0xa4>
 8001348:	465b      	mov	r3, fp
 800134a:	4622      	mov	r2, r4
 800134c:	4629      	mov	r1, r5
 800134e:	4630      	mov	r0, r6
 8001350:	f7ff ffa1 	bl	8001296 <__sfputs_r>
 8001354:	3001      	adds	r0, #1
 8001356:	f000 80a7 	beq.w	80014a8 <_vfiprintf_r+0x1ec>
 800135a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800135c:	445a      	add	r2, fp
 800135e:	9209      	str	r2, [sp, #36]	@ 0x24
 8001360:	f89a 3000 	ldrb.w	r3, [sl]
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 809f 	beq.w	80014a8 <_vfiprintf_r+0x1ec>
 800136a:	2300      	movs	r3, #0
 800136c:	f04f 32ff 	mov.w	r2, #4294967295
 8001370:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001374:	f10a 0a01 	add.w	sl, sl, #1
 8001378:	9304      	str	r3, [sp, #16]
 800137a:	9307      	str	r3, [sp, #28]
 800137c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001380:	931a      	str	r3, [sp, #104]	@ 0x68
 8001382:	4654      	mov	r4, sl
 8001384:	2205      	movs	r2, #5
 8001386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800138a:	4853      	ldr	r0, [pc, #332]	@ (80014d8 <_vfiprintf_r+0x21c>)
 800138c:	f7fe ff20 	bl	80001d0 <memchr>
 8001390:	9a04      	ldr	r2, [sp, #16]
 8001392:	b9d8      	cbnz	r0, 80013cc <_vfiprintf_r+0x110>
 8001394:	06d1      	lsls	r1, r2, #27
 8001396:	bf44      	itt	mi
 8001398:	2320      	movmi	r3, #32
 800139a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800139e:	0713      	lsls	r3, r2, #28
 80013a0:	bf44      	itt	mi
 80013a2:	232b      	movmi	r3, #43	@ 0x2b
 80013a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80013a8:	f89a 3000 	ldrb.w	r3, [sl]
 80013ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80013ae:	d015      	beq.n	80013dc <_vfiprintf_r+0x120>
 80013b0:	9a07      	ldr	r2, [sp, #28]
 80013b2:	4654      	mov	r4, sl
 80013b4:	2000      	movs	r0, #0
 80013b6:	f04f 0c0a 	mov.w	ip, #10
 80013ba:	4621      	mov	r1, r4
 80013bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80013c0:	3b30      	subs	r3, #48	@ 0x30
 80013c2:	2b09      	cmp	r3, #9
 80013c4:	d94b      	bls.n	800145e <_vfiprintf_r+0x1a2>
 80013c6:	b1b0      	cbz	r0, 80013f6 <_vfiprintf_r+0x13a>
 80013c8:	9207      	str	r2, [sp, #28]
 80013ca:	e014      	b.n	80013f6 <_vfiprintf_r+0x13a>
 80013cc:	eba0 0308 	sub.w	r3, r0, r8
 80013d0:	fa09 f303 	lsl.w	r3, r9, r3
 80013d4:	4313      	orrs	r3, r2
 80013d6:	9304      	str	r3, [sp, #16]
 80013d8:	46a2      	mov	sl, r4
 80013da:	e7d2      	b.n	8001382 <_vfiprintf_r+0xc6>
 80013dc:	9b03      	ldr	r3, [sp, #12]
 80013de:	1d19      	adds	r1, r3, #4
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	9103      	str	r1, [sp, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	bfbb      	ittet	lt
 80013e8:	425b      	neglt	r3, r3
 80013ea:	f042 0202 	orrlt.w	r2, r2, #2
 80013ee:	9307      	strge	r3, [sp, #28]
 80013f0:	9307      	strlt	r3, [sp, #28]
 80013f2:	bfb8      	it	lt
 80013f4:	9204      	strlt	r2, [sp, #16]
 80013f6:	7823      	ldrb	r3, [r4, #0]
 80013f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80013fa:	d10a      	bne.n	8001412 <_vfiprintf_r+0x156>
 80013fc:	7863      	ldrb	r3, [r4, #1]
 80013fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8001400:	d132      	bne.n	8001468 <_vfiprintf_r+0x1ac>
 8001402:	9b03      	ldr	r3, [sp, #12]
 8001404:	1d1a      	adds	r2, r3, #4
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	9203      	str	r2, [sp, #12]
 800140a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800140e:	3402      	adds	r4, #2
 8001410:	9305      	str	r3, [sp, #20]
 8001412:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80014e8 <_vfiprintf_r+0x22c>
 8001416:	7821      	ldrb	r1, [r4, #0]
 8001418:	2203      	movs	r2, #3
 800141a:	4650      	mov	r0, sl
 800141c:	f7fe fed8 	bl	80001d0 <memchr>
 8001420:	b138      	cbz	r0, 8001432 <_vfiprintf_r+0x176>
 8001422:	9b04      	ldr	r3, [sp, #16]
 8001424:	eba0 000a 	sub.w	r0, r0, sl
 8001428:	2240      	movs	r2, #64	@ 0x40
 800142a:	4082      	lsls	r2, r0
 800142c:	4313      	orrs	r3, r2
 800142e:	3401      	adds	r4, #1
 8001430:	9304      	str	r3, [sp, #16]
 8001432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001436:	4829      	ldr	r0, [pc, #164]	@ (80014dc <_vfiprintf_r+0x220>)
 8001438:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800143c:	2206      	movs	r2, #6
 800143e:	f7fe fec7 	bl	80001d0 <memchr>
 8001442:	2800      	cmp	r0, #0
 8001444:	d03f      	beq.n	80014c6 <_vfiprintf_r+0x20a>
 8001446:	4b26      	ldr	r3, [pc, #152]	@ (80014e0 <_vfiprintf_r+0x224>)
 8001448:	bb1b      	cbnz	r3, 8001492 <_vfiprintf_r+0x1d6>
 800144a:	9b03      	ldr	r3, [sp, #12]
 800144c:	3307      	adds	r3, #7
 800144e:	f023 0307 	bic.w	r3, r3, #7
 8001452:	3308      	adds	r3, #8
 8001454:	9303      	str	r3, [sp, #12]
 8001456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001458:	443b      	add	r3, r7
 800145a:	9309      	str	r3, [sp, #36]	@ 0x24
 800145c:	e76a      	b.n	8001334 <_vfiprintf_r+0x78>
 800145e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001462:	460c      	mov	r4, r1
 8001464:	2001      	movs	r0, #1
 8001466:	e7a8      	b.n	80013ba <_vfiprintf_r+0xfe>
 8001468:	2300      	movs	r3, #0
 800146a:	3401      	adds	r4, #1
 800146c:	9305      	str	r3, [sp, #20]
 800146e:	4619      	mov	r1, r3
 8001470:	f04f 0c0a 	mov.w	ip, #10
 8001474:	4620      	mov	r0, r4
 8001476:	f810 2b01 	ldrb.w	r2, [r0], #1
 800147a:	3a30      	subs	r2, #48	@ 0x30
 800147c:	2a09      	cmp	r2, #9
 800147e:	d903      	bls.n	8001488 <_vfiprintf_r+0x1cc>
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0c6      	beq.n	8001412 <_vfiprintf_r+0x156>
 8001484:	9105      	str	r1, [sp, #20]
 8001486:	e7c4      	b.n	8001412 <_vfiprintf_r+0x156>
 8001488:	fb0c 2101 	mla	r1, ip, r1, r2
 800148c:	4604      	mov	r4, r0
 800148e:	2301      	movs	r3, #1
 8001490:	e7f0      	b.n	8001474 <_vfiprintf_r+0x1b8>
 8001492:	ab03      	add	r3, sp, #12
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	462a      	mov	r2, r5
 8001498:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <_vfiprintf_r+0x228>)
 800149a:	a904      	add	r1, sp, #16
 800149c:	4630      	mov	r0, r6
 800149e:	f3af 8000 	nop.w
 80014a2:	4607      	mov	r7, r0
 80014a4:	1c78      	adds	r0, r7, #1
 80014a6:	d1d6      	bne.n	8001456 <_vfiprintf_r+0x19a>
 80014a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80014aa:	07d9      	lsls	r1, r3, #31
 80014ac:	d405      	bmi.n	80014ba <_vfiprintf_r+0x1fe>
 80014ae:	89ab      	ldrh	r3, [r5, #12]
 80014b0:	059a      	lsls	r2, r3, #22
 80014b2:	d402      	bmi.n	80014ba <_vfiprintf_r+0x1fe>
 80014b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80014b6:	f7ff fe8b 	bl	80011d0 <__retarget_lock_release_recursive>
 80014ba:	89ab      	ldrh	r3, [r5, #12]
 80014bc:	065b      	lsls	r3, r3, #25
 80014be:	f53f af1f 	bmi.w	8001300 <_vfiprintf_r+0x44>
 80014c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80014c4:	e71e      	b.n	8001304 <_vfiprintf_r+0x48>
 80014c6:	ab03      	add	r3, sp, #12
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	462a      	mov	r2, r5
 80014cc:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <_vfiprintf_r+0x228>)
 80014ce:	a904      	add	r1, sp, #16
 80014d0:	4630      	mov	r0, r6
 80014d2:	f000 f879 	bl	80015c8 <_printf_i>
 80014d6:	e7e4      	b.n	80014a2 <_vfiprintf_r+0x1e6>
 80014d8:	08001bb4 	.word	0x08001bb4
 80014dc:	08001bbe 	.word	0x08001bbe
 80014e0:	00000000 	.word	0x00000000
 80014e4:	08001297 	.word	0x08001297
 80014e8:	08001bba 	.word	0x08001bba

080014ec <_printf_common>:
 80014ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014f0:	4616      	mov	r6, r2
 80014f2:	4698      	mov	r8, r3
 80014f4:	688a      	ldr	r2, [r1, #8]
 80014f6:	690b      	ldr	r3, [r1, #16]
 80014f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80014fc:	4293      	cmp	r3, r2
 80014fe:	bfb8      	it	lt
 8001500:	4613      	movlt	r3, r2
 8001502:	6033      	str	r3, [r6, #0]
 8001504:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001508:	4607      	mov	r7, r0
 800150a:	460c      	mov	r4, r1
 800150c:	b10a      	cbz	r2, 8001512 <_printf_common+0x26>
 800150e:	3301      	adds	r3, #1
 8001510:	6033      	str	r3, [r6, #0]
 8001512:	6823      	ldr	r3, [r4, #0]
 8001514:	0699      	lsls	r1, r3, #26
 8001516:	bf42      	ittt	mi
 8001518:	6833      	ldrmi	r3, [r6, #0]
 800151a:	3302      	addmi	r3, #2
 800151c:	6033      	strmi	r3, [r6, #0]
 800151e:	6825      	ldr	r5, [r4, #0]
 8001520:	f015 0506 	ands.w	r5, r5, #6
 8001524:	d106      	bne.n	8001534 <_printf_common+0x48>
 8001526:	f104 0a19 	add.w	sl, r4, #25
 800152a:	68e3      	ldr	r3, [r4, #12]
 800152c:	6832      	ldr	r2, [r6, #0]
 800152e:	1a9b      	subs	r3, r3, r2
 8001530:	42ab      	cmp	r3, r5
 8001532:	dc26      	bgt.n	8001582 <_printf_common+0x96>
 8001534:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001538:	6822      	ldr	r2, [r4, #0]
 800153a:	3b00      	subs	r3, #0
 800153c:	bf18      	it	ne
 800153e:	2301      	movne	r3, #1
 8001540:	0692      	lsls	r2, r2, #26
 8001542:	d42b      	bmi.n	800159c <_printf_common+0xb0>
 8001544:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001548:	4641      	mov	r1, r8
 800154a:	4638      	mov	r0, r7
 800154c:	47c8      	blx	r9
 800154e:	3001      	adds	r0, #1
 8001550:	d01e      	beq.n	8001590 <_printf_common+0xa4>
 8001552:	6823      	ldr	r3, [r4, #0]
 8001554:	6922      	ldr	r2, [r4, #16]
 8001556:	f003 0306 	and.w	r3, r3, #6
 800155a:	2b04      	cmp	r3, #4
 800155c:	bf02      	ittt	eq
 800155e:	68e5      	ldreq	r5, [r4, #12]
 8001560:	6833      	ldreq	r3, [r6, #0]
 8001562:	1aed      	subeq	r5, r5, r3
 8001564:	68a3      	ldr	r3, [r4, #8]
 8001566:	bf0c      	ite	eq
 8001568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800156c:	2500      	movne	r5, #0
 800156e:	4293      	cmp	r3, r2
 8001570:	bfc4      	itt	gt
 8001572:	1a9b      	subgt	r3, r3, r2
 8001574:	18ed      	addgt	r5, r5, r3
 8001576:	2600      	movs	r6, #0
 8001578:	341a      	adds	r4, #26
 800157a:	42b5      	cmp	r5, r6
 800157c:	d11a      	bne.n	80015b4 <_printf_common+0xc8>
 800157e:	2000      	movs	r0, #0
 8001580:	e008      	b.n	8001594 <_printf_common+0xa8>
 8001582:	2301      	movs	r3, #1
 8001584:	4652      	mov	r2, sl
 8001586:	4641      	mov	r1, r8
 8001588:	4638      	mov	r0, r7
 800158a:	47c8      	blx	r9
 800158c:	3001      	adds	r0, #1
 800158e:	d103      	bne.n	8001598 <_printf_common+0xac>
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001598:	3501      	adds	r5, #1
 800159a:	e7c6      	b.n	800152a <_printf_common+0x3e>
 800159c:	18e1      	adds	r1, r4, r3
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	2030      	movs	r0, #48	@ 0x30
 80015a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80015a6:	4422      	add	r2, r4
 80015a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80015ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80015b0:	3302      	adds	r3, #2
 80015b2:	e7c7      	b.n	8001544 <_printf_common+0x58>
 80015b4:	2301      	movs	r3, #1
 80015b6:	4622      	mov	r2, r4
 80015b8:	4641      	mov	r1, r8
 80015ba:	4638      	mov	r0, r7
 80015bc:	47c8      	blx	r9
 80015be:	3001      	adds	r0, #1
 80015c0:	d0e6      	beq.n	8001590 <_printf_common+0xa4>
 80015c2:	3601      	adds	r6, #1
 80015c4:	e7d9      	b.n	800157a <_printf_common+0x8e>
	...

080015c8 <_printf_i>:
 80015c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80015cc:	7e0f      	ldrb	r7, [r1, #24]
 80015ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80015d0:	2f78      	cmp	r7, #120	@ 0x78
 80015d2:	4691      	mov	r9, r2
 80015d4:	4680      	mov	r8, r0
 80015d6:	460c      	mov	r4, r1
 80015d8:	469a      	mov	sl, r3
 80015da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80015de:	d807      	bhi.n	80015f0 <_printf_i+0x28>
 80015e0:	2f62      	cmp	r7, #98	@ 0x62
 80015e2:	d80a      	bhi.n	80015fa <_printf_i+0x32>
 80015e4:	2f00      	cmp	r7, #0
 80015e6:	f000 80d1 	beq.w	800178c <_printf_i+0x1c4>
 80015ea:	2f58      	cmp	r7, #88	@ 0x58
 80015ec:	f000 80b8 	beq.w	8001760 <_printf_i+0x198>
 80015f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80015f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80015f8:	e03a      	b.n	8001670 <_printf_i+0xa8>
 80015fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80015fe:	2b15      	cmp	r3, #21
 8001600:	d8f6      	bhi.n	80015f0 <_printf_i+0x28>
 8001602:	a101      	add	r1, pc, #4	@ (adr r1, 8001608 <_printf_i+0x40>)
 8001604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001608:	08001661 	.word	0x08001661
 800160c:	08001675 	.word	0x08001675
 8001610:	080015f1 	.word	0x080015f1
 8001614:	080015f1 	.word	0x080015f1
 8001618:	080015f1 	.word	0x080015f1
 800161c:	080015f1 	.word	0x080015f1
 8001620:	08001675 	.word	0x08001675
 8001624:	080015f1 	.word	0x080015f1
 8001628:	080015f1 	.word	0x080015f1
 800162c:	080015f1 	.word	0x080015f1
 8001630:	080015f1 	.word	0x080015f1
 8001634:	08001773 	.word	0x08001773
 8001638:	0800169f 	.word	0x0800169f
 800163c:	0800172d 	.word	0x0800172d
 8001640:	080015f1 	.word	0x080015f1
 8001644:	080015f1 	.word	0x080015f1
 8001648:	08001795 	.word	0x08001795
 800164c:	080015f1 	.word	0x080015f1
 8001650:	0800169f 	.word	0x0800169f
 8001654:	080015f1 	.word	0x080015f1
 8001658:	080015f1 	.word	0x080015f1
 800165c:	08001735 	.word	0x08001735
 8001660:	6833      	ldr	r3, [r6, #0]
 8001662:	1d1a      	adds	r2, r3, #4
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6032      	str	r2, [r6, #0]
 8001668:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800166c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001670:	2301      	movs	r3, #1
 8001672:	e09c      	b.n	80017ae <_printf_i+0x1e6>
 8001674:	6833      	ldr	r3, [r6, #0]
 8001676:	6820      	ldr	r0, [r4, #0]
 8001678:	1d19      	adds	r1, r3, #4
 800167a:	6031      	str	r1, [r6, #0]
 800167c:	0606      	lsls	r6, r0, #24
 800167e:	d501      	bpl.n	8001684 <_printf_i+0xbc>
 8001680:	681d      	ldr	r5, [r3, #0]
 8001682:	e003      	b.n	800168c <_printf_i+0xc4>
 8001684:	0645      	lsls	r5, r0, #25
 8001686:	d5fb      	bpl.n	8001680 <_printf_i+0xb8>
 8001688:	f9b3 5000 	ldrsh.w	r5, [r3]
 800168c:	2d00      	cmp	r5, #0
 800168e:	da03      	bge.n	8001698 <_printf_i+0xd0>
 8001690:	232d      	movs	r3, #45	@ 0x2d
 8001692:	426d      	negs	r5, r5
 8001694:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001698:	4858      	ldr	r0, [pc, #352]	@ (80017fc <_printf_i+0x234>)
 800169a:	230a      	movs	r3, #10
 800169c:	e011      	b.n	80016c2 <_printf_i+0xfa>
 800169e:	6821      	ldr	r1, [r4, #0]
 80016a0:	6833      	ldr	r3, [r6, #0]
 80016a2:	0608      	lsls	r0, r1, #24
 80016a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80016a8:	d402      	bmi.n	80016b0 <_printf_i+0xe8>
 80016aa:	0649      	lsls	r1, r1, #25
 80016ac:	bf48      	it	mi
 80016ae:	b2ad      	uxthmi	r5, r5
 80016b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80016b2:	4852      	ldr	r0, [pc, #328]	@ (80017fc <_printf_i+0x234>)
 80016b4:	6033      	str	r3, [r6, #0]
 80016b6:	bf14      	ite	ne
 80016b8:	230a      	movne	r3, #10
 80016ba:	2308      	moveq	r3, #8
 80016bc:	2100      	movs	r1, #0
 80016be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80016c2:	6866      	ldr	r6, [r4, #4]
 80016c4:	60a6      	str	r6, [r4, #8]
 80016c6:	2e00      	cmp	r6, #0
 80016c8:	db05      	blt.n	80016d6 <_printf_i+0x10e>
 80016ca:	6821      	ldr	r1, [r4, #0]
 80016cc:	432e      	orrs	r6, r5
 80016ce:	f021 0104 	bic.w	r1, r1, #4
 80016d2:	6021      	str	r1, [r4, #0]
 80016d4:	d04b      	beq.n	800176e <_printf_i+0x1a6>
 80016d6:	4616      	mov	r6, r2
 80016d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80016dc:	fb03 5711 	mls	r7, r3, r1, r5
 80016e0:	5dc7      	ldrb	r7, [r0, r7]
 80016e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80016e6:	462f      	mov	r7, r5
 80016e8:	42bb      	cmp	r3, r7
 80016ea:	460d      	mov	r5, r1
 80016ec:	d9f4      	bls.n	80016d8 <_printf_i+0x110>
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d10b      	bne.n	800170a <_printf_i+0x142>
 80016f2:	6823      	ldr	r3, [r4, #0]
 80016f4:	07df      	lsls	r7, r3, #31
 80016f6:	d508      	bpl.n	800170a <_printf_i+0x142>
 80016f8:	6923      	ldr	r3, [r4, #16]
 80016fa:	6861      	ldr	r1, [r4, #4]
 80016fc:	4299      	cmp	r1, r3
 80016fe:	bfde      	ittt	le
 8001700:	2330      	movle	r3, #48	@ 0x30
 8001702:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001706:	f106 36ff 	addle.w	r6, r6, #4294967295
 800170a:	1b92      	subs	r2, r2, r6
 800170c:	6122      	str	r2, [r4, #16]
 800170e:	f8cd a000 	str.w	sl, [sp]
 8001712:	464b      	mov	r3, r9
 8001714:	aa03      	add	r2, sp, #12
 8001716:	4621      	mov	r1, r4
 8001718:	4640      	mov	r0, r8
 800171a:	f7ff fee7 	bl	80014ec <_printf_common>
 800171e:	3001      	adds	r0, #1
 8001720:	d14a      	bne.n	80017b8 <_printf_i+0x1f0>
 8001722:	f04f 30ff 	mov.w	r0, #4294967295
 8001726:	b004      	add	sp, #16
 8001728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	f043 0320 	orr.w	r3, r3, #32
 8001732:	6023      	str	r3, [r4, #0]
 8001734:	4832      	ldr	r0, [pc, #200]	@ (8001800 <_printf_i+0x238>)
 8001736:	2778      	movs	r7, #120	@ 0x78
 8001738:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800173c:	6823      	ldr	r3, [r4, #0]
 800173e:	6831      	ldr	r1, [r6, #0]
 8001740:	061f      	lsls	r7, r3, #24
 8001742:	f851 5b04 	ldr.w	r5, [r1], #4
 8001746:	d402      	bmi.n	800174e <_printf_i+0x186>
 8001748:	065f      	lsls	r7, r3, #25
 800174a:	bf48      	it	mi
 800174c:	b2ad      	uxthmi	r5, r5
 800174e:	6031      	str	r1, [r6, #0]
 8001750:	07d9      	lsls	r1, r3, #31
 8001752:	bf44      	itt	mi
 8001754:	f043 0320 	orrmi.w	r3, r3, #32
 8001758:	6023      	strmi	r3, [r4, #0]
 800175a:	b11d      	cbz	r5, 8001764 <_printf_i+0x19c>
 800175c:	2310      	movs	r3, #16
 800175e:	e7ad      	b.n	80016bc <_printf_i+0xf4>
 8001760:	4826      	ldr	r0, [pc, #152]	@ (80017fc <_printf_i+0x234>)
 8001762:	e7e9      	b.n	8001738 <_printf_i+0x170>
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	f023 0320 	bic.w	r3, r3, #32
 800176a:	6023      	str	r3, [r4, #0]
 800176c:	e7f6      	b.n	800175c <_printf_i+0x194>
 800176e:	4616      	mov	r6, r2
 8001770:	e7bd      	b.n	80016ee <_printf_i+0x126>
 8001772:	6833      	ldr	r3, [r6, #0]
 8001774:	6825      	ldr	r5, [r4, #0]
 8001776:	6961      	ldr	r1, [r4, #20]
 8001778:	1d18      	adds	r0, r3, #4
 800177a:	6030      	str	r0, [r6, #0]
 800177c:	062e      	lsls	r6, r5, #24
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	d501      	bpl.n	8001786 <_printf_i+0x1be>
 8001782:	6019      	str	r1, [r3, #0]
 8001784:	e002      	b.n	800178c <_printf_i+0x1c4>
 8001786:	0668      	lsls	r0, r5, #25
 8001788:	d5fb      	bpl.n	8001782 <_printf_i+0x1ba>
 800178a:	8019      	strh	r1, [r3, #0]
 800178c:	2300      	movs	r3, #0
 800178e:	6123      	str	r3, [r4, #16]
 8001790:	4616      	mov	r6, r2
 8001792:	e7bc      	b.n	800170e <_printf_i+0x146>
 8001794:	6833      	ldr	r3, [r6, #0]
 8001796:	1d1a      	adds	r2, r3, #4
 8001798:	6032      	str	r2, [r6, #0]
 800179a:	681e      	ldr	r6, [r3, #0]
 800179c:	6862      	ldr	r2, [r4, #4]
 800179e:	2100      	movs	r1, #0
 80017a0:	4630      	mov	r0, r6
 80017a2:	f7fe fd15 	bl	80001d0 <memchr>
 80017a6:	b108      	cbz	r0, 80017ac <_printf_i+0x1e4>
 80017a8:	1b80      	subs	r0, r0, r6
 80017aa:	6060      	str	r0, [r4, #4]
 80017ac:	6863      	ldr	r3, [r4, #4]
 80017ae:	6123      	str	r3, [r4, #16]
 80017b0:	2300      	movs	r3, #0
 80017b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80017b6:	e7aa      	b.n	800170e <_printf_i+0x146>
 80017b8:	6923      	ldr	r3, [r4, #16]
 80017ba:	4632      	mov	r2, r6
 80017bc:	4649      	mov	r1, r9
 80017be:	4640      	mov	r0, r8
 80017c0:	47d0      	blx	sl
 80017c2:	3001      	adds	r0, #1
 80017c4:	d0ad      	beq.n	8001722 <_printf_i+0x15a>
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	079b      	lsls	r3, r3, #30
 80017ca:	d413      	bmi.n	80017f4 <_printf_i+0x22c>
 80017cc:	68e0      	ldr	r0, [r4, #12]
 80017ce:	9b03      	ldr	r3, [sp, #12]
 80017d0:	4298      	cmp	r0, r3
 80017d2:	bfb8      	it	lt
 80017d4:	4618      	movlt	r0, r3
 80017d6:	e7a6      	b.n	8001726 <_printf_i+0x15e>
 80017d8:	2301      	movs	r3, #1
 80017da:	4632      	mov	r2, r6
 80017dc:	4649      	mov	r1, r9
 80017de:	4640      	mov	r0, r8
 80017e0:	47d0      	blx	sl
 80017e2:	3001      	adds	r0, #1
 80017e4:	d09d      	beq.n	8001722 <_printf_i+0x15a>
 80017e6:	3501      	adds	r5, #1
 80017e8:	68e3      	ldr	r3, [r4, #12]
 80017ea:	9903      	ldr	r1, [sp, #12]
 80017ec:	1a5b      	subs	r3, r3, r1
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	dcf2      	bgt.n	80017d8 <_printf_i+0x210>
 80017f2:	e7eb      	b.n	80017cc <_printf_i+0x204>
 80017f4:	2500      	movs	r5, #0
 80017f6:	f104 0619 	add.w	r6, r4, #25
 80017fa:	e7f5      	b.n	80017e8 <_printf_i+0x220>
 80017fc:	08001bc5 	.word	0x08001bc5
 8001800:	08001bd6 	.word	0x08001bd6

08001804 <__sflush_r>:
 8001804:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800180c:	0716      	lsls	r6, r2, #28
 800180e:	4605      	mov	r5, r0
 8001810:	460c      	mov	r4, r1
 8001812:	d454      	bmi.n	80018be <__sflush_r+0xba>
 8001814:	684b      	ldr	r3, [r1, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	dc02      	bgt.n	8001820 <__sflush_r+0x1c>
 800181a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800181c:	2b00      	cmp	r3, #0
 800181e:	dd48      	ble.n	80018b2 <__sflush_r+0xae>
 8001820:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001822:	2e00      	cmp	r6, #0
 8001824:	d045      	beq.n	80018b2 <__sflush_r+0xae>
 8001826:	2300      	movs	r3, #0
 8001828:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800182c:	682f      	ldr	r7, [r5, #0]
 800182e:	6a21      	ldr	r1, [r4, #32]
 8001830:	602b      	str	r3, [r5, #0]
 8001832:	d030      	beq.n	8001896 <__sflush_r+0x92>
 8001834:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001836:	89a3      	ldrh	r3, [r4, #12]
 8001838:	0759      	lsls	r1, r3, #29
 800183a:	d505      	bpl.n	8001848 <__sflush_r+0x44>
 800183c:	6863      	ldr	r3, [r4, #4]
 800183e:	1ad2      	subs	r2, r2, r3
 8001840:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001842:	b10b      	cbz	r3, 8001848 <__sflush_r+0x44>
 8001844:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001846:	1ad2      	subs	r2, r2, r3
 8001848:	2300      	movs	r3, #0
 800184a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800184c:	6a21      	ldr	r1, [r4, #32]
 800184e:	4628      	mov	r0, r5
 8001850:	47b0      	blx	r6
 8001852:	1c43      	adds	r3, r0, #1
 8001854:	89a3      	ldrh	r3, [r4, #12]
 8001856:	d106      	bne.n	8001866 <__sflush_r+0x62>
 8001858:	6829      	ldr	r1, [r5, #0]
 800185a:	291d      	cmp	r1, #29
 800185c:	d82b      	bhi.n	80018b6 <__sflush_r+0xb2>
 800185e:	4a2a      	ldr	r2, [pc, #168]	@ (8001908 <__sflush_r+0x104>)
 8001860:	40ca      	lsrs	r2, r1
 8001862:	07d6      	lsls	r6, r2, #31
 8001864:	d527      	bpl.n	80018b6 <__sflush_r+0xb2>
 8001866:	2200      	movs	r2, #0
 8001868:	6062      	str	r2, [r4, #4]
 800186a:	04d9      	lsls	r1, r3, #19
 800186c:	6922      	ldr	r2, [r4, #16]
 800186e:	6022      	str	r2, [r4, #0]
 8001870:	d504      	bpl.n	800187c <__sflush_r+0x78>
 8001872:	1c42      	adds	r2, r0, #1
 8001874:	d101      	bne.n	800187a <__sflush_r+0x76>
 8001876:	682b      	ldr	r3, [r5, #0]
 8001878:	b903      	cbnz	r3, 800187c <__sflush_r+0x78>
 800187a:	6560      	str	r0, [r4, #84]	@ 0x54
 800187c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800187e:	602f      	str	r7, [r5, #0]
 8001880:	b1b9      	cbz	r1, 80018b2 <__sflush_r+0xae>
 8001882:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001886:	4299      	cmp	r1, r3
 8001888:	d002      	beq.n	8001890 <__sflush_r+0x8c>
 800188a:	4628      	mov	r0, r5
 800188c:	f7ff fca2 	bl	80011d4 <_free_r>
 8001890:	2300      	movs	r3, #0
 8001892:	6363      	str	r3, [r4, #52]	@ 0x34
 8001894:	e00d      	b.n	80018b2 <__sflush_r+0xae>
 8001896:	2301      	movs	r3, #1
 8001898:	4628      	mov	r0, r5
 800189a:	47b0      	blx	r6
 800189c:	4602      	mov	r2, r0
 800189e:	1c50      	adds	r0, r2, #1
 80018a0:	d1c9      	bne.n	8001836 <__sflush_r+0x32>
 80018a2:	682b      	ldr	r3, [r5, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0c6      	beq.n	8001836 <__sflush_r+0x32>
 80018a8:	2b1d      	cmp	r3, #29
 80018aa:	d001      	beq.n	80018b0 <__sflush_r+0xac>
 80018ac:	2b16      	cmp	r3, #22
 80018ae:	d11e      	bne.n	80018ee <__sflush_r+0xea>
 80018b0:	602f      	str	r7, [r5, #0]
 80018b2:	2000      	movs	r0, #0
 80018b4:	e022      	b.n	80018fc <__sflush_r+0xf8>
 80018b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	e01b      	b.n	80018f6 <__sflush_r+0xf2>
 80018be:	690f      	ldr	r7, [r1, #16]
 80018c0:	2f00      	cmp	r7, #0
 80018c2:	d0f6      	beq.n	80018b2 <__sflush_r+0xae>
 80018c4:	0793      	lsls	r3, r2, #30
 80018c6:	680e      	ldr	r6, [r1, #0]
 80018c8:	bf08      	it	eq
 80018ca:	694b      	ldreq	r3, [r1, #20]
 80018cc:	600f      	str	r7, [r1, #0]
 80018ce:	bf18      	it	ne
 80018d0:	2300      	movne	r3, #0
 80018d2:	eba6 0807 	sub.w	r8, r6, r7
 80018d6:	608b      	str	r3, [r1, #8]
 80018d8:	f1b8 0f00 	cmp.w	r8, #0
 80018dc:	dde9      	ble.n	80018b2 <__sflush_r+0xae>
 80018de:	6a21      	ldr	r1, [r4, #32]
 80018e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80018e2:	4643      	mov	r3, r8
 80018e4:	463a      	mov	r2, r7
 80018e6:	4628      	mov	r0, r5
 80018e8:	47b0      	blx	r6
 80018ea:	2800      	cmp	r0, #0
 80018ec:	dc08      	bgt.n	8001900 <__sflush_r+0xfc>
 80018ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018f6:	81a3      	strh	r3, [r4, #12]
 80018f8:	f04f 30ff 	mov.w	r0, #4294967295
 80018fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001900:	4407      	add	r7, r0
 8001902:	eba8 0800 	sub.w	r8, r8, r0
 8001906:	e7e7      	b.n	80018d8 <__sflush_r+0xd4>
 8001908:	20400001 	.word	0x20400001

0800190c <_fflush_r>:
 800190c:	b538      	push	{r3, r4, r5, lr}
 800190e:	690b      	ldr	r3, [r1, #16]
 8001910:	4605      	mov	r5, r0
 8001912:	460c      	mov	r4, r1
 8001914:	b913      	cbnz	r3, 800191c <_fflush_r+0x10>
 8001916:	2500      	movs	r5, #0
 8001918:	4628      	mov	r0, r5
 800191a:	bd38      	pop	{r3, r4, r5, pc}
 800191c:	b118      	cbz	r0, 8001926 <_fflush_r+0x1a>
 800191e:	6a03      	ldr	r3, [r0, #32]
 8001920:	b90b      	cbnz	r3, 8001926 <_fflush_r+0x1a>
 8001922:	f7ff fb3f 	bl	8000fa4 <__sinit>
 8001926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f3      	beq.n	8001916 <_fflush_r+0xa>
 800192e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001930:	07d0      	lsls	r0, r2, #31
 8001932:	d404      	bmi.n	800193e <_fflush_r+0x32>
 8001934:	0599      	lsls	r1, r3, #22
 8001936:	d402      	bmi.n	800193e <_fflush_r+0x32>
 8001938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800193a:	f7ff fc48 	bl	80011ce <__retarget_lock_acquire_recursive>
 800193e:	4628      	mov	r0, r5
 8001940:	4621      	mov	r1, r4
 8001942:	f7ff ff5f 	bl	8001804 <__sflush_r>
 8001946:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001948:	07da      	lsls	r2, r3, #31
 800194a:	4605      	mov	r5, r0
 800194c:	d4e4      	bmi.n	8001918 <_fflush_r+0xc>
 800194e:	89a3      	ldrh	r3, [r4, #12]
 8001950:	059b      	lsls	r3, r3, #22
 8001952:	d4e1      	bmi.n	8001918 <_fflush_r+0xc>
 8001954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001956:	f7ff fc3b 	bl	80011d0 <__retarget_lock_release_recursive>
 800195a:	e7dd      	b.n	8001918 <_fflush_r+0xc>

0800195c <__swbuf_r>:
 800195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800195e:	460e      	mov	r6, r1
 8001960:	4614      	mov	r4, r2
 8001962:	4605      	mov	r5, r0
 8001964:	b118      	cbz	r0, 800196e <__swbuf_r+0x12>
 8001966:	6a03      	ldr	r3, [r0, #32]
 8001968:	b90b      	cbnz	r3, 800196e <__swbuf_r+0x12>
 800196a:	f7ff fb1b 	bl	8000fa4 <__sinit>
 800196e:	69a3      	ldr	r3, [r4, #24]
 8001970:	60a3      	str	r3, [r4, #8]
 8001972:	89a3      	ldrh	r3, [r4, #12]
 8001974:	071a      	lsls	r2, r3, #28
 8001976:	d501      	bpl.n	800197c <__swbuf_r+0x20>
 8001978:	6923      	ldr	r3, [r4, #16]
 800197a:	b943      	cbnz	r3, 800198e <__swbuf_r+0x32>
 800197c:	4621      	mov	r1, r4
 800197e:	4628      	mov	r0, r5
 8001980:	f000 f82a 	bl	80019d8 <__swsetup_r>
 8001984:	b118      	cbz	r0, 800198e <__swbuf_r+0x32>
 8001986:	f04f 37ff 	mov.w	r7, #4294967295
 800198a:	4638      	mov	r0, r7
 800198c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	6922      	ldr	r2, [r4, #16]
 8001992:	1a98      	subs	r0, r3, r2
 8001994:	6963      	ldr	r3, [r4, #20]
 8001996:	b2f6      	uxtb	r6, r6
 8001998:	4283      	cmp	r3, r0
 800199a:	4637      	mov	r7, r6
 800199c:	dc05      	bgt.n	80019aa <__swbuf_r+0x4e>
 800199e:	4621      	mov	r1, r4
 80019a0:	4628      	mov	r0, r5
 80019a2:	f7ff ffb3 	bl	800190c <_fflush_r>
 80019a6:	2800      	cmp	r0, #0
 80019a8:	d1ed      	bne.n	8001986 <__swbuf_r+0x2a>
 80019aa:	68a3      	ldr	r3, [r4, #8]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	60a3      	str	r3, [r4, #8]
 80019b0:	6823      	ldr	r3, [r4, #0]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	6022      	str	r2, [r4, #0]
 80019b6:	701e      	strb	r6, [r3, #0]
 80019b8:	6962      	ldr	r2, [r4, #20]
 80019ba:	1c43      	adds	r3, r0, #1
 80019bc:	429a      	cmp	r2, r3
 80019be:	d004      	beq.n	80019ca <__swbuf_r+0x6e>
 80019c0:	89a3      	ldrh	r3, [r4, #12]
 80019c2:	07db      	lsls	r3, r3, #31
 80019c4:	d5e1      	bpl.n	800198a <__swbuf_r+0x2e>
 80019c6:	2e0a      	cmp	r6, #10
 80019c8:	d1df      	bne.n	800198a <__swbuf_r+0x2e>
 80019ca:	4621      	mov	r1, r4
 80019cc:	4628      	mov	r0, r5
 80019ce:	f7ff ff9d 	bl	800190c <_fflush_r>
 80019d2:	2800      	cmp	r0, #0
 80019d4:	d0d9      	beq.n	800198a <__swbuf_r+0x2e>
 80019d6:	e7d6      	b.n	8001986 <__swbuf_r+0x2a>

080019d8 <__swsetup_r>:
 80019d8:	b538      	push	{r3, r4, r5, lr}
 80019da:	4b29      	ldr	r3, [pc, #164]	@ (8001a80 <__swsetup_r+0xa8>)
 80019dc:	4605      	mov	r5, r0
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	460c      	mov	r4, r1
 80019e2:	b118      	cbz	r0, 80019ec <__swsetup_r+0x14>
 80019e4:	6a03      	ldr	r3, [r0, #32]
 80019e6:	b90b      	cbnz	r3, 80019ec <__swsetup_r+0x14>
 80019e8:	f7ff fadc 	bl	8000fa4 <__sinit>
 80019ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019f0:	0719      	lsls	r1, r3, #28
 80019f2:	d422      	bmi.n	8001a3a <__swsetup_r+0x62>
 80019f4:	06da      	lsls	r2, r3, #27
 80019f6:	d407      	bmi.n	8001a08 <__swsetup_r+0x30>
 80019f8:	2209      	movs	r2, #9
 80019fa:	602a      	str	r2, [r5, #0]
 80019fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a00:	81a3      	strh	r3, [r4, #12]
 8001a02:	f04f 30ff 	mov.w	r0, #4294967295
 8001a06:	e033      	b.n	8001a70 <__swsetup_r+0x98>
 8001a08:	0758      	lsls	r0, r3, #29
 8001a0a:	d512      	bpl.n	8001a32 <__swsetup_r+0x5a>
 8001a0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a0e:	b141      	cbz	r1, 8001a22 <__swsetup_r+0x4a>
 8001a10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001a14:	4299      	cmp	r1, r3
 8001a16:	d002      	beq.n	8001a1e <__swsetup_r+0x46>
 8001a18:	4628      	mov	r0, r5
 8001a1a:	f7ff fbdb 	bl	80011d4 <_free_r>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	6363      	str	r3, [r4, #52]	@ 0x34
 8001a22:	89a3      	ldrh	r3, [r4, #12]
 8001a24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001a28:	81a3      	strh	r3, [r4, #12]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	6063      	str	r3, [r4, #4]
 8001a2e:	6923      	ldr	r3, [r4, #16]
 8001a30:	6023      	str	r3, [r4, #0]
 8001a32:	89a3      	ldrh	r3, [r4, #12]
 8001a34:	f043 0308 	orr.w	r3, r3, #8
 8001a38:	81a3      	strh	r3, [r4, #12]
 8001a3a:	6923      	ldr	r3, [r4, #16]
 8001a3c:	b94b      	cbnz	r3, 8001a52 <__swsetup_r+0x7a>
 8001a3e:	89a3      	ldrh	r3, [r4, #12]
 8001a40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001a44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a48:	d003      	beq.n	8001a52 <__swsetup_r+0x7a>
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	4628      	mov	r0, r5
 8001a4e:	f000 f83f 	bl	8001ad0 <__smakebuf_r>
 8001a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a56:	f013 0201 	ands.w	r2, r3, #1
 8001a5a:	d00a      	beq.n	8001a72 <__swsetup_r+0x9a>
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	60a2      	str	r2, [r4, #8]
 8001a60:	6962      	ldr	r2, [r4, #20]
 8001a62:	4252      	negs	r2, r2
 8001a64:	61a2      	str	r2, [r4, #24]
 8001a66:	6922      	ldr	r2, [r4, #16]
 8001a68:	b942      	cbnz	r2, 8001a7c <__swsetup_r+0xa4>
 8001a6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001a6e:	d1c5      	bne.n	80019fc <__swsetup_r+0x24>
 8001a70:	bd38      	pop	{r3, r4, r5, pc}
 8001a72:	0799      	lsls	r1, r3, #30
 8001a74:	bf58      	it	pl
 8001a76:	6962      	ldrpl	r2, [r4, #20]
 8001a78:	60a2      	str	r2, [r4, #8]
 8001a7a:	e7f4      	b.n	8001a66 <__swsetup_r+0x8e>
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	e7f7      	b.n	8001a70 <__swsetup_r+0x98>
 8001a80:	2000000c 	.word	0x2000000c

08001a84 <__swhatbuf_r>:
 8001a84:	b570      	push	{r4, r5, r6, lr}
 8001a86:	460c      	mov	r4, r1
 8001a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	b096      	sub	sp, #88	@ 0x58
 8001a90:	4615      	mov	r5, r2
 8001a92:	461e      	mov	r6, r3
 8001a94:	da0d      	bge.n	8001ab2 <__swhatbuf_r+0x2e>
 8001a96:	89a3      	ldrh	r3, [r4, #12]
 8001a98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001a9c:	f04f 0100 	mov.w	r1, #0
 8001aa0:	bf14      	ite	ne
 8001aa2:	2340      	movne	r3, #64	@ 0x40
 8001aa4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	6031      	str	r1, [r6, #0]
 8001aac:	602b      	str	r3, [r5, #0]
 8001aae:	b016      	add	sp, #88	@ 0x58
 8001ab0:	bd70      	pop	{r4, r5, r6, pc}
 8001ab2:	466a      	mov	r2, sp
 8001ab4:	f000 f848 	bl	8001b48 <_fstat_r>
 8001ab8:	2800      	cmp	r0, #0
 8001aba:	dbec      	blt.n	8001a96 <__swhatbuf_r+0x12>
 8001abc:	9901      	ldr	r1, [sp, #4]
 8001abe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001ac2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001ac6:	4259      	negs	r1, r3
 8001ac8:	4159      	adcs	r1, r3
 8001aca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ace:	e7eb      	b.n	8001aa8 <__swhatbuf_r+0x24>

08001ad0 <__smakebuf_r>:
 8001ad0:	898b      	ldrh	r3, [r1, #12]
 8001ad2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ad4:	079d      	lsls	r5, r3, #30
 8001ad6:	4606      	mov	r6, r0
 8001ad8:	460c      	mov	r4, r1
 8001ada:	d507      	bpl.n	8001aec <__smakebuf_r+0x1c>
 8001adc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001ae0:	6023      	str	r3, [r4, #0]
 8001ae2:	6123      	str	r3, [r4, #16]
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	6163      	str	r3, [r4, #20]
 8001ae8:	b003      	add	sp, #12
 8001aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aec:	ab01      	add	r3, sp, #4
 8001aee:	466a      	mov	r2, sp
 8001af0:	f7ff ffc8 	bl	8001a84 <__swhatbuf_r>
 8001af4:	9f00      	ldr	r7, [sp, #0]
 8001af6:	4605      	mov	r5, r0
 8001af8:	4639      	mov	r1, r7
 8001afa:	4630      	mov	r0, r6
 8001afc:	f7ff f93a 	bl	8000d74 <_malloc_r>
 8001b00:	b948      	cbnz	r0, 8001b16 <__smakebuf_r+0x46>
 8001b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b06:	059a      	lsls	r2, r3, #22
 8001b08:	d4ee      	bmi.n	8001ae8 <__smakebuf_r+0x18>
 8001b0a:	f023 0303 	bic.w	r3, r3, #3
 8001b0e:	f043 0302 	orr.w	r3, r3, #2
 8001b12:	81a3      	strh	r3, [r4, #12]
 8001b14:	e7e2      	b.n	8001adc <__smakebuf_r+0xc>
 8001b16:	89a3      	ldrh	r3, [r4, #12]
 8001b18:	6020      	str	r0, [r4, #0]
 8001b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b1e:	81a3      	strh	r3, [r4, #12]
 8001b20:	9b01      	ldr	r3, [sp, #4]
 8001b22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001b26:	b15b      	cbz	r3, 8001b40 <__smakebuf_r+0x70>
 8001b28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b2c:	4630      	mov	r0, r6
 8001b2e:	f000 f81d 	bl	8001b6c <_isatty_r>
 8001b32:	b128      	cbz	r0, 8001b40 <__smakebuf_r+0x70>
 8001b34:	89a3      	ldrh	r3, [r4, #12]
 8001b36:	f023 0303 	bic.w	r3, r3, #3
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	81a3      	strh	r3, [r4, #12]
 8001b40:	89a3      	ldrh	r3, [r4, #12]
 8001b42:	431d      	orrs	r5, r3
 8001b44:	81a5      	strh	r5, [r4, #12]
 8001b46:	e7cf      	b.n	8001ae8 <__smakebuf_r+0x18>

08001b48 <_fstat_r>:
 8001b48:	b538      	push	{r3, r4, r5, lr}
 8001b4a:	4d07      	ldr	r5, [pc, #28]	@ (8001b68 <_fstat_r+0x20>)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	4604      	mov	r4, r0
 8001b50:	4608      	mov	r0, r1
 8001b52:	4611      	mov	r1, r2
 8001b54:	602b      	str	r3, [r5, #0]
 8001b56:	f7ff f862 	bl	8000c1e <_fstat>
 8001b5a:	1c43      	adds	r3, r0, #1
 8001b5c:	d102      	bne.n	8001b64 <_fstat_r+0x1c>
 8001b5e:	682b      	ldr	r3, [r5, #0]
 8001b60:	b103      	cbz	r3, 8001b64 <_fstat_r+0x1c>
 8001b62:	6023      	str	r3, [r4, #0]
 8001b64:	bd38      	pop	{r3, r4, r5, pc}
 8001b66:	bf00      	nop
 8001b68:	200001e4 	.word	0x200001e4

08001b6c <_isatty_r>:
 8001b6c:	b538      	push	{r3, r4, r5, lr}
 8001b6e:	4d06      	ldr	r5, [pc, #24]	@ (8001b88 <_isatty_r+0x1c>)
 8001b70:	2300      	movs	r3, #0
 8001b72:	4604      	mov	r4, r0
 8001b74:	4608      	mov	r0, r1
 8001b76:	602b      	str	r3, [r5, #0]
 8001b78:	f7ff f861 	bl	8000c3e <_isatty>
 8001b7c:	1c43      	adds	r3, r0, #1
 8001b7e:	d102      	bne.n	8001b86 <_isatty_r+0x1a>
 8001b80:	682b      	ldr	r3, [r5, #0]
 8001b82:	b103      	cbz	r3, 8001b86 <_isatty_r+0x1a>
 8001b84:	6023      	str	r3, [r4, #0]
 8001b86:	bd38      	pop	{r3, r4, r5, pc}
 8001b88:	200001e4 	.word	0x200001e4

08001b8c <_init>:
 8001b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b8e:	bf00      	nop
 8001b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b92:	bc08      	pop	{r3}
 8001b94:	469e      	mov	lr, r3
 8001b96:	4770      	bx	lr

08001b98 <_fini>:
 8001b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b9a:	bf00      	nop
 8001b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b9e:	bc08      	pop	{r3}
 8001ba0:	469e      	mov	lr, r3
 8001ba2:	4770      	bx	lr
