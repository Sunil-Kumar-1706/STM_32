
Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001514  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080016a0  080016a0  000026a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016b4  080016b4  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080016b4  080016b4  0000305c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080016b4  080016b4  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016b4  080016b4  000026b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080016b8  080016b8  000026b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080016bc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          0000019c  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001f8  200001f8  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000023fa  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008a3  00000000  00000000  00005486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000248  00000000  00000000  00005d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000019e  00000000  00000000  00005f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001672  00000000  00000000  00006116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002fb4  00000000  00000000  00007788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c8ac  00000000  00000000  0000a73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00016fe8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e50  00000000  00000000  0001702c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00017e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000005c 	.word	0x2000005c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001688 	.word	0x08001688

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000060 	.word	0x20000060
 80001c8:	08001688 	.word	0x08001688

080001cc <GPIO_PeriClockControl>:
#include "GPIO_driver.h"

/*peripheral clock setup */
void GPIO_PeriClockControl(GPIO_Regdef_t *pGPIOx , uint8_t EnorDi)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	460b      	mov	r3, r1
 80001d6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80001d8:	78fb      	ldrb	r3, [r7, #3]
 80001da:	2b01      	cmp	r3, #1
 80001dc:	d157      	bne.n	800028e <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80001e4:	d106      	bne.n	80001f4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80001e6:	4b58      	ldr	r3, [pc, #352]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80001e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001ea:	4a57      	ldr	r2, [pc, #348]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80001ec:	f043 0301 	orr.w	r3, r3, #1
 80001f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
				else if(pGPIOx==GPIOH)
				{
					GPIOH_PCLK_DI();
				}
	}
}
 80001f2:	e0a3      	b.n	800033c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOB)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4a55      	ldr	r2, [pc, #340]	@ (800034c <GPIO_PeriClockControl+0x180>)
 80001f8:	4293      	cmp	r3, r2
 80001fa:	d106      	bne.n	800020a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80001fc:	4b52      	ldr	r3, [pc, #328]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80001fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000200:	4a51      	ldr	r2, [pc, #324]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000202:	f043 0302 	orr.w	r3, r3, #2
 8000206:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000208:	e098      	b.n	800033c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOC)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a50      	ldr	r2, [pc, #320]	@ (8000350 <GPIO_PeriClockControl+0x184>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d106      	bne.n	8000220 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000212:	4b4d      	ldr	r3, [pc, #308]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000216:	4a4c      	ldr	r2, [pc, #304]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000218:	f043 0304 	orr.w	r3, r3, #4
 800021c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800021e:	e08d      	b.n	800033c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOD)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a4c      	ldr	r2, [pc, #304]	@ (8000354 <GPIO_PeriClockControl+0x188>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d106      	bne.n	8000236 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000228:	4b47      	ldr	r3, [pc, #284]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800022a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800022c:	4a46      	ldr	r2, [pc, #280]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800022e:	f043 0308 	orr.w	r3, r3, #8
 8000232:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000234:	e082      	b.n	800033c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOE)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4a47      	ldr	r2, [pc, #284]	@ (8000358 <GPIO_PeriClockControl+0x18c>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d106      	bne.n	800024c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800023e:	4b42      	ldr	r3, [pc, #264]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000242:	4a41      	ldr	r2, [pc, #260]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000244:	f043 0310 	orr.w	r3, r3, #16
 8000248:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800024a:	e077      	b.n	800033c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOF)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4a43      	ldr	r2, [pc, #268]	@ (800035c <GPIO_PeriClockControl+0x190>)
 8000250:	4293      	cmp	r3, r2
 8000252:	d106      	bne.n	8000262 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000254:	4b3c      	ldr	r3, [pc, #240]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000258:	4a3b      	ldr	r2, [pc, #236]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800025a:	f043 0320 	orr.w	r3, r3, #32
 800025e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000260:	e06c      	b.n	800033c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOG)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4a3e      	ldr	r2, [pc, #248]	@ (8000360 <GPIO_PeriClockControl+0x194>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d106      	bne.n	8000278 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800026a:	4b37      	ldr	r3, [pc, #220]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800026c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800026e:	4a36      	ldr	r2, [pc, #216]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000274:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000276:	e061      	b.n	800033c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOH)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a3a      	ldr	r2, [pc, #232]	@ (8000364 <GPIO_PeriClockControl+0x198>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d15d      	bne.n	800033c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000280:	4b31      	ldr	r3, [pc, #196]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000284:	4a30      	ldr	r2, [pc, #192]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800028a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800028c:	e056      	b.n	800033c <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000294:	d106      	bne.n	80002a4 <GPIO_PeriClockControl+0xd8>
					GPIOA_PCLK_DI();
 8000296:	4b2c      	ldr	r3, [pc, #176]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800029a:	4a2b      	ldr	r2, [pc, #172]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800029c:	f023 0301 	bic.w	r3, r3, #1
 80002a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002a2:	e04b      	b.n	800033c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOB)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a29      	ldr	r2, [pc, #164]	@ (800034c <GPIO_PeriClockControl+0x180>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d106      	bne.n	80002ba <GPIO_PeriClockControl+0xee>
					GPIOB_PCLK_DI();
 80002ac:	4b26      	ldr	r3, [pc, #152]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002b0:	4a25      	ldr	r2, [pc, #148]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002b2:	f023 0302 	bic.w	r3, r3, #2
 80002b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002b8:	e040      	b.n	800033c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOC)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a24      	ldr	r2, [pc, #144]	@ (8000350 <GPIO_PeriClockControl+0x184>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d106      	bne.n	80002d0 <GPIO_PeriClockControl+0x104>
					GPIOC_PCLK_DI();
 80002c2:	4b21      	ldr	r3, [pc, #132]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002c6:	4a20      	ldr	r2, [pc, #128]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002c8:	f023 0304 	bic.w	r3, r3, #4
 80002cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002ce:	e035      	b.n	800033c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOD)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a20      	ldr	r2, [pc, #128]	@ (8000354 <GPIO_PeriClockControl+0x188>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d106      	bne.n	80002e6 <GPIO_PeriClockControl+0x11a>
					GPIOD_PCLK_DI();
 80002d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002de:	f023 0308 	bic.w	r3, r3, #8
 80002e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002e4:	e02a      	b.n	800033c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOE)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000358 <GPIO_PeriClockControl+0x18c>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d106      	bne.n	80002fc <GPIO_PeriClockControl+0x130>
					GPIOE_PCLK_DI();
 80002ee:	4b16      	ldr	r3, [pc, #88]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002f2:	4a15      	ldr	r2, [pc, #84]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002f4:	f023 0310 	bic.w	r3, r3, #16
 80002f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002fa:	e01f      	b.n	800033c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOF)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4a17      	ldr	r2, [pc, #92]	@ (800035c <GPIO_PeriClockControl+0x190>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d106      	bne.n	8000312 <GPIO_PeriClockControl+0x146>
					GPIOF_PCLK_DI();
 8000304:	4b10      	ldr	r3, [pc, #64]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000308:	4a0f      	ldr	r2, [pc, #60]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800030a:	f023 0320 	bic.w	r3, r3, #32
 800030e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000310:	e014      	b.n	800033c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOG)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a12      	ldr	r2, [pc, #72]	@ (8000360 <GPIO_PeriClockControl+0x194>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <GPIO_PeriClockControl+0x15c>
					GPIOG_PCLK_DI();
 800031a:	4b0b      	ldr	r3, [pc, #44]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800031c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800031e:	4a0a      	ldr	r2, [pc, #40]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000324:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000326:	e009      	b.n	800033c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOH)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a0e      	ldr	r2, [pc, #56]	@ (8000364 <GPIO_PeriClockControl+0x198>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d105      	bne.n	800033c <GPIO_PeriClockControl+0x170>
					GPIOH_PCLK_DI();
 8000330:	4b05      	ldr	r3, [pc, #20]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000334:	4a04      	ldr	r2, [pc, #16]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000336:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800033a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	40021000 	.word	0x40021000
 800034c:	48000400 	.word	0x48000400
 8000350:	48000800 	.word	0x48000800
 8000354:	48000c00 	.word	0x48000c00
 8000358:	48001000 	.word	0x48001000
 800035c:	48001400 	.word	0x48001400
 8000360:	48001800 	.word	0x48001800
 8000364:	48001c00 	.word	0x48001c00

08000368 <GPIO_Init>:

/*Init and Deinit */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000368:	b480      	push	{r7}
 800036a:	b087      	sub	sp, #28
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	795b      	ldrb	r3, [r3, #5]
 8000378:	2b03      	cmp	r3, #3
 800037a:	d822      	bhi.n	80003c2 <GPIO_Init+0x5a>
	{
		temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	795b      	ldrb	r3, [r3, #5]
 8000380:	461a      	mov	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	791b      	ldrb	r3, [r3, #4]
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	fa02 f303 	lsl.w	r3, r2, r3
 800038c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	791b      	ldrb	r3, [r3, #4]
 8000398:	005b      	lsls	r3, r3, #1
 800039a:	2103      	movs	r1, #3
 800039c:	fa01 f303 	lsl.w	r3, r1, r3
 80003a0:	43db      	mvns	r3, r3
 80003a2:	4619      	mov	r1, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	400a      	ands	r2, r1
 80003aa:	601a      	str	r2, [r3, #0]
		pGPIOHandle ->pGPIOx->MODER |= temp;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	6819      	ldr	r1, [r3, #0]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	697a      	ldr	r2, [r7, #20]
 80003b8:	430a      	orrs	r2, r1
 80003ba:	601a      	str	r2, [r3, #0]
		temp=0;
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
 80003c0:	e0e1      	b.n	8000586 <GPIO_Init+0x21e>
	}
	else{
		temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	795b      	ldrb	r3, [r3, #5]
 80003c6:	461a      	mov	r2, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	791b      	ldrb	r3, [r3, #4]
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	fa02 f303 	lsl.w	r3, r2, r3
 80003d2:	617b      	str	r3, [r7, #20]
				pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	791b      	ldrb	r3, [r3, #4]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	2103      	movs	r1, #3
 80003e2:	fa01 f303 	lsl.w	r3, r1, r3
 80003e6:	43db      	mvns	r3, r3
 80003e8:	4619      	mov	r1, r3
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	400a      	ands	r2, r1
 80003f0:	601a      	str	r2, [r3, #0]
				pGPIOHandle ->pGPIOx->MODER |= temp;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	6819      	ldr	r1, [r3, #0]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	697a      	ldr	r2, [r7, #20]
 80003fe:	430a      	orrs	r2, r1
 8000400:	601a      	str	r2, [r3, #0]
				temp=0;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	795b      	ldrb	r3, [r3, #5]
 800040a:	2b04      	cmp	r3, #4
 800040c:	d117      	bne.n	800043e <GPIO_Init+0xd6>
		{
			EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800040e:	4b47      	ldr	r3, [pc, #284]	@ (800052c <GPIO_Init+0x1c4>)
 8000410:	68db      	ldr	r3, [r3, #12]
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	7912      	ldrb	r2, [r2, #4]
 8000416:	4611      	mov	r1, r2
 8000418:	2201      	movs	r2, #1
 800041a:	408a      	lsls	r2, r1
 800041c:	4611      	mov	r1, r2
 800041e:	4a43      	ldr	r2, [pc, #268]	@ (800052c <GPIO_Init+0x1c4>)
 8000420:	430b      	orrs	r3, r1
 8000422:	60d3      	str	r3, [r2, #12]

			EXTI->RTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000424:	4b41      	ldr	r3, [pc, #260]	@ (800052c <GPIO_Init+0x1c4>)
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	7912      	ldrb	r2, [r2, #4]
 800042c:	4611      	mov	r1, r2
 800042e:	2201      	movs	r2, #1
 8000430:	408a      	lsls	r2, r1
 8000432:	43d2      	mvns	r2, r2
 8000434:	4611      	mov	r1, r2
 8000436:	4a3d      	ldr	r2, [pc, #244]	@ (800052c <GPIO_Init+0x1c4>)
 8000438:	400b      	ands	r3, r1
 800043a:	6093      	str	r3, [r2, #8]
 800043c:	e035      	b.n	80004aa <GPIO_Init+0x142>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	795b      	ldrb	r3, [r3, #5]
 8000442:	2b05      	cmp	r3, #5
 8000444:	d117      	bne.n	8000476 <GPIO_Init+0x10e>
		{
			EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000446:	4b39      	ldr	r3, [pc, #228]	@ (800052c <GPIO_Init+0x1c4>)
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	687a      	ldr	r2, [r7, #4]
 800044c:	7912      	ldrb	r2, [r2, #4]
 800044e:	4611      	mov	r1, r2
 8000450:	2201      	movs	r2, #1
 8000452:	408a      	lsls	r2, r1
 8000454:	4611      	mov	r1, r2
 8000456:	4a35      	ldr	r2, [pc, #212]	@ (800052c <GPIO_Init+0x1c4>)
 8000458:	430b      	orrs	r3, r1
 800045a:	6093      	str	r3, [r2, #8]

			EXTI->FTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800045c:	4b33      	ldr	r3, [pc, #204]	@ (800052c <GPIO_Init+0x1c4>)
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	7912      	ldrb	r2, [r2, #4]
 8000464:	4611      	mov	r1, r2
 8000466:	2201      	movs	r2, #1
 8000468:	408a      	lsls	r2, r1
 800046a:	43d2      	mvns	r2, r2
 800046c:	4611      	mov	r1, r2
 800046e:	4a2f      	ldr	r2, [pc, #188]	@ (800052c <GPIO_Init+0x1c4>)
 8000470:	400b      	ands	r3, r1
 8000472:	60d3      	str	r3, [r2, #12]
 8000474:	e019      	b.n	80004aa <GPIO_Init+0x142>

		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	795b      	ldrb	r3, [r3, #5]
 800047a:	2b06      	cmp	r3, #6
 800047c:	d115      	bne.n	80004aa <GPIO_Init+0x142>
		{
			EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800047e:	4b2b      	ldr	r3, [pc, #172]	@ (800052c <GPIO_Init+0x1c4>)
 8000480:	68db      	ldr	r3, [r3, #12]
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	7912      	ldrb	r2, [r2, #4]
 8000486:	4611      	mov	r1, r2
 8000488:	2201      	movs	r2, #1
 800048a:	408a      	lsls	r2, r1
 800048c:	4611      	mov	r1, r2
 800048e:	4a27      	ldr	r2, [pc, #156]	@ (800052c <GPIO_Init+0x1c4>)
 8000490:	430b      	orrs	r3, r1
 8000492:	60d3      	str	r3, [r2, #12]

			EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000494:	4b25      	ldr	r3, [pc, #148]	@ (800052c <GPIO_Init+0x1c4>)
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	7912      	ldrb	r2, [r2, #4]
 800049c:	4611      	mov	r1, r2
 800049e:	2201      	movs	r2, #1
 80004a0:	408a      	lsls	r2, r1
 80004a2:	4611      	mov	r1, r2
 80004a4:	4a21      	ldr	r2, [pc, #132]	@ (800052c <GPIO_Init+0x1c4>)
 80004a6:	430b      	orrs	r3, r1
 80004a8:	6093      	str	r3, [r2, #8]
		}
	 uint8_t temp1=pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber/4;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	791b      	ldrb	r3, [r3, #4]
 80004ae:	089b      	lsrs	r3, r3, #2
 80004b0:	74fb      	strb	r3, [r7, #19]
	 uint8_t temp2=pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber%4;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	791b      	ldrb	r3, [r3, #4]
 80004b6:	f003 0303 	and.w	r3, r3, #3
 80004ba:	74bb      	strb	r3, [r7, #18]
	 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80004c4:	d042      	beq.n	800054c <GPIO_Init+0x1e4>
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a19      	ldr	r2, [pc, #100]	@ (8000530 <GPIO_Init+0x1c8>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d02b      	beq.n	8000528 <GPIO_Init+0x1c0>
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a17      	ldr	r2, [pc, #92]	@ (8000534 <GPIO_Init+0x1cc>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d024      	beq.n	8000524 <GPIO_Init+0x1bc>
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a16      	ldr	r2, [pc, #88]	@ (8000538 <GPIO_Init+0x1d0>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d01d      	beq.n	8000520 <GPIO_Init+0x1b8>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a14      	ldr	r2, [pc, #80]	@ (800053c <GPIO_Init+0x1d4>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d016      	beq.n	800051c <GPIO_Init+0x1b4>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a13      	ldr	r2, [pc, #76]	@ (8000540 <GPIO_Init+0x1d8>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d00f      	beq.n	8000518 <GPIO_Init+0x1b0>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a11      	ldr	r2, [pc, #68]	@ (8000544 <GPIO_Init+0x1dc>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d008      	beq.n	8000514 <GPIO_Init+0x1ac>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a10      	ldr	r2, [pc, #64]	@ (8000548 <GPIO_Init+0x1e0>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d101      	bne.n	8000510 <GPIO_Init+0x1a8>
 800050c:	2307      	movs	r3, #7
 800050e:	e01e      	b.n	800054e <GPIO_Init+0x1e6>
 8000510:	2300      	movs	r3, #0
 8000512:	e01c      	b.n	800054e <GPIO_Init+0x1e6>
 8000514:	2306      	movs	r3, #6
 8000516:	e01a      	b.n	800054e <GPIO_Init+0x1e6>
 8000518:	2305      	movs	r3, #5
 800051a:	e018      	b.n	800054e <GPIO_Init+0x1e6>
 800051c:	2304      	movs	r3, #4
 800051e:	e016      	b.n	800054e <GPIO_Init+0x1e6>
 8000520:	2303      	movs	r3, #3
 8000522:	e014      	b.n	800054e <GPIO_Init+0x1e6>
 8000524:	2302      	movs	r3, #2
 8000526:	e012      	b.n	800054e <GPIO_Init+0x1e6>
 8000528:	2301      	movs	r3, #1
 800052a:	e010      	b.n	800054e <GPIO_Init+0x1e6>
 800052c:	40010400 	.word	0x40010400
 8000530:	48000400 	.word	0x48000400
 8000534:	48000800 	.word	0x48000800
 8000538:	48000c00 	.word	0x48000c00
 800053c:	48001000 	.word	0x48001000
 8000540:	48001400 	.word	0x48001400
 8000544:	48001800 	.word	0x48001800
 8000548:	48001c00 	.word	0x48001c00
 800054c:	2300      	movs	r3, #0
 800054e:	747b      	strb	r3, [r7, #17]
	 SYSCFG_PCLK_EN();
 8000550:	4b5e      	ldr	r3, [pc, #376]	@ (80006cc <GPIO_Init+0x364>)
 8000552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000554:	4a5d      	ldr	r2, [pc, #372]	@ (80006cc <GPIO_Init+0x364>)
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	6613      	str	r3, [r2, #96]	@ 0x60
	 SYSCFG->EXTICR[temp1]=portcode << (temp2 * 4);
 800055c:	7c7a      	ldrb	r2, [r7, #17]
 800055e:	7cbb      	ldrb	r3, [r7, #18]
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	fa02 f103 	lsl.w	r1, r2, r3
 8000566:	4a5a      	ldr	r2, [pc, #360]	@ (80006d0 <GPIO_Init+0x368>)
 8000568:	7cfb      	ldrb	r3, [r7, #19]
 800056a:	3302      	adds	r3, #2
 800056c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 EXTI -> IMR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000570:	4b58      	ldr	r3, [pc, #352]	@ (80006d4 <GPIO_Init+0x36c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	7912      	ldrb	r2, [r2, #4]
 8000578:	4611      	mov	r1, r2
 800057a:	2201      	movs	r2, #1
 800057c:	408a      	lsls	r2, r1
 800057e:	4611      	mov	r1, r2
 8000580:	4a54      	ldr	r2, [pc, #336]	@ (80006d4 <GPIO_Init+0x36c>)
 8000582:	430b      	orrs	r3, r1
 8000584:	6013      	str	r3, [r2, #0]
	}

	temp=0;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
	temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	799b      	ldrb	r3, [r3, #6]
 800058e:	461a      	mov	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	fa02 f303 	lsl.w	r3, r2, r3
 800059a:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->OSPEEDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	689a      	ldr	r2, [r3, #8]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791b      	ldrb	r3, [r3, #4]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	2103      	movs	r1, #3
 80005aa:	fa01 f303 	lsl.w	r3, r1, r3
 80005ae:	43db      	mvns	r3, r3
 80005b0:	4619      	mov	r1, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	400a      	ands	r2, r1
 80005b8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	6899      	ldr	r1, [r3, #8]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	430a      	orrs	r2, r1
 80005c8:	609a      	str	r2, [r3, #8]
	temp=0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]

	temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	79db      	ldrb	r3, [r3, #7]
 80005d2:	461a      	mov	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	791b      	ldrb	r3, [r3, #4]
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->PUPDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	68da      	ldr	r2, [r3, #12]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	2103      	movs	r1, #3
 80005ee:	fa01 f303 	lsl.w	r3, r1, r3
 80005f2:	43db      	mvns	r3, r3
 80005f4:	4619      	mov	r1, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	400a      	ands	r2, r1
 80005fc:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	68d9      	ldr	r1, [r3, #12]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	697a      	ldr	r2, [r7, #20]
 800060a:	430a      	orrs	r2, r1
 800060c:	60da      	str	r2, [r3, #12]
	temp=0;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]

	temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType<<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	7a1b      	ldrb	r3, [r3, #8]
 8000616:	461a      	mov	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791b      	ldrb	r3, [r3, #4]
 800061c:	fa02 f303 	lsl.w	r3, r2, r3
 8000620:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->OTYPER &= ~(0X01 << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	685a      	ldr	r2, [r3, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	4619      	mov	r1, r3
 800062e:	2301      	movs	r3, #1
 8000630:	408b      	lsls	r3, r1
 8000632:	43db      	mvns	r3, r3
 8000634:	4619      	mov	r1, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	400a      	ands	r2, r1
 800063c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	6859      	ldr	r1, [r3, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	430a      	orrs	r2, r1
 800064c:	605a      	str	r2, [r3, #4]
	temp=0;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	795b      	ldrb	r3, [r3, #5]
 8000656:	2b02      	cmp	r3, #2
 8000658:	d132      	bne.n	80006c0 <GPIO_Init+0x358>
	{
		uint32_t temp1 ,temp2;
		temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	791b      	ldrb	r3, [r3, #4]
 800065e:	08db      	lsrs	r3, r3, #3
 8000660:	b2db      	uxtb	r3, r3
 8000662:	60fb      	str	r3, [r7, #12]
		temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	f003 0307 	and.w	r3, r3, #7
 800066c:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0X0f<< (4*temp2));
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	3208      	adds	r2, #8
 8000676:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	210f      	movs	r1, #15
 8000680:	fa01 f303 	lsl.w	r3, r1, r3
 8000684:	43db      	mvns	r3, r3
 8000686:	4619      	mov	r1, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4011      	ands	r1, r2
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	3208      	adds	r2, #8
 8000692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	3208      	adds	r2, #8
 800069e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	7a5b      	ldrb	r3, [r3, #9]
 80006a6:	4619      	mov	r1, r3
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	fa01 f303 	lsl.w	r3, r1, r3
 80006b0:	4619      	mov	r1, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4311      	orrs	r1, r2
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	3208      	adds	r2, #8
 80006bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80006c0:	bf00      	nop
 80006c2:	371c      	adds	r7, #28
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40010000 	.word	0x40010000
 80006d4:	40010400 	.word	0x40010400

080006d8 <timer2_1hz_init>:

#define TIM2EN      (1U<<0)   // APB1ENR1: TIM2 clock enable
#define CR1_CEN     (1U<<0)

void timer2_1hz_init(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
    /* Enable clock access to TIM2 */
    RCC->APB1ENR1 |= TIM2EN;
 80006dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <timer2_1hz_init+0x40>)
 80006de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000718 <timer2_1hz_init+0x40>)
 80006e2:	f043 0301 	orr.w	r3, r3, #1
 80006e6:	6593      	str	r3, [r2, #88]	@ 0x58

    /* Set prescaler */
    TIM2->PSC = 16000 - 1;   // 16 MHz / 16000 = 1 kHz
 80006e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006ec:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80006f0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set auto-reload value */
    TIM2->ARR = 1000 - 1;    // 1000 / 1000 Hz = 1 Hz
 80006f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear counter */
    TIM2->CNT = 0;
 80006fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000700:	2200      	movs	r2, #0
 8000702:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enable timer */
    TIM2->CR1 = CR1_CEN;
 8000704:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000708:	2201      	movs	r2, #1
 800070a:	601a      	str	r2, [r3, #0]
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000

0800071c <USART_PeriClockControl>:
#include "USART_driver.h"
#include "RCC_driver.h"

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	460b      	mov	r3, r1
 8000726:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000728:	78fb      	ldrb	r3, [r7, #3]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d136      	bne.n	800079c <USART_PeriClockControl+0x80>
	{
		if(pUSARTx == USART1)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a38      	ldr	r2, [pc, #224]	@ (8000814 <USART_PeriClockControl+0xf8>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d106      	bne.n	8000744 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000736:	4b38      	ldr	r3, [pc, #224]	@ (8000818 <USART_PeriClockControl+0xfc>)
 8000738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800073a:	4a37      	ldr	r2, [pc, #220]	@ (8000818 <USART_PeriClockControl+0xfc>)
 800073c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000740:	6613      	str	r3, [r2, #96]	@ 0x60
		else if(pUSARTx == UART5)
		{
			UART5_PCLK_DI();
		}
	}
}
 8000742:	e061      	b.n	8000808 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4a35      	ldr	r2, [pc, #212]	@ (800081c <USART_PeriClockControl+0x100>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d106      	bne.n	800075a <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 800074c:	4b32      	ldr	r3, [pc, #200]	@ (8000818 <USART_PeriClockControl+0xfc>)
 800074e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000750:	4a31      	ldr	r2, [pc, #196]	@ (8000818 <USART_PeriClockControl+0xfc>)
 8000752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000756:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000758:	e056      	b.n	8000808 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4a30      	ldr	r2, [pc, #192]	@ (8000820 <USART_PeriClockControl+0x104>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d106      	bne.n	8000770 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000762:	4b2d      	ldr	r3, [pc, #180]	@ (8000818 <USART_PeriClockControl+0xfc>)
 8000764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000766:	4a2c      	ldr	r2, [pc, #176]	@ (8000818 <USART_PeriClockControl+0xfc>)
 8000768:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800076c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800076e:	e04b      	b.n	8000808 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a2c      	ldr	r2, [pc, #176]	@ (8000824 <USART_PeriClockControl+0x108>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d106      	bne.n	8000786 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000778:	4b27      	ldr	r3, [pc, #156]	@ (8000818 <USART_PeriClockControl+0xfc>)
 800077a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800077c:	4a26      	ldr	r2, [pc, #152]	@ (8000818 <USART_PeriClockControl+0xfc>)
 800077e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000782:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000784:	e040      	b.n	8000808 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4a27      	ldr	r2, [pc, #156]	@ (8000828 <USART_PeriClockControl+0x10c>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d13c      	bne.n	8000808 <USART_PeriClockControl+0xec>
			UART5_PCLK_EN();
 800078e:	4b22      	ldr	r3, [pc, #136]	@ (8000818 <USART_PeriClockControl+0xfc>)
 8000790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000792:	4a21      	ldr	r2, [pc, #132]	@ (8000818 <USART_PeriClockControl+0xfc>)
 8000794:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000798:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800079a:	e035      	b.n	8000808 <USART_PeriClockControl+0xec>
		if(pUSARTx == USART1)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4a1d      	ldr	r2, [pc, #116]	@ (8000814 <USART_PeriClockControl+0xf8>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d106      	bne.n	80007b2 <USART_PeriClockControl+0x96>
			USART1_PCLK_DI();
 80007a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <USART_PeriClockControl+0xfc>)
 80007a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000818 <USART_PeriClockControl+0xfc>)
 80007aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80007ae:	6613      	str	r3, [r2, #96]	@ 0x60
}
 80007b0:	e02a      	b.n	8000808 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4a19      	ldr	r2, [pc, #100]	@ (800081c <USART_PeriClockControl+0x100>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d106      	bne.n	80007c8 <USART_PeriClockControl+0xac>
			USART2_PCLK_DI();
 80007ba:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <USART_PeriClockControl+0xfc>)
 80007bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007be:	4a16      	ldr	r2, [pc, #88]	@ (8000818 <USART_PeriClockControl+0xfc>)
 80007c0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80007c4:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80007c6:	e01f      	b.n	8000808 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4a15      	ldr	r2, [pc, #84]	@ (8000820 <USART_PeriClockControl+0x104>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d106      	bne.n	80007de <USART_PeriClockControl+0xc2>
			USART3_PCLK_DI();
 80007d0:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <USART_PeriClockControl+0xfc>)
 80007d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007d4:	4a10      	ldr	r2, [pc, #64]	@ (8000818 <USART_PeriClockControl+0xfc>)
 80007d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80007da:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80007dc:	e014      	b.n	8000808 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a10      	ldr	r2, [pc, #64]	@ (8000824 <USART_PeriClockControl+0x108>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d106      	bne.n	80007f4 <USART_PeriClockControl+0xd8>
			UART4_PCLK_DI();
 80007e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <USART_PeriClockControl+0xfc>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000818 <USART_PeriClockControl+0xfc>)
 80007ec:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80007f0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80007f2:	e009      	b.n	8000808 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000828 <USART_PeriClockControl+0x10c>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d105      	bne.n	8000808 <USART_PeriClockControl+0xec>
			UART5_PCLK_DI();
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <USART_PeriClockControl+0xfc>)
 80007fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000800:	4a05      	ldr	r2, [pc, #20]	@ (8000818 <USART_PeriClockControl+0xfc>)
 8000802:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000806:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	40013800 	.word	0x40013800
 8000818:	40021000 	.word	0x40021000
 800081c:	40004400 	.word	0x40004400
 8000820:	40004800 	.word	0x40004800
 8000824:	40004c00 	.word	0x40004c00
 8000828:	40005000 	.word	0x40005000

0800082c <USART_Init>:
}



void USART_Init(USART_Handle_t *pUSARTHandle)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
		uint32_t tempreg=0;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]

		USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2101      	movs	r1, #1
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff6c 	bl	800071c <USART_PeriClockControl>

		if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	791b      	ldrb	r3, [r3, #4]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d104      	bne.n	8000856 <USART_Init+0x2a>
		{
			tempreg|= (1 << USART_CR1_RE);
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	e010      	b.n	8000878 <USART_Init+0x4c>
		}
		else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	791b      	ldrb	r3, [r3, #4]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d104      	bne.n	8000868 <USART_Init+0x3c>
		{
			tempreg |= ( 1 << USART_CR1_TE );
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	e007      	b.n	8000878 <USART_Init+0x4c>
		}
		else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	791b      	ldrb	r3, [r3, #4]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d103      	bne.n	8000878 <USART_Init+0x4c>
		{
			tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f043 030c 	orr.w	r3, r3, #12
 8000876:	60fb      	str	r3, [r7, #12]
		}

		tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	7b5b      	ldrb	r3, [r3, #13]
 800087c:	031b      	lsls	r3, r3, #12
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	4313      	orrs	r3, r2
 8000882:	60fb      	str	r3, [r7, #12]

		if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	7b9b      	ldrb	r3, [r3, #14]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d104      	bne.n	8000896 <USART_Init+0x6a>
		{
			tempreg |= ( 1 << USART_CR1_PCE);
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	e00b      	b.n	80008ae <USART_Init+0x82>

		}
		else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	7b9b      	ldrb	r3, [r3, #14]
 800089a:	2b02      	cmp	r3, #2
 800089c:	d107      	bne.n	80008ae <USART_Init+0x82>
		{
		    tempreg |= ( 1 << USART_CR1_PCE);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008a4:	60fb      	str	r3, [r7, #12]
		    tempreg |= ( 1 << USART_CR1_PS);
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008ac:	60fb      	str	r3, [r7, #12]
		}


		pUSARTHandle->pUSARTx->CR1 = tempreg;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	601a      	str	r2, [r3, #0]
		tempreg=0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
		tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	7b1b      	ldrb	r3, [r3, #12]
 80008be:	031b      	lsls	r3, r3, #12
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	60fb      	str	r3, [r7, #12]
		pUSARTHandle->pUSARTx->CR2 = tempreg;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	605a      	str	r2, [r3, #4]

		tempreg=0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]


		if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	7bdb      	ldrb	r3, [r3, #15]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d104      	bne.n	80008e4 <USART_Init+0xb8>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	e014      	b.n	800090e <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	7bdb      	ldrb	r3, [r3, #15]
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d104      	bne.n	80008f6 <USART_Init+0xca>
		{
			tempreg |= ( 1 << USART_CR3_RTSE);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	e00b      	b.n	800090e <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	7bdb      	ldrb	r3, [r3, #15]
 80008fa:	2b03      	cmp	r3, #3
 80008fc:	d107      	bne.n	800090e <USART_Init+0xe2>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000904:	60fb      	str	r3, [r7, #12]
			tempreg |= ( 1 << USART_CR3_RTSE);
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800090c:	60fb      	str	r3, [r7, #12]
		}

		pUSARTHandle->pUSARTx->CR3 = tempreg;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	609a      	str	r2, [r3, #8]
		pUSARTHandle->pUSARTx->BRR=0X23;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2223      	movs	r2, #35	@ 0x23
 800091c:	60da      	str	r2, [r3, #12]
	//	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
}
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <USART_SendData>:




void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b086      	sub	sp, #24
 800092a:	af00      	add	r7, sp, #0
 800092c:	60f8      	str	r0, [r7, #12]
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

	for(uint32_t i = 0 ; i < Len; i++)
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	e031      	b.n	800099c <USART_SendData+0x76>
	{
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000938:	bf00      	nop
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	4618      	mov	r0, r3
 8000942:	f000 f85a 	bl	80009fa <USART_GetFlagStatus>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d0f6      	beq.n	800093a <USART_SendData+0x14>

		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	7b5b      	ldrb	r3, [r3, #13]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d118      	bne.n	8000986 <USART_SendData+0x60>
		{
			pdata = (uint16_t*) pTxBuffer;
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000966:	629a      	str	r2, [r3, #40]	@ 0x28

			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	7b9b      	ldrb	r3, [r3, #14]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d106      	bne.n	800097e <USART_SendData+0x58>
			{
				pTxBuffer++;
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	3301      	adds	r3, #1
 8000974:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	3301      	adds	r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	e00b      	b.n	8000996 <USART_SendData+0x70>

			}
			else
			{
				pTxBuffer++;
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	3301      	adds	r3, #1
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	e007      	b.n	8000996 <USART_SendData+0x70>
			}
		}
		else
		{

			pUSARTHandle->pUSARTx->TDR = (*pTxBuffer  & (uint8_t)0xFF);
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	781a      	ldrb	r2, [r3, #0]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	629a      	str	r2, [r3, #40]	@ 0x28
			pTxBuffer++;
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	3301      	adds	r3, #1
 8000994:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	3301      	adds	r3, #1
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697a      	ldr	r2, [r7, #20]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d3c9      	bcc.n	8000938 <USART_SendData+0x12>
		}
	}
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 80009a4:	bf00      	nop
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2140      	movs	r1, #64	@ 0x40
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 f824 	bl	80009fa <USART_GetFlagStatus>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d0f6      	beq.n	80009a6 <USART_SendData+0x80>
}
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <USART_PeripheralControl>:
	temp2=0;

}

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	460b      	mov	r3, r1
 80009cc:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80009ce:	78fb      	ldrb	r3, [r7, #3]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d106      	bne.n	80009e2 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |=(1<<USART_CR1_UE);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f043 0201 	orr.w	r2, r3, #1
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
	}
}
 80009e0:	e005      	b.n	80009ee <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f023 0201 	bic.w	r2, r3, #1
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	601a      	str	r2, [r3, #0]
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <USART_GetFlagStatus>:


uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx,uint8_t StatusFlagName)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	460b      	mov	r3, r1
 8000a04:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx ->ISR & StatusFlagName)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	69da      	ldr	r2, [r3, #28]
 8000a0a:	78fb      	ldrb	r3, [r7, #3]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <USART_GetFlagStatus+0x1c>
	{
		return SET;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e000      	b.n	8000a18 <USART_GetFlagStatus+0x1e>
	}
	return RESET;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <USART2_Init>:

USART_Handle_t usart2_handle;  //USART2 handle

// Initialize USART2 peripheral with required settings
void USART2_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;                                // Select USART2
 8000a28:	4b0d      	ldr	r3, [pc, #52]	@ (8000a60 <USART2_Init+0x3c>)
 8000a2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a64 <USART2_Init+0x40>)
 8000a2c:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;  // Set baud rate to 115200
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <USART2_Init+0x3c>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a34:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE; // No hardware flow control
 8000a36:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <USART2_Init+0x3c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;        // Enable both TX and RX
 8000a3c:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <USART2_Init+0x3c>)
 8000a3e:	2202      	movs	r2, #2
 8000a40:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1; // 1 stop bit
 8000a42:	4b07      	ldr	r3, [pc, #28]	@ (8000a60 <USART2_Init+0x3c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS; // 8-bit data
 8000a48:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <USART2_Init+0x3c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE; // No parity
 8000a4e:	4b04      	ldr	r3, [pc, #16]	@ (8000a60 <USART2_Init+0x3c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle); // Apply the configuration
 8000a54:	4802      	ldr	r0, [pc, #8]	@ (8000a60 <USART2_Init+0x3c>)
 8000a56:	f7ff fee9 	bl	800082c <USART_Init>
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000078 	.word	0x20000078
 8000a64:	40004400 	.word	0x40004400

08000a68 <USART2_GPIOInit>:

// Configure GPIO pins for USART2 (PA2=TX, PA3=RX)
void USART2_GPIOInit(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart2_gpio;
	memset(&usart2_gpio,0,sizeof(usart2_gpio)); // Clear structure
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	220c      	movs	r2, #12
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fc01 	bl	800127c <memset>

	usart2_gpio.pGPIOx = GPIOA;                           // Use GPIO Port A
 8000a7a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a7e:	607b      	str	r3, [r7, #4]
	usart2_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;     // Alternate function mode
 8000a80:	2302      	movs	r3, #2
 8000a82:	727b      	strb	r3, [r7, #9]
	usart2_gpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;   // Push-pull output
 8000a84:	2300      	movs	r3, #0
 8000a86:	733b      	strb	r3, [r7, #12]
	usart2_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;  // Pull-up resistor
 8000a88:	2301      	movs	r3, #1
 8000a8a:	72fb      	strb	r3, [r7, #11]
	usart2_gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;    // Fast speed
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	72bb      	strb	r3, [r7, #10]
	usart2_gpio.GPIO_PinConfig.GPIO_PinAltFunMode = 7;             // AF7 = USART2
 8000a90:	2307      	movs	r3, #7
 8000a92:	737b      	strb	r3, [r7, #13]

	// Configure PA2 as USART2_TX
	usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 8000a94:	2302      	movs	r3, #2
 8000a96:	723b      	strb	r3, [r7, #8]
	GPIOA_PCLK_EN();                // Enable clock for GPIOA
 8000a98:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <USART2_GPIOInit+0x58>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9c:	4a08      	ldr	r2, [pc, #32]	@ (8000ac0 <USART2_GPIOInit+0x58>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIO_Init(&usart2_gpio);
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fc5e 	bl	8000368 <GPIO_Init>

	// Configure PA3 as USART2_RX
	usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000aac:	2303      	movs	r3, #3
 8000aae:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart2_gpio);
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fc58 	bl	8000368 <GPIO_Init>
}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <__io_putchar>:
	for(uint32_t i=0;i<500000;i++);
}

// Redirect low-level printf output to USART2
int __io_putchar(int ch)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	// Send one character through USART2
	USART_SendData(&usart2_handle, (uint8_t*)&ch, 1);
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4804      	ldr	r0, [pc, #16]	@ (8000ae4 <__io_putchar+0x20>)
 8000ad4:	f7ff ff27 	bl	8000926 <USART_SendData>
	return(ch);   // Return the character sent
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000078 	.word	0x20000078

08000ae8 <Led_Init>:

GPIO_Handle_t GpioLed;   // GPIO handle structures for LED and Button (Button unused here)

void Led_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0

		// Clear the structures (initialize to zero)
		memset(&GpioLed,0,sizeof(GpioLed));
 8000aec:	220c      	movs	r2, #12
 8000aee:	2100      	movs	r1, #0
 8000af0:	480f      	ldr	r0, [pc, #60]	@ (8000b30 <Led_Init+0x48>)
 8000af2:	f000 fbc3 	bl	800127c <memset>

		// Configure LED pin (PA5) as output
		GpioLed.pGPIOx = GPIOA;                           // Use GPIO Port A
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <Led_Init+0x48>)
 8000af8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000afc:	601a      	str	r2, [r3, #0]
		GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;   // Select pin 5
 8000afe:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <Led_Init+0x48>)
 8000b00:	2205      	movs	r2, #5
 8000b02:	711a      	strb	r2, [r3, #4]
		GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;     // Set as output mode
 8000b04:	4b0a      	ldr	r3, [pc, #40]	@ (8000b30 <Led_Init+0x48>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	715a      	strb	r2, [r3, #5]
		GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;  // Set speed to fast
 8000b0a:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <Led_Init+0x48>)
 8000b0c:	2202      	movs	r2, #2
 8000b0e:	719a      	strb	r2, [r3, #6]
		GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP; // Output type = Push-pull
 8000b10:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <Led_Init+0x48>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	721a      	strb	r2, [r3, #8]
		GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;  // Enable internal pull-up
 8000b16:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <Led_Init+0x48>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	71da      	strb	r2, [r3, #7]

		// Enable clock for GPIOA
		GPIO_PeriClockControl(GPIOA, ENABLE);
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b22:	f7ff fb53 	bl	80001cc <GPIO_PeriClockControl>

		// Initialize GPIO with above configuration
		GPIO_Init(&GpioLed);
 8000b26:	4802      	ldr	r0, [pc, #8]	@ (8000b30 <Led_Init+0x48>)
 8000b28:	f7ff fc1e 	bl	8000368 <GPIO_Init>

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	2000009c 	.word	0x2000009c

08000b34 <main>:

int main()
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	USART2_GPIOInit();                        // Initialize USART2 GPIO pins (PA2=TX, PA3=RX)
 8000b38:	f7ff ff96 	bl	8000a68 <USART2_GPIOInit>
	USART2_Init();                            // Configure USART2
 8000b3c:	f7ff ff72 	bl	8000a24 <USART2_Init>
	USART_PeripheralControl(USART2, ENABLE);  // Enable USART2 peripheral
 8000b40:	2101      	movs	r1, #1
 8000b42:	4811      	ldr	r0, [pc, #68]	@ (8000b88 <main+0x54>)
 8000b44:	f7ff ff3d 	bl	80009c2 <USART_PeripheralControl>
	Led_Init();                 // Initialize the LED
 8000b48:	f7ff ffce 	bl	8000ae8 <Led_Init>
	timer2_1hz_init();          // Initialize Timer2 to generate 1 Hz update events
 8000b4c:	f7ff fdc4 	bl	80006d8 <timer2_1hz_init>

	while(1)
	{
	    // Wait until the update interrupt flag (UIF) is set
	    while(!(TIM2->SR & SR_UIF));
 8000b50:	bf00      	nop
 8000b52:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b56:	691b      	ldr	r3, [r3, #16]
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d0f8      	beq.n	8000b52 <main+0x1e>

	    // Clear the update interrupt flag
	    TIM2->SR &= ~(SR_UIF);
 8000b60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b64:	691b      	ldr	r3, [r3, #16]
 8000b66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b6a:	f023 0301 	bic.w	r3, r3, #1
 8000b6e:	6113      	str	r3, [r2, #16]

	    // Toggle the LED (connected to GPIO pin 5)
	    GpioLed.pGPIOx->ODR ^= (1 << 5);
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <main+0x58>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	695a      	ldr	r2, [r3, #20]
 8000b76:	4b05      	ldr	r3, [pc, #20]	@ (8000b8c <main+0x58>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f082 0220 	eor.w	r2, r2, #32
 8000b7e:	615a      	str	r2, [r3, #20]

	    // Print a debug message
	    printf("One Second Elapsed\r\n");
 8000b80:	4803      	ldr	r0, [pc, #12]	@ (8000b90 <main+0x5c>)
 8000b82:	f000 fa9b 	bl	80010bc <puts>
	    while(!(TIM2->SR & SR_UIF));
 8000b86:	e7e3      	b.n	8000b50 <main+0x1c>
 8000b88:	40004400 	.word	0x40004400
 8000b8c:	2000009c 	.word	0x2000009c
 8000b90:	080016a0 	.word	0x080016a0

08000b94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	e00a      	b.n	8000bbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ba6:	f3af 8000 	nop.w
 8000baa:	4601      	mov	r1, r0
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	60ba      	str	r2, [r7, #8]
 8000bb2:	b2ca      	uxtb	r2, r1
 8000bb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697a      	ldr	r2, [r7, #20]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	dbf0      	blt.n	8000ba6 <_read+0x12>
  }

  return len;
 8000bc4:	687b      	ldr	r3, [r7, #4]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b086      	sub	sp, #24
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	e009      	b.n	8000bf4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	60ba      	str	r2, [r7, #8]
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff6b 	bl	8000ac4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697a      	ldr	r2, [r7, #20]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	dbf1      	blt.n	8000be0 <_write+0x12>
  }
  return len;
 8000bfc:	687b      	ldr	r3, [r7, #4]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <_close>:

int _close(int file)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_isatty>:

int _isatty(int file)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c78:	4a14      	ldr	r2, [pc, #80]	@ (8000ccc <_sbrk+0x5c>)
 8000c7a:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <_sbrk+0x60>)
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c84:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d102      	bne.n	8000c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <_sbrk+0x64>)
 8000c8e:	4a12      	ldr	r2, [pc, #72]	@ (8000cd8 <_sbrk+0x68>)
 8000c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c92:	4b10      	ldr	r3, [pc, #64]	@ (8000cd4 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d207      	bcs.n	8000cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca0:	f000 fb4a 	bl	8001338 <__errno>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cae:	e009      	b.n	8000cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb6:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4a05      	ldr	r2, [pc, #20]	@ (8000cd4 <_sbrk+0x64>)
 8000cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20018000 	.word	0x20018000
 8000cd0:	00000400 	.word	0x00000400
 8000cd4:	200000a8 	.word	0x200000a8
 8000cd8:	200001f8 	.word	0x200001f8

08000cdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cdc:	480d      	ldr	r0, [pc, #52]	@ (8000d14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cde:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ce0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce4:	480c      	ldr	r0, [pc, #48]	@ (8000d18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce6:	490d      	ldr	r1, [pc, #52]	@ (8000d1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d20 <LoopForever+0xe>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cec:	e002      	b.n	8000cf4 <LoopCopyDataInit>

08000cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf2:	3304      	adds	r3, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf8:	d3f9      	bcc.n	8000cee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000d24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000d28 <LoopForever+0x16>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d00:	e001      	b.n	8000d06 <LoopFillZerobss>

08000d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d04:	3204      	adds	r2, #4

08000d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d08:	d3fb      	bcc.n	8000d02 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000d0a:	f000 fb1b 	bl	8001344 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000d0e:	f7ff ff11 	bl	8000b34 <main>

08000d12 <LoopForever>:

LoopForever:
  b LoopForever
 8000d12:	e7fe      	b.n	8000d12 <LoopForever>
  ldr   r0, =_estack
 8000d14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d1c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d20:	080016bc 	.word	0x080016bc
  ldr r2, =_sbss
 8000d24:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d28:	200001f8 	.word	0x200001f8

08000d2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC1_2_IRQHandler>
	...

08000d30 <sbrk_aligned>:
 8000d30:	b570      	push	{r4, r5, r6, lr}
 8000d32:	4e0f      	ldr	r6, [pc, #60]	@ (8000d70 <sbrk_aligned+0x40>)
 8000d34:	460c      	mov	r4, r1
 8000d36:	6831      	ldr	r1, [r6, #0]
 8000d38:	4605      	mov	r5, r0
 8000d3a:	b911      	cbnz	r1, 8000d42 <sbrk_aligned+0x12>
 8000d3c:	f000 fada 	bl	80012f4 <_sbrk_r>
 8000d40:	6030      	str	r0, [r6, #0]
 8000d42:	4621      	mov	r1, r4
 8000d44:	4628      	mov	r0, r5
 8000d46:	f000 fad5 	bl	80012f4 <_sbrk_r>
 8000d4a:	1c43      	adds	r3, r0, #1
 8000d4c:	d103      	bne.n	8000d56 <sbrk_aligned+0x26>
 8000d4e:	f04f 34ff 	mov.w	r4, #4294967295
 8000d52:	4620      	mov	r0, r4
 8000d54:	bd70      	pop	{r4, r5, r6, pc}
 8000d56:	1cc4      	adds	r4, r0, #3
 8000d58:	f024 0403 	bic.w	r4, r4, #3
 8000d5c:	42a0      	cmp	r0, r4
 8000d5e:	d0f8      	beq.n	8000d52 <sbrk_aligned+0x22>
 8000d60:	1a21      	subs	r1, r4, r0
 8000d62:	4628      	mov	r0, r5
 8000d64:	f000 fac6 	bl	80012f4 <_sbrk_r>
 8000d68:	3001      	adds	r0, #1
 8000d6a:	d1f2      	bne.n	8000d52 <sbrk_aligned+0x22>
 8000d6c:	e7ef      	b.n	8000d4e <sbrk_aligned+0x1e>
 8000d6e:	bf00      	nop
 8000d70:	200000ac 	.word	0x200000ac

08000d74 <_malloc_r>:
 8000d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d78:	1ccd      	adds	r5, r1, #3
 8000d7a:	f025 0503 	bic.w	r5, r5, #3
 8000d7e:	3508      	adds	r5, #8
 8000d80:	2d0c      	cmp	r5, #12
 8000d82:	bf38      	it	cc
 8000d84:	250c      	movcc	r5, #12
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	4606      	mov	r6, r0
 8000d8a:	db01      	blt.n	8000d90 <_malloc_r+0x1c>
 8000d8c:	42a9      	cmp	r1, r5
 8000d8e:	d904      	bls.n	8000d9a <_malloc_r+0x26>
 8000d90:	230c      	movs	r3, #12
 8000d92:	6033      	str	r3, [r6, #0]
 8000d94:	2000      	movs	r0, #0
 8000d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000e70 <_malloc_r+0xfc>
 8000d9e:	f000 f869 	bl	8000e74 <__malloc_lock>
 8000da2:	f8d8 3000 	ldr.w	r3, [r8]
 8000da6:	461c      	mov	r4, r3
 8000da8:	bb44      	cbnz	r4, 8000dfc <_malloc_r+0x88>
 8000daa:	4629      	mov	r1, r5
 8000dac:	4630      	mov	r0, r6
 8000dae:	f7ff ffbf 	bl	8000d30 <sbrk_aligned>
 8000db2:	1c43      	adds	r3, r0, #1
 8000db4:	4604      	mov	r4, r0
 8000db6:	d158      	bne.n	8000e6a <_malloc_r+0xf6>
 8000db8:	f8d8 4000 	ldr.w	r4, [r8]
 8000dbc:	4627      	mov	r7, r4
 8000dbe:	2f00      	cmp	r7, #0
 8000dc0:	d143      	bne.n	8000e4a <_malloc_r+0xd6>
 8000dc2:	2c00      	cmp	r4, #0
 8000dc4:	d04b      	beq.n	8000e5e <_malloc_r+0xea>
 8000dc6:	6823      	ldr	r3, [r4, #0]
 8000dc8:	4639      	mov	r1, r7
 8000dca:	4630      	mov	r0, r6
 8000dcc:	eb04 0903 	add.w	r9, r4, r3
 8000dd0:	f000 fa90 	bl	80012f4 <_sbrk_r>
 8000dd4:	4581      	cmp	r9, r0
 8000dd6:	d142      	bne.n	8000e5e <_malloc_r+0xea>
 8000dd8:	6821      	ldr	r1, [r4, #0]
 8000dda:	1a6d      	subs	r5, r5, r1
 8000ddc:	4629      	mov	r1, r5
 8000dde:	4630      	mov	r0, r6
 8000de0:	f7ff ffa6 	bl	8000d30 <sbrk_aligned>
 8000de4:	3001      	adds	r0, #1
 8000de6:	d03a      	beq.n	8000e5e <_malloc_r+0xea>
 8000de8:	6823      	ldr	r3, [r4, #0]
 8000dea:	442b      	add	r3, r5
 8000dec:	6023      	str	r3, [r4, #0]
 8000dee:	f8d8 3000 	ldr.w	r3, [r8]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	bb62      	cbnz	r2, 8000e50 <_malloc_r+0xdc>
 8000df6:	f8c8 7000 	str.w	r7, [r8]
 8000dfa:	e00f      	b.n	8000e1c <_malloc_r+0xa8>
 8000dfc:	6822      	ldr	r2, [r4, #0]
 8000dfe:	1b52      	subs	r2, r2, r5
 8000e00:	d420      	bmi.n	8000e44 <_malloc_r+0xd0>
 8000e02:	2a0b      	cmp	r2, #11
 8000e04:	d917      	bls.n	8000e36 <_malloc_r+0xc2>
 8000e06:	1961      	adds	r1, r4, r5
 8000e08:	42a3      	cmp	r3, r4
 8000e0a:	6025      	str	r5, [r4, #0]
 8000e0c:	bf18      	it	ne
 8000e0e:	6059      	strne	r1, [r3, #4]
 8000e10:	6863      	ldr	r3, [r4, #4]
 8000e12:	bf08      	it	eq
 8000e14:	f8c8 1000 	streq.w	r1, [r8]
 8000e18:	5162      	str	r2, [r4, r5]
 8000e1a:	604b      	str	r3, [r1, #4]
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	f000 f82f 	bl	8000e80 <__malloc_unlock>
 8000e22:	f104 000b 	add.w	r0, r4, #11
 8000e26:	1d23      	adds	r3, r4, #4
 8000e28:	f020 0007 	bic.w	r0, r0, #7
 8000e2c:	1ac2      	subs	r2, r0, r3
 8000e2e:	bf1c      	itt	ne
 8000e30:	1a1b      	subne	r3, r3, r0
 8000e32:	50a3      	strne	r3, [r4, r2]
 8000e34:	e7af      	b.n	8000d96 <_malloc_r+0x22>
 8000e36:	6862      	ldr	r2, [r4, #4]
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	bf0c      	ite	eq
 8000e3c:	f8c8 2000 	streq.w	r2, [r8]
 8000e40:	605a      	strne	r2, [r3, #4]
 8000e42:	e7eb      	b.n	8000e1c <_malloc_r+0xa8>
 8000e44:	4623      	mov	r3, r4
 8000e46:	6864      	ldr	r4, [r4, #4]
 8000e48:	e7ae      	b.n	8000da8 <_malloc_r+0x34>
 8000e4a:	463c      	mov	r4, r7
 8000e4c:	687f      	ldr	r7, [r7, #4]
 8000e4e:	e7b6      	b.n	8000dbe <_malloc_r+0x4a>
 8000e50:	461a      	mov	r2, r3
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	42a3      	cmp	r3, r4
 8000e56:	d1fb      	bne.n	8000e50 <_malloc_r+0xdc>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	6053      	str	r3, [r2, #4]
 8000e5c:	e7de      	b.n	8000e1c <_malloc_r+0xa8>
 8000e5e:	230c      	movs	r3, #12
 8000e60:	6033      	str	r3, [r6, #0]
 8000e62:	4630      	mov	r0, r6
 8000e64:	f000 f80c 	bl	8000e80 <__malloc_unlock>
 8000e68:	e794      	b.n	8000d94 <_malloc_r+0x20>
 8000e6a:	6005      	str	r5, [r0, #0]
 8000e6c:	e7d6      	b.n	8000e1c <_malloc_r+0xa8>
 8000e6e:	bf00      	nop
 8000e70:	200000b0 	.word	0x200000b0

08000e74 <__malloc_lock>:
 8000e74:	4801      	ldr	r0, [pc, #4]	@ (8000e7c <__malloc_lock+0x8>)
 8000e76:	f000 ba8a 	b.w	800138e <__retarget_lock_acquire_recursive>
 8000e7a:	bf00      	nop
 8000e7c:	200001f4 	.word	0x200001f4

08000e80 <__malloc_unlock>:
 8000e80:	4801      	ldr	r0, [pc, #4]	@ (8000e88 <__malloc_unlock+0x8>)
 8000e82:	f000 ba85 	b.w	8001390 <__retarget_lock_release_recursive>
 8000e86:	bf00      	nop
 8000e88:	200001f4 	.word	0x200001f4

08000e8c <std>:
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	b510      	push	{r4, lr}
 8000e90:	4604      	mov	r4, r0
 8000e92:	e9c0 3300 	strd	r3, r3, [r0]
 8000e96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e9a:	6083      	str	r3, [r0, #8]
 8000e9c:	8181      	strh	r1, [r0, #12]
 8000e9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000ea0:	81c2      	strh	r2, [r0, #14]
 8000ea2:	6183      	str	r3, [r0, #24]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	2208      	movs	r2, #8
 8000ea8:	305c      	adds	r0, #92	@ 0x5c
 8000eaa:	f000 f9e7 	bl	800127c <memset>
 8000eae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <std+0x58>)
 8000eb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <std+0x5c>)
 8000eb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <std+0x60>)
 8000eb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000eba:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef0 <std+0x64>)
 8000ebc:	6323      	str	r3, [r4, #48]	@ 0x30
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef4 <std+0x68>)
 8000ec0:	6224      	str	r4, [r4, #32]
 8000ec2:	429c      	cmp	r4, r3
 8000ec4:	d006      	beq.n	8000ed4 <std+0x48>
 8000ec6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000eca:	4294      	cmp	r4, r2
 8000ecc:	d002      	beq.n	8000ed4 <std+0x48>
 8000ece:	33d0      	adds	r3, #208	@ 0xd0
 8000ed0:	429c      	cmp	r4, r3
 8000ed2:	d105      	bne.n	8000ee0 <std+0x54>
 8000ed4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000edc:	f000 ba56 	b.w	800138c <__retarget_lock_init_recursive>
 8000ee0:	bd10      	pop	{r4, pc}
 8000ee2:	bf00      	nop
 8000ee4:	080010cd 	.word	0x080010cd
 8000ee8:	080010ef 	.word	0x080010ef
 8000eec:	08001127 	.word	0x08001127
 8000ef0:	0800114b 	.word	0x0800114b
 8000ef4:	200000b4 	.word	0x200000b4

08000ef8 <stdio_exit_handler>:
 8000ef8:	4a02      	ldr	r2, [pc, #8]	@ (8000f04 <stdio_exit_handler+0xc>)
 8000efa:	4903      	ldr	r1, [pc, #12]	@ (8000f08 <stdio_exit_handler+0x10>)
 8000efc:	4803      	ldr	r0, [pc, #12]	@ (8000f0c <stdio_exit_handler+0x14>)
 8000efe:	f000 b869 	b.w	8000fd4 <_fwalk_sglue>
 8000f02:	bf00      	nop
 8000f04:	20000000 	.word	0x20000000
 8000f08:	08001531 	.word	0x08001531
 8000f0c:	20000010 	.word	0x20000010

08000f10 <cleanup_stdio>:
 8000f10:	6841      	ldr	r1, [r0, #4]
 8000f12:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <cleanup_stdio+0x34>)
 8000f14:	4299      	cmp	r1, r3
 8000f16:	b510      	push	{r4, lr}
 8000f18:	4604      	mov	r4, r0
 8000f1a:	d001      	beq.n	8000f20 <cleanup_stdio+0x10>
 8000f1c:	f000 fb08 	bl	8001530 <_fflush_r>
 8000f20:	68a1      	ldr	r1, [r4, #8]
 8000f22:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <cleanup_stdio+0x38>)
 8000f24:	4299      	cmp	r1, r3
 8000f26:	d002      	beq.n	8000f2e <cleanup_stdio+0x1e>
 8000f28:	4620      	mov	r0, r4
 8000f2a:	f000 fb01 	bl	8001530 <_fflush_r>
 8000f2e:	68e1      	ldr	r1, [r4, #12]
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <cleanup_stdio+0x3c>)
 8000f32:	4299      	cmp	r1, r3
 8000f34:	d004      	beq.n	8000f40 <cleanup_stdio+0x30>
 8000f36:	4620      	mov	r0, r4
 8000f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f3c:	f000 baf8 	b.w	8001530 <_fflush_r>
 8000f40:	bd10      	pop	{r4, pc}
 8000f42:	bf00      	nop
 8000f44:	200000b4 	.word	0x200000b4
 8000f48:	2000011c 	.word	0x2000011c
 8000f4c:	20000184 	.word	0x20000184

08000f50 <global_stdio_init.part.0>:
 8000f50:	b510      	push	{r4, lr}
 8000f52:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <global_stdio_init.part.0+0x30>)
 8000f54:	4c0b      	ldr	r4, [pc, #44]	@ (8000f84 <global_stdio_init.part.0+0x34>)
 8000f56:	4a0c      	ldr	r2, [pc, #48]	@ (8000f88 <global_stdio_init.part.0+0x38>)
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2104      	movs	r1, #4
 8000f60:	f7ff ff94 	bl	8000e8c <std>
 8000f64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2109      	movs	r1, #9
 8000f6c:	f7ff ff8e 	bl	8000e8c <std>
 8000f70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000f74:	2202      	movs	r2, #2
 8000f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f7a:	2112      	movs	r1, #18
 8000f7c:	f7ff bf86 	b.w	8000e8c <std>
 8000f80:	200001ec 	.word	0x200001ec
 8000f84:	200000b4 	.word	0x200000b4
 8000f88:	08000ef9 	.word	0x08000ef9

08000f8c <__sfp_lock_acquire>:
 8000f8c:	4801      	ldr	r0, [pc, #4]	@ (8000f94 <__sfp_lock_acquire+0x8>)
 8000f8e:	f000 b9fe 	b.w	800138e <__retarget_lock_acquire_recursive>
 8000f92:	bf00      	nop
 8000f94:	200001f5 	.word	0x200001f5

08000f98 <__sfp_lock_release>:
 8000f98:	4801      	ldr	r0, [pc, #4]	@ (8000fa0 <__sfp_lock_release+0x8>)
 8000f9a:	f000 b9f9 	b.w	8001390 <__retarget_lock_release_recursive>
 8000f9e:	bf00      	nop
 8000fa0:	200001f5 	.word	0x200001f5

08000fa4 <__sinit>:
 8000fa4:	b510      	push	{r4, lr}
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	f7ff fff0 	bl	8000f8c <__sfp_lock_acquire>
 8000fac:	6a23      	ldr	r3, [r4, #32]
 8000fae:	b11b      	cbz	r3, 8000fb8 <__sinit+0x14>
 8000fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fb4:	f7ff bff0 	b.w	8000f98 <__sfp_lock_release>
 8000fb8:	4b04      	ldr	r3, [pc, #16]	@ (8000fcc <__sinit+0x28>)
 8000fba:	6223      	str	r3, [r4, #32]
 8000fbc:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <__sinit+0x2c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1f5      	bne.n	8000fb0 <__sinit+0xc>
 8000fc4:	f7ff ffc4 	bl	8000f50 <global_stdio_init.part.0>
 8000fc8:	e7f2      	b.n	8000fb0 <__sinit+0xc>
 8000fca:	bf00      	nop
 8000fcc:	08000f11 	.word	0x08000f11
 8000fd0:	200001ec 	.word	0x200001ec

08000fd4 <_fwalk_sglue>:
 8000fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fd8:	4607      	mov	r7, r0
 8000fda:	4688      	mov	r8, r1
 8000fdc:	4614      	mov	r4, r2
 8000fde:	2600      	movs	r6, #0
 8000fe0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000fe4:	f1b9 0901 	subs.w	r9, r9, #1
 8000fe8:	d505      	bpl.n	8000ff6 <_fwalk_sglue+0x22>
 8000fea:	6824      	ldr	r4, [r4, #0]
 8000fec:	2c00      	cmp	r4, #0
 8000fee:	d1f7      	bne.n	8000fe0 <_fwalk_sglue+0xc>
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ff6:	89ab      	ldrh	r3, [r5, #12]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d907      	bls.n	800100c <_fwalk_sglue+0x38>
 8000ffc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001000:	3301      	adds	r3, #1
 8001002:	d003      	beq.n	800100c <_fwalk_sglue+0x38>
 8001004:	4629      	mov	r1, r5
 8001006:	4638      	mov	r0, r7
 8001008:	47c0      	blx	r8
 800100a:	4306      	orrs	r6, r0
 800100c:	3568      	adds	r5, #104	@ 0x68
 800100e:	e7e9      	b.n	8000fe4 <_fwalk_sglue+0x10>

08001010 <_puts_r>:
 8001010:	6a03      	ldr	r3, [r0, #32]
 8001012:	b570      	push	{r4, r5, r6, lr}
 8001014:	6884      	ldr	r4, [r0, #8]
 8001016:	4605      	mov	r5, r0
 8001018:	460e      	mov	r6, r1
 800101a:	b90b      	cbnz	r3, 8001020 <_puts_r+0x10>
 800101c:	f7ff ffc2 	bl	8000fa4 <__sinit>
 8001020:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001022:	07db      	lsls	r3, r3, #31
 8001024:	d405      	bmi.n	8001032 <_puts_r+0x22>
 8001026:	89a3      	ldrh	r3, [r4, #12]
 8001028:	0598      	lsls	r0, r3, #22
 800102a:	d402      	bmi.n	8001032 <_puts_r+0x22>
 800102c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800102e:	f000 f9ae 	bl	800138e <__retarget_lock_acquire_recursive>
 8001032:	89a3      	ldrh	r3, [r4, #12]
 8001034:	0719      	lsls	r1, r3, #28
 8001036:	d502      	bpl.n	800103e <_puts_r+0x2e>
 8001038:	6923      	ldr	r3, [r4, #16]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d135      	bne.n	80010aa <_puts_r+0x9a>
 800103e:	4621      	mov	r1, r4
 8001040:	4628      	mov	r0, r5
 8001042:	f000 f8c5 	bl	80011d0 <__swsetup_r>
 8001046:	b380      	cbz	r0, 80010aa <_puts_r+0x9a>
 8001048:	f04f 35ff 	mov.w	r5, #4294967295
 800104c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800104e:	07da      	lsls	r2, r3, #31
 8001050:	d405      	bmi.n	800105e <_puts_r+0x4e>
 8001052:	89a3      	ldrh	r3, [r4, #12]
 8001054:	059b      	lsls	r3, r3, #22
 8001056:	d402      	bmi.n	800105e <_puts_r+0x4e>
 8001058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800105a:	f000 f999 	bl	8001390 <__retarget_lock_release_recursive>
 800105e:	4628      	mov	r0, r5
 8001060:	bd70      	pop	{r4, r5, r6, pc}
 8001062:	2b00      	cmp	r3, #0
 8001064:	da04      	bge.n	8001070 <_puts_r+0x60>
 8001066:	69a2      	ldr	r2, [r4, #24]
 8001068:	429a      	cmp	r2, r3
 800106a:	dc17      	bgt.n	800109c <_puts_r+0x8c>
 800106c:	290a      	cmp	r1, #10
 800106e:	d015      	beq.n	800109c <_puts_r+0x8c>
 8001070:	6823      	ldr	r3, [r4, #0]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	6022      	str	r2, [r4, #0]
 8001076:	7019      	strb	r1, [r3, #0]
 8001078:	68a3      	ldr	r3, [r4, #8]
 800107a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800107e:	3b01      	subs	r3, #1
 8001080:	60a3      	str	r3, [r4, #8]
 8001082:	2900      	cmp	r1, #0
 8001084:	d1ed      	bne.n	8001062 <_puts_r+0x52>
 8001086:	2b00      	cmp	r3, #0
 8001088:	da11      	bge.n	80010ae <_puts_r+0x9e>
 800108a:	4622      	mov	r2, r4
 800108c:	210a      	movs	r1, #10
 800108e:	4628      	mov	r0, r5
 8001090:	f000 f85f 	bl	8001152 <__swbuf_r>
 8001094:	3001      	adds	r0, #1
 8001096:	d0d7      	beq.n	8001048 <_puts_r+0x38>
 8001098:	250a      	movs	r5, #10
 800109a:	e7d7      	b.n	800104c <_puts_r+0x3c>
 800109c:	4622      	mov	r2, r4
 800109e:	4628      	mov	r0, r5
 80010a0:	f000 f857 	bl	8001152 <__swbuf_r>
 80010a4:	3001      	adds	r0, #1
 80010a6:	d1e7      	bne.n	8001078 <_puts_r+0x68>
 80010a8:	e7ce      	b.n	8001048 <_puts_r+0x38>
 80010aa:	3e01      	subs	r6, #1
 80010ac:	e7e4      	b.n	8001078 <_puts_r+0x68>
 80010ae:	6823      	ldr	r3, [r4, #0]
 80010b0:	1c5a      	adds	r2, r3, #1
 80010b2:	6022      	str	r2, [r4, #0]
 80010b4:	220a      	movs	r2, #10
 80010b6:	701a      	strb	r2, [r3, #0]
 80010b8:	e7ee      	b.n	8001098 <_puts_r+0x88>
	...

080010bc <puts>:
 80010bc:	4b02      	ldr	r3, [pc, #8]	@ (80010c8 <puts+0xc>)
 80010be:	4601      	mov	r1, r0
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	f7ff bfa5 	b.w	8001010 <_puts_r>
 80010c6:	bf00      	nop
 80010c8:	2000000c 	.word	0x2000000c

080010cc <__sread>:
 80010cc:	b510      	push	{r4, lr}
 80010ce:	460c      	mov	r4, r1
 80010d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010d4:	f000 f8fc 	bl	80012d0 <_read_r>
 80010d8:	2800      	cmp	r0, #0
 80010da:	bfab      	itete	ge
 80010dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80010de:	89a3      	ldrhlt	r3, [r4, #12]
 80010e0:	181b      	addge	r3, r3, r0
 80010e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80010e6:	bfac      	ite	ge
 80010e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80010ea:	81a3      	strhlt	r3, [r4, #12]
 80010ec:	bd10      	pop	{r4, pc}

080010ee <__swrite>:
 80010ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010f2:	461f      	mov	r7, r3
 80010f4:	898b      	ldrh	r3, [r1, #12]
 80010f6:	05db      	lsls	r3, r3, #23
 80010f8:	4605      	mov	r5, r0
 80010fa:	460c      	mov	r4, r1
 80010fc:	4616      	mov	r6, r2
 80010fe:	d505      	bpl.n	800110c <__swrite+0x1e>
 8001100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001104:	2302      	movs	r3, #2
 8001106:	2200      	movs	r2, #0
 8001108:	f000 f8d0 	bl	80012ac <_lseek_r>
 800110c:	89a3      	ldrh	r3, [r4, #12]
 800110e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001112:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001116:	81a3      	strh	r3, [r4, #12]
 8001118:	4632      	mov	r2, r6
 800111a:	463b      	mov	r3, r7
 800111c:	4628      	mov	r0, r5
 800111e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001122:	f000 b8f7 	b.w	8001314 <_write_r>

08001126 <__sseek>:
 8001126:	b510      	push	{r4, lr}
 8001128:	460c      	mov	r4, r1
 800112a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800112e:	f000 f8bd 	bl	80012ac <_lseek_r>
 8001132:	1c43      	adds	r3, r0, #1
 8001134:	89a3      	ldrh	r3, [r4, #12]
 8001136:	bf15      	itete	ne
 8001138:	6560      	strne	r0, [r4, #84]	@ 0x54
 800113a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800113e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001142:	81a3      	strheq	r3, [r4, #12]
 8001144:	bf18      	it	ne
 8001146:	81a3      	strhne	r3, [r4, #12]
 8001148:	bd10      	pop	{r4, pc}

0800114a <__sclose>:
 800114a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800114e:	f000 b89d 	b.w	800128c <_close_r>

08001152 <__swbuf_r>:
 8001152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001154:	460e      	mov	r6, r1
 8001156:	4614      	mov	r4, r2
 8001158:	4605      	mov	r5, r0
 800115a:	b118      	cbz	r0, 8001164 <__swbuf_r+0x12>
 800115c:	6a03      	ldr	r3, [r0, #32]
 800115e:	b90b      	cbnz	r3, 8001164 <__swbuf_r+0x12>
 8001160:	f7ff ff20 	bl	8000fa4 <__sinit>
 8001164:	69a3      	ldr	r3, [r4, #24]
 8001166:	60a3      	str	r3, [r4, #8]
 8001168:	89a3      	ldrh	r3, [r4, #12]
 800116a:	071a      	lsls	r2, r3, #28
 800116c:	d501      	bpl.n	8001172 <__swbuf_r+0x20>
 800116e:	6923      	ldr	r3, [r4, #16]
 8001170:	b943      	cbnz	r3, 8001184 <__swbuf_r+0x32>
 8001172:	4621      	mov	r1, r4
 8001174:	4628      	mov	r0, r5
 8001176:	f000 f82b 	bl	80011d0 <__swsetup_r>
 800117a:	b118      	cbz	r0, 8001184 <__swbuf_r+0x32>
 800117c:	f04f 37ff 	mov.w	r7, #4294967295
 8001180:	4638      	mov	r0, r7
 8001182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	6922      	ldr	r2, [r4, #16]
 8001188:	1a98      	subs	r0, r3, r2
 800118a:	6963      	ldr	r3, [r4, #20]
 800118c:	b2f6      	uxtb	r6, r6
 800118e:	4283      	cmp	r3, r0
 8001190:	4637      	mov	r7, r6
 8001192:	dc05      	bgt.n	80011a0 <__swbuf_r+0x4e>
 8001194:	4621      	mov	r1, r4
 8001196:	4628      	mov	r0, r5
 8001198:	f000 f9ca 	bl	8001530 <_fflush_r>
 800119c:	2800      	cmp	r0, #0
 800119e:	d1ed      	bne.n	800117c <__swbuf_r+0x2a>
 80011a0:	68a3      	ldr	r3, [r4, #8]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	60a3      	str	r3, [r4, #8]
 80011a6:	6823      	ldr	r3, [r4, #0]
 80011a8:	1c5a      	adds	r2, r3, #1
 80011aa:	6022      	str	r2, [r4, #0]
 80011ac:	701e      	strb	r6, [r3, #0]
 80011ae:	6962      	ldr	r2, [r4, #20]
 80011b0:	1c43      	adds	r3, r0, #1
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d004      	beq.n	80011c0 <__swbuf_r+0x6e>
 80011b6:	89a3      	ldrh	r3, [r4, #12]
 80011b8:	07db      	lsls	r3, r3, #31
 80011ba:	d5e1      	bpl.n	8001180 <__swbuf_r+0x2e>
 80011bc:	2e0a      	cmp	r6, #10
 80011be:	d1df      	bne.n	8001180 <__swbuf_r+0x2e>
 80011c0:	4621      	mov	r1, r4
 80011c2:	4628      	mov	r0, r5
 80011c4:	f000 f9b4 	bl	8001530 <_fflush_r>
 80011c8:	2800      	cmp	r0, #0
 80011ca:	d0d9      	beq.n	8001180 <__swbuf_r+0x2e>
 80011cc:	e7d6      	b.n	800117c <__swbuf_r+0x2a>
	...

080011d0 <__swsetup_r>:
 80011d0:	b538      	push	{r3, r4, r5, lr}
 80011d2:	4b29      	ldr	r3, [pc, #164]	@ (8001278 <__swsetup_r+0xa8>)
 80011d4:	4605      	mov	r5, r0
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	460c      	mov	r4, r1
 80011da:	b118      	cbz	r0, 80011e4 <__swsetup_r+0x14>
 80011dc:	6a03      	ldr	r3, [r0, #32]
 80011de:	b90b      	cbnz	r3, 80011e4 <__swsetup_r+0x14>
 80011e0:	f7ff fee0 	bl	8000fa4 <__sinit>
 80011e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011e8:	0719      	lsls	r1, r3, #28
 80011ea:	d422      	bmi.n	8001232 <__swsetup_r+0x62>
 80011ec:	06da      	lsls	r2, r3, #27
 80011ee:	d407      	bmi.n	8001200 <__swsetup_r+0x30>
 80011f0:	2209      	movs	r2, #9
 80011f2:	602a      	str	r2, [r5, #0]
 80011f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011f8:	81a3      	strh	r3, [r4, #12]
 80011fa:	f04f 30ff 	mov.w	r0, #4294967295
 80011fe:	e033      	b.n	8001268 <__swsetup_r+0x98>
 8001200:	0758      	lsls	r0, r3, #29
 8001202:	d512      	bpl.n	800122a <__swsetup_r+0x5a>
 8001204:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001206:	b141      	cbz	r1, 800121a <__swsetup_r+0x4a>
 8001208:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800120c:	4299      	cmp	r1, r3
 800120e:	d002      	beq.n	8001216 <__swsetup_r+0x46>
 8001210:	4628      	mov	r0, r5
 8001212:	f000 f8bf 	bl	8001394 <_free_r>
 8001216:	2300      	movs	r3, #0
 8001218:	6363      	str	r3, [r4, #52]	@ 0x34
 800121a:	89a3      	ldrh	r3, [r4, #12]
 800121c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001220:	81a3      	strh	r3, [r4, #12]
 8001222:	2300      	movs	r3, #0
 8001224:	6063      	str	r3, [r4, #4]
 8001226:	6923      	ldr	r3, [r4, #16]
 8001228:	6023      	str	r3, [r4, #0]
 800122a:	89a3      	ldrh	r3, [r4, #12]
 800122c:	f043 0308 	orr.w	r3, r3, #8
 8001230:	81a3      	strh	r3, [r4, #12]
 8001232:	6923      	ldr	r3, [r4, #16]
 8001234:	b94b      	cbnz	r3, 800124a <__swsetup_r+0x7a>
 8001236:	89a3      	ldrh	r3, [r4, #12]
 8001238:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800123c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001240:	d003      	beq.n	800124a <__swsetup_r+0x7a>
 8001242:	4621      	mov	r1, r4
 8001244:	4628      	mov	r0, r5
 8001246:	f000 f9c1 	bl	80015cc <__smakebuf_r>
 800124a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800124e:	f013 0201 	ands.w	r2, r3, #1
 8001252:	d00a      	beq.n	800126a <__swsetup_r+0x9a>
 8001254:	2200      	movs	r2, #0
 8001256:	60a2      	str	r2, [r4, #8]
 8001258:	6962      	ldr	r2, [r4, #20]
 800125a:	4252      	negs	r2, r2
 800125c:	61a2      	str	r2, [r4, #24]
 800125e:	6922      	ldr	r2, [r4, #16]
 8001260:	b942      	cbnz	r2, 8001274 <__swsetup_r+0xa4>
 8001262:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001266:	d1c5      	bne.n	80011f4 <__swsetup_r+0x24>
 8001268:	bd38      	pop	{r3, r4, r5, pc}
 800126a:	0799      	lsls	r1, r3, #30
 800126c:	bf58      	it	pl
 800126e:	6962      	ldrpl	r2, [r4, #20]
 8001270:	60a2      	str	r2, [r4, #8]
 8001272:	e7f4      	b.n	800125e <__swsetup_r+0x8e>
 8001274:	2000      	movs	r0, #0
 8001276:	e7f7      	b.n	8001268 <__swsetup_r+0x98>
 8001278:	2000000c 	.word	0x2000000c

0800127c <memset>:
 800127c:	4402      	add	r2, r0
 800127e:	4603      	mov	r3, r0
 8001280:	4293      	cmp	r3, r2
 8001282:	d100      	bne.n	8001286 <memset+0xa>
 8001284:	4770      	bx	lr
 8001286:	f803 1b01 	strb.w	r1, [r3], #1
 800128a:	e7f9      	b.n	8001280 <memset+0x4>

0800128c <_close_r>:
 800128c:	b538      	push	{r3, r4, r5, lr}
 800128e:	4d06      	ldr	r5, [pc, #24]	@ (80012a8 <_close_r+0x1c>)
 8001290:	2300      	movs	r3, #0
 8001292:	4604      	mov	r4, r0
 8001294:	4608      	mov	r0, r1
 8001296:	602b      	str	r3, [r5, #0]
 8001298:	f7ff fcb5 	bl	8000c06 <_close>
 800129c:	1c43      	adds	r3, r0, #1
 800129e:	d102      	bne.n	80012a6 <_close_r+0x1a>
 80012a0:	682b      	ldr	r3, [r5, #0]
 80012a2:	b103      	cbz	r3, 80012a6 <_close_r+0x1a>
 80012a4:	6023      	str	r3, [r4, #0]
 80012a6:	bd38      	pop	{r3, r4, r5, pc}
 80012a8:	200001f0 	.word	0x200001f0

080012ac <_lseek_r>:
 80012ac:	b538      	push	{r3, r4, r5, lr}
 80012ae:	4d07      	ldr	r5, [pc, #28]	@ (80012cc <_lseek_r+0x20>)
 80012b0:	4604      	mov	r4, r0
 80012b2:	4608      	mov	r0, r1
 80012b4:	4611      	mov	r1, r2
 80012b6:	2200      	movs	r2, #0
 80012b8:	602a      	str	r2, [r5, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	f7ff fcca 	bl	8000c54 <_lseek>
 80012c0:	1c43      	adds	r3, r0, #1
 80012c2:	d102      	bne.n	80012ca <_lseek_r+0x1e>
 80012c4:	682b      	ldr	r3, [r5, #0]
 80012c6:	b103      	cbz	r3, 80012ca <_lseek_r+0x1e>
 80012c8:	6023      	str	r3, [r4, #0]
 80012ca:	bd38      	pop	{r3, r4, r5, pc}
 80012cc:	200001f0 	.word	0x200001f0

080012d0 <_read_r>:
 80012d0:	b538      	push	{r3, r4, r5, lr}
 80012d2:	4d07      	ldr	r5, [pc, #28]	@ (80012f0 <_read_r+0x20>)
 80012d4:	4604      	mov	r4, r0
 80012d6:	4608      	mov	r0, r1
 80012d8:	4611      	mov	r1, r2
 80012da:	2200      	movs	r2, #0
 80012dc:	602a      	str	r2, [r5, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	f7ff fc58 	bl	8000b94 <_read>
 80012e4:	1c43      	adds	r3, r0, #1
 80012e6:	d102      	bne.n	80012ee <_read_r+0x1e>
 80012e8:	682b      	ldr	r3, [r5, #0]
 80012ea:	b103      	cbz	r3, 80012ee <_read_r+0x1e>
 80012ec:	6023      	str	r3, [r4, #0]
 80012ee:	bd38      	pop	{r3, r4, r5, pc}
 80012f0:	200001f0 	.word	0x200001f0

080012f4 <_sbrk_r>:
 80012f4:	b538      	push	{r3, r4, r5, lr}
 80012f6:	4d06      	ldr	r5, [pc, #24]	@ (8001310 <_sbrk_r+0x1c>)
 80012f8:	2300      	movs	r3, #0
 80012fa:	4604      	mov	r4, r0
 80012fc:	4608      	mov	r0, r1
 80012fe:	602b      	str	r3, [r5, #0]
 8001300:	f7ff fcb6 	bl	8000c70 <_sbrk>
 8001304:	1c43      	adds	r3, r0, #1
 8001306:	d102      	bne.n	800130e <_sbrk_r+0x1a>
 8001308:	682b      	ldr	r3, [r5, #0]
 800130a:	b103      	cbz	r3, 800130e <_sbrk_r+0x1a>
 800130c:	6023      	str	r3, [r4, #0]
 800130e:	bd38      	pop	{r3, r4, r5, pc}
 8001310:	200001f0 	.word	0x200001f0

08001314 <_write_r>:
 8001314:	b538      	push	{r3, r4, r5, lr}
 8001316:	4d07      	ldr	r5, [pc, #28]	@ (8001334 <_write_r+0x20>)
 8001318:	4604      	mov	r4, r0
 800131a:	4608      	mov	r0, r1
 800131c:	4611      	mov	r1, r2
 800131e:	2200      	movs	r2, #0
 8001320:	602a      	str	r2, [r5, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	f7ff fc53 	bl	8000bce <_write>
 8001328:	1c43      	adds	r3, r0, #1
 800132a:	d102      	bne.n	8001332 <_write_r+0x1e>
 800132c:	682b      	ldr	r3, [r5, #0]
 800132e:	b103      	cbz	r3, 8001332 <_write_r+0x1e>
 8001330:	6023      	str	r3, [r4, #0]
 8001332:	bd38      	pop	{r3, r4, r5, pc}
 8001334:	200001f0 	.word	0x200001f0

08001338 <__errno>:
 8001338:	4b01      	ldr	r3, [pc, #4]	@ (8001340 <__errno+0x8>)
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	2000000c 	.word	0x2000000c

08001344 <__libc_init_array>:
 8001344:	b570      	push	{r4, r5, r6, lr}
 8001346:	4d0d      	ldr	r5, [pc, #52]	@ (800137c <__libc_init_array+0x38>)
 8001348:	4c0d      	ldr	r4, [pc, #52]	@ (8001380 <__libc_init_array+0x3c>)
 800134a:	1b64      	subs	r4, r4, r5
 800134c:	10a4      	asrs	r4, r4, #2
 800134e:	2600      	movs	r6, #0
 8001350:	42a6      	cmp	r6, r4
 8001352:	d109      	bne.n	8001368 <__libc_init_array+0x24>
 8001354:	4d0b      	ldr	r5, [pc, #44]	@ (8001384 <__libc_init_array+0x40>)
 8001356:	4c0c      	ldr	r4, [pc, #48]	@ (8001388 <__libc_init_array+0x44>)
 8001358:	f000 f996 	bl	8001688 <_init>
 800135c:	1b64      	subs	r4, r4, r5
 800135e:	10a4      	asrs	r4, r4, #2
 8001360:	2600      	movs	r6, #0
 8001362:	42a6      	cmp	r6, r4
 8001364:	d105      	bne.n	8001372 <__libc_init_array+0x2e>
 8001366:	bd70      	pop	{r4, r5, r6, pc}
 8001368:	f855 3b04 	ldr.w	r3, [r5], #4
 800136c:	4798      	blx	r3
 800136e:	3601      	adds	r6, #1
 8001370:	e7ee      	b.n	8001350 <__libc_init_array+0xc>
 8001372:	f855 3b04 	ldr.w	r3, [r5], #4
 8001376:	4798      	blx	r3
 8001378:	3601      	adds	r6, #1
 800137a:	e7f2      	b.n	8001362 <__libc_init_array+0x1e>
 800137c:	080016b4 	.word	0x080016b4
 8001380:	080016b4 	.word	0x080016b4
 8001384:	080016b4 	.word	0x080016b4
 8001388:	080016b8 	.word	0x080016b8

0800138c <__retarget_lock_init_recursive>:
 800138c:	4770      	bx	lr

0800138e <__retarget_lock_acquire_recursive>:
 800138e:	4770      	bx	lr

08001390 <__retarget_lock_release_recursive>:
 8001390:	4770      	bx	lr
	...

08001394 <_free_r>:
 8001394:	b538      	push	{r3, r4, r5, lr}
 8001396:	4605      	mov	r5, r0
 8001398:	2900      	cmp	r1, #0
 800139a:	d041      	beq.n	8001420 <_free_r+0x8c>
 800139c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013a0:	1f0c      	subs	r4, r1, #4
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	bfb8      	it	lt
 80013a6:	18e4      	addlt	r4, r4, r3
 80013a8:	f7ff fd64 	bl	8000e74 <__malloc_lock>
 80013ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001424 <_free_r+0x90>)
 80013ae:	6813      	ldr	r3, [r2, #0]
 80013b0:	b933      	cbnz	r3, 80013c0 <_free_r+0x2c>
 80013b2:	6063      	str	r3, [r4, #4]
 80013b4:	6014      	str	r4, [r2, #0]
 80013b6:	4628      	mov	r0, r5
 80013b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80013bc:	f7ff bd60 	b.w	8000e80 <__malloc_unlock>
 80013c0:	42a3      	cmp	r3, r4
 80013c2:	d908      	bls.n	80013d6 <_free_r+0x42>
 80013c4:	6820      	ldr	r0, [r4, #0]
 80013c6:	1821      	adds	r1, r4, r0
 80013c8:	428b      	cmp	r3, r1
 80013ca:	bf01      	itttt	eq
 80013cc:	6819      	ldreq	r1, [r3, #0]
 80013ce:	685b      	ldreq	r3, [r3, #4]
 80013d0:	1809      	addeq	r1, r1, r0
 80013d2:	6021      	streq	r1, [r4, #0]
 80013d4:	e7ed      	b.n	80013b2 <_free_r+0x1e>
 80013d6:	461a      	mov	r2, r3
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	b10b      	cbz	r3, 80013e0 <_free_r+0x4c>
 80013dc:	42a3      	cmp	r3, r4
 80013de:	d9fa      	bls.n	80013d6 <_free_r+0x42>
 80013e0:	6811      	ldr	r1, [r2, #0]
 80013e2:	1850      	adds	r0, r2, r1
 80013e4:	42a0      	cmp	r0, r4
 80013e6:	d10b      	bne.n	8001400 <_free_r+0x6c>
 80013e8:	6820      	ldr	r0, [r4, #0]
 80013ea:	4401      	add	r1, r0
 80013ec:	1850      	adds	r0, r2, r1
 80013ee:	4283      	cmp	r3, r0
 80013f0:	6011      	str	r1, [r2, #0]
 80013f2:	d1e0      	bne.n	80013b6 <_free_r+0x22>
 80013f4:	6818      	ldr	r0, [r3, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	6053      	str	r3, [r2, #4]
 80013fa:	4408      	add	r0, r1
 80013fc:	6010      	str	r0, [r2, #0]
 80013fe:	e7da      	b.n	80013b6 <_free_r+0x22>
 8001400:	d902      	bls.n	8001408 <_free_r+0x74>
 8001402:	230c      	movs	r3, #12
 8001404:	602b      	str	r3, [r5, #0]
 8001406:	e7d6      	b.n	80013b6 <_free_r+0x22>
 8001408:	6820      	ldr	r0, [r4, #0]
 800140a:	1821      	adds	r1, r4, r0
 800140c:	428b      	cmp	r3, r1
 800140e:	bf04      	itt	eq
 8001410:	6819      	ldreq	r1, [r3, #0]
 8001412:	685b      	ldreq	r3, [r3, #4]
 8001414:	6063      	str	r3, [r4, #4]
 8001416:	bf04      	itt	eq
 8001418:	1809      	addeq	r1, r1, r0
 800141a:	6021      	streq	r1, [r4, #0]
 800141c:	6054      	str	r4, [r2, #4]
 800141e:	e7ca      	b.n	80013b6 <_free_r+0x22>
 8001420:	bd38      	pop	{r3, r4, r5, pc}
 8001422:	bf00      	nop
 8001424:	200000b0 	.word	0x200000b0

08001428 <__sflush_r>:
 8001428:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800142c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001430:	0716      	lsls	r6, r2, #28
 8001432:	4605      	mov	r5, r0
 8001434:	460c      	mov	r4, r1
 8001436:	d454      	bmi.n	80014e2 <__sflush_r+0xba>
 8001438:	684b      	ldr	r3, [r1, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	dc02      	bgt.n	8001444 <__sflush_r+0x1c>
 800143e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001440:	2b00      	cmp	r3, #0
 8001442:	dd48      	ble.n	80014d6 <__sflush_r+0xae>
 8001444:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001446:	2e00      	cmp	r6, #0
 8001448:	d045      	beq.n	80014d6 <__sflush_r+0xae>
 800144a:	2300      	movs	r3, #0
 800144c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001450:	682f      	ldr	r7, [r5, #0]
 8001452:	6a21      	ldr	r1, [r4, #32]
 8001454:	602b      	str	r3, [r5, #0]
 8001456:	d030      	beq.n	80014ba <__sflush_r+0x92>
 8001458:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800145a:	89a3      	ldrh	r3, [r4, #12]
 800145c:	0759      	lsls	r1, r3, #29
 800145e:	d505      	bpl.n	800146c <__sflush_r+0x44>
 8001460:	6863      	ldr	r3, [r4, #4]
 8001462:	1ad2      	subs	r2, r2, r3
 8001464:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001466:	b10b      	cbz	r3, 800146c <__sflush_r+0x44>
 8001468:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800146a:	1ad2      	subs	r2, r2, r3
 800146c:	2300      	movs	r3, #0
 800146e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001470:	6a21      	ldr	r1, [r4, #32]
 8001472:	4628      	mov	r0, r5
 8001474:	47b0      	blx	r6
 8001476:	1c43      	adds	r3, r0, #1
 8001478:	89a3      	ldrh	r3, [r4, #12]
 800147a:	d106      	bne.n	800148a <__sflush_r+0x62>
 800147c:	6829      	ldr	r1, [r5, #0]
 800147e:	291d      	cmp	r1, #29
 8001480:	d82b      	bhi.n	80014da <__sflush_r+0xb2>
 8001482:	4a2a      	ldr	r2, [pc, #168]	@ (800152c <__sflush_r+0x104>)
 8001484:	40ca      	lsrs	r2, r1
 8001486:	07d6      	lsls	r6, r2, #31
 8001488:	d527      	bpl.n	80014da <__sflush_r+0xb2>
 800148a:	2200      	movs	r2, #0
 800148c:	6062      	str	r2, [r4, #4]
 800148e:	04d9      	lsls	r1, r3, #19
 8001490:	6922      	ldr	r2, [r4, #16]
 8001492:	6022      	str	r2, [r4, #0]
 8001494:	d504      	bpl.n	80014a0 <__sflush_r+0x78>
 8001496:	1c42      	adds	r2, r0, #1
 8001498:	d101      	bne.n	800149e <__sflush_r+0x76>
 800149a:	682b      	ldr	r3, [r5, #0]
 800149c:	b903      	cbnz	r3, 80014a0 <__sflush_r+0x78>
 800149e:	6560      	str	r0, [r4, #84]	@ 0x54
 80014a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80014a2:	602f      	str	r7, [r5, #0]
 80014a4:	b1b9      	cbz	r1, 80014d6 <__sflush_r+0xae>
 80014a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80014aa:	4299      	cmp	r1, r3
 80014ac:	d002      	beq.n	80014b4 <__sflush_r+0x8c>
 80014ae:	4628      	mov	r0, r5
 80014b0:	f7ff ff70 	bl	8001394 <_free_r>
 80014b4:	2300      	movs	r3, #0
 80014b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80014b8:	e00d      	b.n	80014d6 <__sflush_r+0xae>
 80014ba:	2301      	movs	r3, #1
 80014bc:	4628      	mov	r0, r5
 80014be:	47b0      	blx	r6
 80014c0:	4602      	mov	r2, r0
 80014c2:	1c50      	adds	r0, r2, #1
 80014c4:	d1c9      	bne.n	800145a <__sflush_r+0x32>
 80014c6:	682b      	ldr	r3, [r5, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0c6      	beq.n	800145a <__sflush_r+0x32>
 80014cc:	2b1d      	cmp	r3, #29
 80014ce:	d001      	beq.n	80014d4 <__sflush_r+0xac>
 80014d0:	2b16      	cmp	r3, #22
 80014d2:	d11e      	bne.n	8001512 <__sflush_r+0xea>
 80014d4:	602f      	str	r7, [r5, #0]
 80014d6:	2000      	movs	r0, #0
 80014d8:	e022      	b.n	8001520 <__sflush_r+0xf8>
 80014da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014de:	b21b      	sxth	r3, r3
 80014e0:	e01b      	b.n	800151a <__sflush_r+0xf2>
 80014e2:	690f      	ldr	r7, [r1, #16]
 80014e4:	2f00      	cmp	r7, #0
 80014e6:	d0f6      	beq.n	80014d6 <__sflush_r+0xae>
 80014e8:	0793      	lsls	r3, r2, #30
 80014ea:	680e      	ldr	r6, [r1, #0]
 80014ec:	bf08      	it	eq
 80014ee:	694b      	ldreq	r3, [r1, #20]
 80014f0:	600f      	str	r7, [r1, #0]
 80014f2:	bf18      	it	ne
 80014f4:	2300      	movne	r3, #0
 80014f6:	eba6 0807 	sub.w	r8, r6, r7
 80014fa:	608b      	str	r3, [r1, #8]
 80014fc:	f1b8 0f00 	cmp.w	r8, #0
 8001500:	dde9      	ble.n	80014d6 <__sflush_r+0xae>
 8001502:	6a21      	ldr	r1, [r4, #32]
 8001504:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001506:	4643      	mov	r3, r8
 8001508:	463a      	mov	r2, r7
 800150a:	4628      	mov	r0, r5
 800150c:	47b0      	blx	r6
 800150e:	2800      	cmp	r0, #0
 8001510:	dc08      	bgt.n	8001524 <__sflush_r+0xfc>
 8001512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800151a:	81a3      	strh	r3, [r4, #12]
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001524:	4407      	add	r7, r0
 8001526:	eba8 0800 	sub.w	r8, r8, r0
 800152a:	e7e7      	b.n	80014fc <__sflush_r+0xd4>
 800152c:	20400001 	.word	0x20400001

08001530 <_fflush_r>:
 8001530:	b538      	push	{r3, r4, r5, lr}
 8001532:	690b      	ldr	r3, [r1, #16]
 8001534:	4605      	mov	r5, r0
 8001536:	460c      	mov	r4, r1
 8001538:	b913      	cbnz	r3, 8001540 <_fflush_r+0x10>
 800153a:	2500      	movs	r5, #0
 800153c:	4628      	mov	r0, r5
 800153e:	bd38      	pop	{r3, r4, r5, pc}
 8001540:	b118      	cbz	r0, 800154a <_fflush_r+0x1a>
 8001542:	6a03      	ldr	r3, [r0, #32]
 8001544:	b90b      	cbnz	r3, 800154a <_fflush_r+0x1a>
 8001546:	f7ff fd2d 	bl	8000fa4 <__sinit>
 800154a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f3      	beq.n	800153a <_fflush_r+0xa>
 8001552:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001554:	07d0      	lsls	r0, r2, #31
 8001556:	d404      	bmi.n	8001562 <_fflush_r+0x32>
 8001558:	0599      	lsls	r1, r3, #22
 800155a:	d402      	bmi.n	8001562 <_fflush_r+0x32>
 800155c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800155e:	f7ff ff16 	bl	800138e <__retarget_lock_acquire_recursive>
 8001562:	4628      	mov	r0, r5
 8001564:	4621      	mov	r1, r4
 8001566:	f7ff ff5f 	bl	8001428 <__sflush_r>
 800156a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800156c:	07da      	lsls	r2, r3, #31
 800156e:	4605      	mov	r5, r0
 8001570:	d4e4      	bmi.n	800153c <_fflush_r+0xc>
 8001572:	89a3      	ldrh	r3, [r4, #12]
 8001574:	059b      	lsls	r3, r3, #22
 8001576:	d4e1      	bmi.n	800153c <_fflush_r+0xc>
 8001578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800157a:	f7ff ff09 	bl	8001390 <__retarget_lock_release_recursive>
 800157e:	e7dd      	b.n	800153c <_fflush_r+0xc>

08001580 <__swhatbuf_r>:
 8001580:	b570      	push	{r4, r5, r6, lr}
 8001582:	460c      	mov	r4, r1
 8001584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001588:	2900      	cmp	r1, #0
 800158a:	b096      	sub	sp, #88	@ 0x58
 800158c:	4615      	mov	r5, r2
 800158e:	461e      	mov	r6, r3
 8001590:	da0d      	bge.n	80015ae <__swhatbuf_r+0x2e>
 8001592:	89a3      	ldrh	r3, [r4, #12]
 8001594:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001598:	f04f 0100 	mov.w	r1, #0
 800159c:	bf14      	ite	ne
 800159e:	2340      	movne	r3, #64	@ 0x40
 80015a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80015a4:	2000      	movs	r0, #0
 80015a6:	6031      	str	r1, [r6, #0]
 80015a8:	602b      	str	r3, [r5, #0]
 80015aa:	b016      	add	sp, #88	@ 0x58
 80015ac:	bd70      	pop	{r4, r5, r6, pc}
 80015ae:	466a      	mov	r2, sp
 80015b0:	f000 f848 	bl	8001644 <_fstat_r>
 80015b4:	2800      	cmp	r0, #0
 80015b6:	dbec      	blt.n	8001592 <__swhatbuf_r+0x12>
 80015b8:	9901      	ldr	r1, [sp, #4]
 80015ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80015be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80015c2:	4259      	negs	r1, r3
 80015c4:	4159      	adcs	r1, r3
 80015c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ca:	e7eb      	b.n	80015a4 <__swhatbuf_r+0x24>

080015cc <__smakebuf_r>:
 80015cc:	898b      	ldrh	r3, [r1, #12]
 80015ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015d0:	079d      	lsls	r5, r3, #30
 80015d2:	4606      	mov	r6, r0
 80015d4:	460c      	mov	r4, r1
 80015d6:	d507      	bpl.n	80015e8 <__smakebuf_r+0x1c>
 80015d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80015dc:	6023      	str	r3, [r4, #0]
 80015de:	6123      	str	r3, [r4, #16]
 80015e0:	2301      	movs	r3, #1
 80015e2:	6163      	str	r3, [r4, #20]
 80015e4:	b003      	add	sp, #12
 80015e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e8:	ab01      	add	r3, sp, #4
 80015ea:	466a      	mov	r2, sp
 80015ec:	f7ff ffc8 	bl	8001580 <__swhatbuf_r>
 80015f0:	9f00      	ldr	r7, [sp, #0]
 80015f2:	4605      	mov	r5, r0
 80015f4:	4639      	mov	r1, r7
 80015f6:	4630      	mov	r0, r6
 80015f8:	f7ff fbbc 	bl	8000d74 <_malloc_r>
 80015fc:	b948      	cbnz	r0, 8001612 <__smakebuf_r+0x46>
 80015fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001602:	059a      	lsls	r2, r3, #22
 8001604:	d4ee      	bmi.n	80015e4 <__smakebuf_r+0x18>
 8001606:	f023 0303 	bic.w	r3, r3, #3
 800160a:	f043 0302 	orr.w	r3, r3, #2
 800160e:	81a3      	strh	r3, [r4, #12]
 8001610:	e7e2      	b.n	80015d8 <__smakebuf_r+0xc>
 8001612:	89a3      	ldrh	r3, [r4, #12]
 8001614:	6020      	str	r0, [r4, #0]
 8001616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800161a:	81a3      	strh	r3, [r4, #12]
 800161c:	9b01      	ldr	r3, [sp, #4]
 800161e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001622:	b15b      	cbz	r3, 800163c <__smakebuf_r+0x70>
 8001624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001628:	4630      	mov	r0, r6
 800162a:	f000 f81d 	bl	8001668 <_isatty_r>
 800162e:	b128      	cbz	r0, 800163c <__smakebuf_r+0x70>
 8001630:	89a3      	ldrh	r3, [r4, #12]
 8001632:	f023 0303 	bic.w	r3, r3, #3
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	81a3      	strh	r3, [r4, #12]
 800163c:	89a3      	ldrh	r3, [r4, #12]
 800163e:	431d      	orrs	r5, r3
 8001640:	81a5      	strh	r5, [r4, #12]
 8001642:	e7cf      	b.n	80015e4 <__smakebuf_r+0x18>

08001644 <_fstat_r>:
 8001644:	b538      	push	{r3, r4, r5, lr}
 8001646:	4d07      	ldr	r5, [pc, #28]	@ (8001664 <_fstat_r+0x20>)
 8001648:	2300      	movs	r3, #0
 800164a:	4604      	mov	r4, r0
 800164c:	4608      	mov	r0, r1
 800164e:	4611      	mov	r1, r2
 8001650:	602b      	str	r3, [r5, #0]
 8001652:	f7ff fae4 	bl	8000c1e <_fstat>
 8001656:	1c43      	adds	r3, r0, #1
 8001658:	d102      	bne.n	8001660 <_fstat_r+0x1c>
 800165a:	682b      	ldr	r3, [r5, #0]
 800165c:	b103      	cbz	r3, 8001660 <_fstat_r+0x1c>
 800165e:	6023      	str	r3, [r4, #0]
 8001660:	bd38      	pop	{r3, r4, r5, pc}
 8001662:	bf00      	nop
 8001664:	200001f0 	.word	0x200001f0

08001668 <_isatty_r>:
 8001668:	b538      	push	{r3, r4, r5, lr}
 800166a:	4d06      	ldr	r5, [pc, #24]	@ (8001684 <_isatty_r+0x1c>)
 800166c:	2300      	movs	r3, #0
 800166e:	4604      	mov	r4, r0
 8001670:	4608      	mov	r0, r1
 8001672:	602b      	str	r3, [r5, #0]
 8001674:	f7ff fae3 	bl	8000c3e <_isatty>
 8001678:	1c43      	adds	r3, r0, #1
 800167a:	d102      	bne.n	8001682 <_isatty_r+0x1a>
 800167c:	682b      	ldr	r3, [r5, #0]
 800167e:	b103      	cbz	r3, 8001682 <_isatty_r+0x1a>
 8001680:	6023      	str	r3, [r4, #0]
 8001682:	bd38      	pop	{r3, r4, r5, pc}
 8001684:	200001f0 	.word	0x200001f0

08001688 <_init>:
 8001688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800168a:	bf00      	nop
 800168c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800168e:	bc08      	pop	{r3}
 8001690:	469e      	mov	lr, r3
 8001692:	4770      	bx	lr

08001694 <_fini>:
 8001694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001696:	bf00      	nop
 8001698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800169a:	bc08      	pop	{r3}
 800169c:	469e      	mov	lr, r3
 800169e:	4770      	bx	lr
