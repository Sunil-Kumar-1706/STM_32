
10_I2C_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001388  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08001514  08001514  00002514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001590  08001590  00003010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001590  08001590  00003010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001590  08001590  00003010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001590  08001590  00002590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001594  08001594  00002594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08001598  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00003010  2**0
                  CONTENTS
 10 .bss          00000064  20000010  20000010  00003010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  00003010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002643  00000000  00000000  00003040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000076a  00000000  00000000  00005683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000250  00000000  00000000  00005df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001b9  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000279d  00000000  00000000  000061f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002c5c  00000000  00000000  00008996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000aa7e  00000000  00000000  0000b5f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00016070  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000008fc  00000000  00000000  000160b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000169b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080014fc 	.word	0x080014fc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	080014fc 	.word	0x080014fc

080001cc <GPIO_PeriClockControl>:
#include "GPIO_driver.h"

/*peripheral clock setup */
void GPIO_PeriClockControl(GPIO_Regdef_t *pGPIOx , uint8_t EnorDi)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	460b      	mov	r3, r1
 80001d6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80001d8:	78fb      	ldrb	r3, [r7, #3]
 80001da:	2b01      	cmp	r3, #1
 80001dc:	d157      	bne.n	800028e <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80001e4:	d106      	bne.n	80001f4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80001e6:	4b58      	ldr	r3, [pc, #352]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80001e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001ea:	4a57      	ldr	r2, [pc, #348]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80001ec:	f043 0301 	orr.w	r3, r3, #1
 80001f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
				else if(pGPIOx==GPIOH)
				{
					GPIOH_PCLK_DI();
				}
	}
}
 80001f2:	e0a3      	b.n	800033c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOB)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4a55      	ldr	r2, [pc, #340]	@ (800034c <GPIO_PeriClockControl+0x180>)
 80001f8:	4293      	cmp	r3, r2
 80001fa:	d106      	bne.n	800020a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80001fc:	4b52      	ldr	r3, [pc, #328]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80001fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000200:	4a51      	ldr	r2, [pc, #324]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000202:	f043 0302 	orr.w	r3, r3, #2
 8000206:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000208:	e098      	b.n	800033c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOC)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a50      	ldr	r2, [pc, #320]	@ (8000350 <GPIO_PeriClockControl+0x184>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d106      	bne.n	8000220 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000212:	4b4d      	ldr	r3, [pc, #308]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000216:	4a4c      	ldr	r2, [pc, #304]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000218:	f043 0304 	orr.w	r3, r3, #4
 800021c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800021e:	e08d      	b.n	800033c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOD)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a4c      	ldr	r2, [pc, #304]	@ (8000354 <GPIO_PeriClockControl+0x188>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d106      	bne.n	8000236 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000228:	4b47      	ldr	r3, [pc, #284]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800022a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800022c:	4a46      	ldr	r2, [pc, #280]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800022e:	f043 0308 	orr.w	r3, r3, #8
 8000232:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000234:	e082      	b.n	800033c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOE)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4a47      	ldr	r2, [pc, #284]	@ (8000358 <GPIO_PeriClockControl+0x18c>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d106      	bne.n	800024c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800023e:	4b42      	ldr	r3, [pc, #264]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000242:	4a41      	ldr	r2, [pc, #260]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000244:	f043 0310 	orr.w	r3, r3, #16
 8000248:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800024a:	e077      	b.n	800033c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOF)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4a43      	ldr	r2, [pc, #268]	@ (800035c <GPIO_PeriClockControl+0x190>)
 8000250:	4293      	cmp	r3, r2
 8000252:	d106      	bne.n	8000262 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000254:	4b3c      	ldr	r3, [pc, #240]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000258:	4a3b      	ldr	r2, [pc, #236]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800025a:	f043 0320 	orr.w	r3, r3, #32
 800025e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000260:	e06c      	b.n	800033c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOG)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4a3e      	ldr	r2, [pc, #248]	@ (8000360 <GPIO_PeriClockControl+0x194>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d106      	bne.n	8000278 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800026a:	4b37      	ldr	r3, [pc, #220]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800026c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800026e:	4a36      	ldr	r2, [pc, #216]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000274:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000276:	e061      	b.n	800033c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOH)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a3a      	ldr	r2, [pc, #232]	@ (8000364 <GPIO_PeriClockControl+0x198>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d15d      	bne.n	800033c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000280:	4b31      	ldr	r3, [pc, #196]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000284:	4a30      	ldr	r2, [pc, #192]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800028a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800028c:	e056      	b.n	800033c <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000294:	d106      	bne.n	80002a4 <GPIO_PeriClockControl+0xd8>
					GPIOA_PCLK_DI();
 8000296:	4b2c      	ldr	r3, [pc, #176]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800029a:	4a2b      	ldr	r2, [pc, #172]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800029c:	f023 0301 	bic.w	r3, r3, #1
 80002a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002a2:	e04b      	b.n	800033c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOB)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a29      	ldr	r2, [pc, #164]	@ (800034c <GPIO_PeriClockControl+0x180>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d106      	bne.n	80002ba <GPIO_PeriClockControl+0xee>
					GPIOB_PCLK_DI();
 80002ac:	4b26      	ldr	r3, [pc, #152]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002b0:	4a25      	ldr	r2, [pc, #148]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002b2:	f023 0302 	bic.w	r3, r3, #2
 80002b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002b8:	e040      	b.n	800033c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOC)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a24      	ldr	r2, [pc, #144]	@ (8000350 <GPIO_PeriClockControl+0x184>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d106      	bne.n	80002d0 <GPIO_PeriClockControl+0x104>
					GPIOC_PCLK_DI();
 80002c2:	4b21      	ldr	r3, [pc, #132]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002c6:	4a20      	ldr	r2, [pc, #128]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002c8:	f023 0304 	bic.w	r3, r3, #4
 80002cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002ce:	e035      	b.n	800033c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOD)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a20      	ldr	r2, [pc, #128]	@ (8000354 <GPIO_PeriClockControl+0x188>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d106      	bne.n	80002e6 <GPIO_PeriClockControl+0x11a>
					GPIOD_PCLK_DI();
 80002d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002de:	f023 0308 	bic.w	r3, r3, #8
 80002e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002e4:	e02a      	b.n	800033c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOE)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000358 <GPIO_PeriClockControl+0x18c>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d106      	bne.n	80002fc <GPIO_PeriClockControl+0x130>
					GPIOE_PCLK_DI();
 80002ee:	4b16      	ldr	r3, [pc, #88]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002f2:	4a15      	ldr	r2, [pc, #84]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002f4:	f023 0310 	bic.w	r3, r3, #16
 80002f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002fa:	e01f      	b.n	800033c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOF)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4a17      	ldr	r2, [pc, #92]	@ (800035c <GPIO_PeriClockControl+0x190>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d106      	bne.n	8000312 <GPIO_PeriClockControl+0x146>
					GPIOF_PCLK_DI();
 8000304:	4b10      	ldr	r3, [pc, #64]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000308:	4a0f      	ldr	r2, [pc, #60]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800030a:	f023 0320 	bic.w	r3, r3, #32
 800030e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000310:	e014      	b.n	800033c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOG)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a12      	ldr	r2, [pc, #72]	@ (8000360 <GPIO_PeriClockControl+0x194>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <GPIO_PeriClockControl+0x15c>
					GPIOG_PCLK_DI();
 800031a:	4b0b      	ldr	r3, [pc, #44]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800031c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800031e:	4a0a      	ldr	r2, [pc, #40]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000324:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000326:	e009      	b.n	800033c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOH)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a0e      	ldr	r2, [pc, #56]	@ (8000364 <GPIO_PeriClockControl+0x198>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d105      	bne.n	800033c <GPIO_PeriClockControl+0x170>
					GPIOH_PCLK_DI();
 8000330:	4b05      	ldr	r3, [pc, #20]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000334:	4a04      	ldr	r2, [pc, #16]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000336:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800033a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	40021000 	.word	0x40021000
 800034c:	48000400 	.word	0x48000400
 8000350:	48000800 	.word	0x48000800
 8000354:	48000c00 	.word	0x48000c00
 8000358:	48001000 	.word	0x48001000
 800035c:	48001400 	.word	0x48001400
 8000360:	48001800 	.word	0x48001800
 8000364:	48001c00 	.word	0x48001c00

08000368 <GPIO_Init>:

/*Init and Deinit */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000368:	b480      	push	{r7}
 800036a:	b087      	sub	sp, #28
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	795b      	ldrb	r3, [r3, #5]
 8000378:	2b03      	cmp	r3, #3
 800037a:	d822      	bhi.n	80003c2 <GPIO_Init+0x5a>
	{
		temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	795b      	ldrb	r3, [r3, #5]
 8000380:	461a      	mov	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	791b      	ldrb	r3, [r3, #4]
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	fa02 f303 	lsl.w	r3, r2, r3
 800038c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	791b      	ldrb	r3, [r3, #4]
 8000398:	005b      	lsls	r3, r3, #1
 800039a:	2103      	movs	r1, #3
 800039c:	fa01 f303 	lsl.w	r3, r1, r3
 80003a0:	43db      	mvns	r3, r3
 80003a2:	4619      	mov	r1, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	400a      	ands	r2, r1
 80003aa:	601a      	str	r2, [r3, #0]
		pGPIOHandle ->pGPIOx->MODER |= temp;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	6819      	ldr	r1, [r3, #0]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	697a      	ldr	r2, [r7, #20]
 80003b8:	430a      	orrs	r2, r1
 80003ba:	601a      	str	r2, [r3, #0]
		temp=0;
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
 80003c0:	e0e1      	b.n	8000586 <GPIO_Init+0x21e>
	}
	else{
		temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	795b      	ldrb	r3, [r3, #5]
 80003c6:	461a      	mov	r2, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	791b      	ldrb	r3, [r3, #4]
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	fa02 f303 	lsl.w	r3, r2, r3
 80003d2:	617b      	str	r3, [r7, #20]
				pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	791b      	ldrb	r3, [r3, #4]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	2103      	movs	r1, #3
 80003e2:	fa01 f303 	lsl.w	r3, r1, r3
 80003e6:	43db      	mvns	r3, r3
 80003e8:	4619      	mov	r1, r3
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	400a      	ands	r2, r1
 80003f0:	601a      	str	r2, [r3, #0]
				pGPIOHandle ->pGPIOx->MODER |= temp;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	6819      	ldr	r1, [r3, #0]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	697a      	ldr	r2, [r7, #20]
 80003fe:	430a      	orrs	r2, r1
 8000400:	601a      	str	r2, [r3, #0]
				temp=0;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	795b      	ldrb	r3, [r3, #5]
 800040a:	2b04      	cmp	r3, #4
 800040c:	d117      	bne.n	800043e <GPIO_Init+0xd6>
		{
			EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800040e:	4b47      	ldr	r3, [pc, #284]	@ (800052c <GPIO_Init+0x1c4>)
 8000410:	68db      	ldr	r3, [r3, #12]
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	7912      	ldrb	r2, [r2, #4]
 8000416:	4611      	mov	r1, r2
 8000418:	2201      	movs	r2, #1
 800041a:	408a      	lsls	r2, r1
 800041c:	4611      	mov	r1, r2
 800041e:	4a43      	ldr	r2, [pc, #268]	@ (800052c <GPIO_Init+0x1c4>)
 8000420:	430b      	orrs	r3, r1
 8000422:	60d3      	str	r3, [r2, #12]

			EXTI->RTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000424:	4b41      	ldr	r3, [pc, #260]	@ (800052c <GPIO_Init+0x1c4>)
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	7912      	ldrb	r2, [r2, #4]
 800042c:	4611      	mov	r1, r2
 800042e:	2201      	movs	r2, #1
 8000430:	408a      	lsls	r2, r1
 8000432:	43d2      	mvns	r2, r2
 8000434:	4611      	mov	r1, r2
 8000436:	4a3d      	ldr	r2, [pc, #244]	@ (800052c <GPIO_Init+0x1c4>)
 8000438:	400b      	ands	r3, r1
 800043a:	6093      	str	r3, [r2, #8]
 800043c:	e035      	b.n	80004aa <GPIO_Init+0x142>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	795b      	ldrb	r3, [r3, #5]
 8000442:	2b05      	cmp	r3, #5
 8000444:	d117      	bne.n	8000476 <GPIO_Init+0x10e>
		{
			EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000446:	4b39      	ldr	r3, [pc, #228]	@ (800052c <GPIO_Init+0x1c4>)
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	687a      	ldr	r2, [r7, #4]
 800044c:	7912      	ldrb	r2, [r2, #4]
 800044e:	4611      	mov	r1, r2
 8000450:	2201      	movs	r2, #1
 8000452:	408a      	lsls	r2, r1
 8000454:	4611      	mov	r1, r2
 8000456:	4a35      	ldr	r2, [pc, #212]	@ (800052c <GPIO_Init+0x1c4>)
 8000458:	430b      	orrs	r3, r1
 800045a:	6093      	str	r3, [r2, #8]

			EXTI->FTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800045c:	4b33      	ldr	r3, [pc, #204]	@ (800052c <GPIO_Init+0x1c4>)
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	7912      	ldrb	r2, [r2, #4]
 8000464:	4611      	mov	r1, r2
 8000466:	2201      	movs	r2, #1
 8000468:	408a      	lsls	r2, r1
 800046a:	43d2      	mvns	r2, r2
 800046c:	4611      	mov	r1, r2
 800046e:	4a2f      	ldr	r2, [pc, #188]	@ (800052c <GPIO_Init+0x1c4>)
 8000470:	400b      	ands	r3, r1
 8000472:	60d3      	str	r3, [r2, #12]
 8000474:	e019      	b.n	80004aa <GPIO_Init+0x142>

		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	795b      	ldrb	r3, [r3, #5]
 800047a:	2b06      	cmp	r3, #6
 800047c:	d115      	bne.n	80004aa <GPIO_Init+0x142>
		{
			EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800047e:	4b2b      	ldr	r3, [pc, #172]	@ (800052c <GPIO_Init+0x1c4>)
 8000480:	68db      	ldr	r3, [r3, #12]
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	7912      	ldrb	r2, [r2, #4]
 8000486:	4611      	mov	r1, r2
 8000488:	2201      	movs	r2, #1
 800048a:	408a      	lsls	r2, r1
 800048c:	4611      	mov	r1, r2
 800048e:	4a27      	ldr	r2, [pc, #156]	@ (800052c <GPIO_Init+0x1c4>)
 8000490:	430b      	orrs	r3, r1
 8000492:	60d3      	str	r3, [r2, #12]

			EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000494:	4b25      	ldr	r3, [pc, #148]	@ (800052c <GPIO_Init+0x1c4>)
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	7912      	ldrb	r2, [r2, #4]
 800049c:	4611      	mov	r1, r2
 800049e:	2201      	movs	r2, #1
 80004a0:	408a      	lsls	r2, r1
 80004a2:	4611      	mov	r1, r2
 80004a4:	4a21      	ldr	r2, [pc, #132]	@ (800052c <GPIO_Init+0x1c4>)
 80004a6:	430b      	orrs	r3, r1
 80004a8:	6093      	str	r3, [r2, #8]
		}
	 uint8_t temp1=pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber/4;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	791b      	ldrb	r3, [r3, #4]
 80004ae:	089b      	lsrs	r3, r3, #2
 80004b0:	74fb      	strb	r3, [r7, #19]
	 uint8_t temp2=pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber%4;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	791b      	ldrb	r3, [r3, #4]
 80004b6:	f003 0303 	and.w	r3, r3, #3
 80004ba:	74bb      	strb	r3, [r7, #18]
	 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80004c4:	d042      	beq.n	800054c <GPIO_Init+0x1e4>
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a19      	ldr	r2, [pc, #100]	@ (8000530 <GPIO_Init+0x1c8>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d02b      	beq.n	8000528 <GPIO_Init+0x1c0>
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a17      	ldr	r2, [pc, #92]	@ (8000534 <GPIO_Init+0x1cc>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d024      	beq.n	8000524 <GPIO_Init+0x1bc>
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a16      	ldr	r2, [pc, #88]	@ (8000538 <GPIO_Init+0x1d0>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d01d      	beq.n	8000520 <GPIO_Init+0x1b8>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a14      	ldr	r2, [pc, #80]	@ (800053c <GPIO_Init+0x1d4>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d016      	beq.n	800051c <GPIO_Init+0x1b4>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a13      	ldr	r2, [pc, #76]	@ (8000540 <GPIO_Init+0x1d8>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d00f      	beq.n	8000518 <GPIO_Init+0x1b0>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a11      	ldr	r2, [pc, #68]	@ (8000544 <GPIO_Init+0x1dc>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d008      	beq.n	8000514 <GPIO_Init+0x1ac>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a10      	ldr	r2, [pc, #64]	@ (8000548 <GPIO_Init+0x1e0>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d101      	bne.n	8000510 <GPIO_Init+0x1a8>
 800050c:	2307      	movs	r3, #7
 800050e:	e01e      	b.n	800054e <GPIO_Init+0x1e6>
 8000510:	2300      	movs	r3, #0
 8000512:	e01c      	b.n	800054e <GPIO_Init+0x1e6>
 8000514:	2306      	movs	r3, #6
 8000516:	e01a      	b.n	800054e <GPIO_Init+0x1e6>
 8000518:	2305      	movs	r3, #5
 800051a:	e018      	b.n	800054e <GPIO_Init+0x1e6>
 800051c:	2304      	movs	r3, #4
 800051e:	e016      	b.n	800054e <GPIO_Init+0x1e6>
 8000520:	2303      	movs	r3, #3
 8000522:	e014      	b.n	800054e <GPIO_Init+0x1e6>
 8000524:	2302      	movs	r3, #2
 8000526:	e012      	b.n	800054e <GPIO_Init+0x1e6>
 8000528:	2301      	movs	r3, #1
 800052a:	e010      	b.n	800054e <GPIO_Init+0x1e6>
 800052c:	40010400 	.word	0x40010400
 8000530:	48000400 	.word	0x48000400
 8000534:	48000800 	.word	0x48000800
 8000538:	48000c00 	.word	0x48000c00
 800053c:	48001000 	.word	0x48001000
 8000540:	48001400 	.word	0x48001400
 8000544:	48001800 	.word	0x48001800
 8000548:	48001c00 	.word	0x48001c00
 800054c:	2300      	movs	r3, #0
 800054e:	747b      	strb	r3, [r7, #17]
	 SYSCFG_PCLK_EN();
 8000550:	4b5e      	ldr	r3, [pc, #376]	@ (80006cc <GPIO_Init+0x364>)
 8000552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000554:	4a5d      	ldr	r2, [pc, #372]	@ (80006cc <GPIO_Init+0x364>)
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	6613      	str	r3, [r2, #96]	@ 0x60
	 SYSCFG->EXTICR[temp1]=portcode << (temp2 * 4);
 800055c:	7c7a      	ldrb	r2, [r7, #17]
 800055e:	7cbb      	ldrb	r3, [r7, #18]
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	fa02 f103 	lsl.w	r1, r2, r3
 8000566:	4a5a      	ldr	r2, [pc, #360]	@ (80006d0 <GPIO_Init+0x368>)
 8000568:	7cfb      	ldrb	r3, [r7, #19]
 800056a:	3302      	adds	r3, #2
 800056c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 EXTI -> IMR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000570:	4b58      	ldr	r3, [pc, #352]	@ (80006d4 <GPIO_Init+0x36c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	7912      	ldrb	r2, [r2, #4]
 8000578:	4611      	mov	r1, r2
 800057a:	2201      	movs	r2, #1
 800057c:	408a      	lsls	r2, r1
 800057e:	4611      	mov	r1, r2
 8000580:	4a54      	ldr	r2, [pc, #336]	@ (80006d4 <GPIO_Init+0x36c>)
 8000582:	430b      	orrs	r3, r1
 8000584:	6013      	str	r3, [r2, #0]
	}

	temp=0;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
	temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	799b      	ldrb	r3, [r3, #6]
 800058e:	461a      	mov	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	fa02 f303 	lsl.w	r3, r2, r3
 800059a:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->OSPEEDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	689a      	ldr	r2, [r3, #8]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791b      	ldrb	r3, [r3, #4]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	2103      	movs	r1, #3
 80005aa:	fa01 f303 	lsl.w	r3, r1, r3
 80005ae:	43db      	mvns	r3, r3
 80005b0:	4619      	mov	r1, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	400a      	ands	r2, r1
 80005b8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	6899      	ldr	r1, [r3, #8]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	430a      	orrs	r2, r1
 80005c8:	609a      	str	r2, [r3, #8]
	temp=0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]

	temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	79db      	ldrb	r3, [r3, #7]
 80005d2:	461a      	mov	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	791b      	ldrb	r3, [r3, #4]
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->PUPDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	68da      	ldr	r2, [r3, #12]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	2103      	movs	r1, #3
 80005ee:	fa01 f303 	lsl.w	r3, r1, r3
 80005f2:	43db      	mvns	r3, r3
 80005f4:	4619      	mov	r1, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	400a      	ands	r2, r1
 80005fc:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	68d9      	ldr	r1, [r3, #12]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	697a      	ldr	r2, [r7, #20]
 800060a:	430a      	orrs	r2, r1
 800060c:	60da      	str	r2, [r3, #12]
	temp=0;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]

	temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType<<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	7a1b      	ldrb	r3, [r3, #8]
 8000616:	461a      	mov	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791b      	ldrb	r3, [r3, #4]
 800061c:	fa02 f303 	lsl.w	r3, r2, r3
 8000620:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->OTYPER &= ~(0X01 << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	685a      	ldr	r2, [r3, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	4619      	mov	r1, r3
 800062e:	2301      	movs	r3, #1
 8000630:	408b      	lsls	r3, r1
 8000632:	43db      	mvns	r3, r3
 8000634:	4619      	mov	r1, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	400a      	ands	r2, r1
 800063c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	6859      	ldr	r1, [r3, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	430a      	orrs	r2, r1
 800064c:	605a      	str	r2, [r3, #4]
	temp=0;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	795b      	ldrb	r3, [r3, #5]
 8000656:	2b02      	cmp	r3, #2
 8000658:	d132      	bne.n	80006c0 <GPIO_Init+0x358>
	{
		uint32_t temp1 ,temp2;
		temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	791b      	ldrb	r3, [r3, #4]
 800065e:	08db      	lsrs	r3, r3, #3
 8000660:	b2db      	uxtb	r3, r3
 8000662:	60fb      	str	r3, [r7, #12]
		temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	f003 0307 	and.w	r3, r3, #7
 800066c:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0X0f<< (4*temp2));
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	3208      	adds	r2, #8
 8000676:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	210f      	movs	r1, #15
 8000680:	fa01 f303 	lsl.w	r3, r1, r3
 8000684:	43db      	mvns	r3, r3
 8000686:	4619      	mov	r1, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4011      	ands	r1, r2
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	3208      	adds	r2, #8
 8000692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	3208      	adds	r2, #8
 800069e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	7a5b      	ldrb	r3, [r3, #9]
 80006a6:	4619      	mov	r1, r3
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	fa01 f303 	lsl.w	r3, r1, r3
 80006b0:	4619      	mov	r1, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4311      	orrs	r1, r2
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	3208      	adds	r2, #8
 80006bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80006c0:	bf00      	nop
 80006c2:	371c      	adds	r7, #28
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40010000 	.word	0x40010000
 80006d4:	40010400 	.word	0x40010400

080006d8 <I2C_GenerateStartCondition>:
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

// Function to generate a START condition on I2C bus
void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
    // Set the START bit (bit 13) in CR2 register
    pI2Cx->CR2 |= (1 << 13);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	605a      	str	r2, [r3, #4]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <I2C_GenerateStopCondition>:


// Function to generate a STOP condition on I2C bus
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
    // Set the STOP bit (bit 14) in CR2 register
    pI2Cx->CR2 |= (1 << 14);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	605a      	str	r2, [r3, #4]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <I2C_PeripheralControl>:


// Enable or disable the given I2C peripheral
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	70fb      	strb	r3, [r7, #3]
    if(EnOrDi == ENABLE)
 8000724:	78fb      	ldrb	r3, [r7, #3]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d106      	bne.n	8000738 <I2C_PeripheralControl+0x20>
    {
        // Set bit 0 (PE - Peripheral Enable) in CR1 → I2C ON
        pI2Cx->CR1 |= (1 << 0);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f043 0201 	orr.w	r2, r3, #1
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	601a      	str	r2, [r3, #0]
    else
    {
        // Clear bit 0 (PE) in CR1 → I2C OFF
        pI2Cx->CR1 &= ~(1 << 0);
    }
}
 8000736:	e005      	b.n	8000744 <I2C_PeripheralControl+0x2c>
        pI2Cx->CR1 &= ~(1 << 0);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f023 0201 	bic.w	r2, r3, #1
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	601a      	str	r2, [r3, #0]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <I2C_PeriClockControl>:



// Enable or disable peripheral clock for the given I2C instance
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	460b      	mov	r3, r1
 800075a:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 800075c:	78fb      	ldrb	r3, [r7, #3]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d120      	bne.n	80007a4 <I2C_PeriClockControl+0x54>
    {
        // Turn ON clock for the selected I2C peripheral
        if(pI2Cx == I2C1)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a22      	ldr	r2, [pc, #136]	@ (80007f0 <I2C_PeriClockControl+0xa0>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d106      	bne.n	8000778 <I2C_PeriClockControl+0x28>
        {
            I2C1_PCLK_EN();   // Enable clock for I2C1
 800076a:	4b22      	ldr	r3, [pc, #136]	@ (80007f4 <I2C_PeriClockControl+0xa4>)
 800076c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800076e:	4a21      	ldr	r2, [pc, #132]	@ (80007f4 <I2C_PeriClockControl+0xa4>)
 8000770:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000774:	6593      	str	r3, [r2, #88]	@ 0x58
        else if (pI2Cx == I2C3)
        {
            I2C3_PCLK_DI();   // Disable clock for I2C3
        }
    }
}
 8000776:	e035      	b.n	80007e4 <I2C_PeriClockControl+0x94>
        else if (pI2Cx == I2C2)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a1f      	ldr	r2, [pc, #124]	@ (80007f8 <I2C_PeriClockControl+0xa8>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d106      	bne.n	800078e <I2C_PeriClockControl+0x3e>
            I2C2_PCLK_EN();   // Enable clock for I2C2
 8000780:	4b1c      	ldr	r3, [pc, #112]	@ (80007f4 <I2C_PeriClockControl+0xa4>)
 8000782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000784:	4a1b      	ldr	r2, [pc, #108]	@ (80007f4 <I2C_PeriClockControl+0xa4>)
 8000786:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800078a:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800078c:	e02a      	b.n	80007e4 <I2C_PeriClockControl+0x94>
        else if (pI2Cx == I2C3)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a1a      	ldr	r2, [pc, #104]	@ (80007fc <I2C_PeriClockControl+0xac>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d126      	bne.n	80007e4 <I2C_PeriClockControl+0x94>
            I2C3_PCLK_EN();   // Enable clock for I2C3
 8000796:	4b17      	ldr	r3, [pc, #92]	@ (80007f4 <I2C_PeriClockControl+0xa4>)
 8000798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800079a:	4a16      	ldr	r2, [pc, #88]	@ (80007f4 <I2C_PeriClockControl+0xa4>)
 800079c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80007a0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80007a2:	e01f      	b.n	80007e4 <I2C_PeriClockControl+0x94>
        if(pI2Cx == I2C1)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a12      	ldr	r2, [pc, #72]	@ (80007f0 <I2C_PeriClockControl+0xa0>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d106      	bne.n	80007ba <I2C_PeriClockControl+0x6a>
            I2C1_PCLK_DI();   // Disable clock for I2C1
 80007ac:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <I2C_PeriClockControl+0xa4>)
 80007ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007b0:	4a10      	ldr	r2, [pc, #64]	@ (80007f4 <I2C_PeriClockControl+0xa4>)
 80007b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80007b6:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80007b8:	e014      	b.n	80007e4 <I2C_PeriClockControl+0x94>
        else if (pI2Cx == I2C2)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a0e      	ldr	r2, [pc, #56]	@ (80007f8 <I2C_PeriClockControl+0xa8>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d106      	bne.n	80007d0 <I2C_PeriClockControl+0x80>
            I2C2_PCLK_DI();   // Disable clock for I2C2
 80007c2:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <I2C_PeriClockControl+0xa4>)
 80007c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c6:	4a0b      	ldr	r2, [pc, #44]	@ (80007f4 <I2C_PeriClockControl+0xa4>)
 80007c8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80007cc:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80007ce:	e009      	b.n	80007e4 <I2C_PeriClockControl+0x94>
        else if (pI2Cx == I2C3)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a0a      	ldr	r2, [pc, #40]	@ (80007fc <I2C_PeriClockControl+0xac>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d105      	bne.n	80007e4 <I2C_PeriClockControl+0x94>
            I2C3_PCLK_DI();   // Disable clock for I2C3
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <I2C_PeriClockControl+0xa4>)
 80007da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007dc:	4a05      	ldr	r2, [pc, #20]	@ (80007f4 <I2C_PeriClockControl+0xa4>)
 80007de:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80007e2:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	40005400 	.word	0x40005400
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40005800 	.word	0x40005800
 80007fc:	40005c00 	.word	0x40005c00

08000800 <I2C_Init>:


// Initialize I2C peripheral
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
    uint32_t tempreg = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]

    // 1. Set ACK control (bit 15 of CR2)
    tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 15;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	795b      	ldrb	r3, [r3, #5]
 8000810:	03db      	lsls	r3, r3, #15
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	4313      	orrs	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]
    pI2CHandle->pI2Cx->CR2 |= tempreg;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	6859      	ldr	r1, [r3, #4]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	430a      	orrs	r2, r1
 8000826:	605a      	str	r2, [r3, #4]

    // 2. Set timing for ~100kHz I2C speed
    pI2CHandle->pI2Cx->TIMINGR |= 0x00411313;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	6919      	ldr	r1, [r3, #16]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <I2C_Init+0x5c>)
 8000834:	430b      	orrs	r3, r1
 8000836:	6113      	str	r3, [r2, #16]

    // 3. Set device own address (shifted left by 1 for 7-bit addr)
    tempreg = pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	791b      	ldrb	r3, [r3, #4]
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
    pI2CHandle->pI2Cx->OAR1 |= tempreg;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	6899      	ldr	r1, [r3, #8]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	430a      	orrs	r2, r1
 800084e:	609a      	str	r2, [r3, #8]
}
 8000850:	bf00      	nop
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	00411313 	.word	0x00411313

08000860 <I2C_IRQInterruptConfig>:



// Configure (enable/disable) NVIC interrupt for given IRQ number
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	460a      	mov	r2, r1
 800086a:	71fb      	strb	r3, [r7, #7]
 800086c:	4613      	mov	r3, r2
 800086e:	71bb      	strb	r3, [r7, #6]
    if(EnorDi == ENABLE)   // Enable interrupt
 8000870:	79bb      	ldrb	r3, [r7, #6]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d133      	bne.n	80008de <I2C_IRQInterruptConfig+0x7e>
    {
        if(IRQNumber <= 31)
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	2b1f      	cmp	r3, #31
 800087a:	d80a      	bhi.n	8000892 <I2C_IRQInterruptConfig+0x32>
        {
            // IRQ 0–31 → set bit in NVIC ISER0
            *NVIC_ISER0 |= (1 << IRQNumber);
 800087c:	4b35      	ldr	r3, [pc, #212]	@ (8000954 <I2C_IRQInterruptConfig+0xf4>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	79fa      	ldrb	r2, [r7, #7]
 8000882:	2101      	movs	r1, #1
 8000884:	fa01 f202 	lsl.w	r2, r1, r2
 8000888:	4611      	mov	r1, r2
 800088a:	4a32      	ldr	r2, [pc, #200]	@ (8000954 <I2C_IRQInterruptConfig+0xf4>)
 800088c:	430b      	orrs	r3, r1
 800088e:	6013      	str	r3, [r2, #0]
        {
            // IRQ 64–95 → clear bit in NVIC ICER3
            *NVIC_ICER3 |= (1 << (IRQNumber % 64));
        }
    }
}
 8000890:	e059      	b.n	8000946 <I2C_IRQInterruptConfig+0xe6>
        else if(IRQNumber > 31 && IRQNumber < 64)
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b1f      	cmp	r3, #31
 8000896:	d90f      	bls.n	80008b8 <I2C_IRQInterruptConfig+0x58>
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2b3f      	cmp	r3, #63	@ 0x3f
 800089c:	d80c      	bhi.n	80008b8 <I2C_IRQInterruptConfig+0x58>
            *NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800089e:	4b2e      	ldr	r3, [pc, #184]	@ (8000958 <I2C_IRQInterruptConfig+0xf8>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	79fa      	ldrb	r2, [r7, #7]
 80008a4:	f002 021f 	and.w	r2, r2, #31
 80008a8:	2101      	movs	r1, #1
 80008aa:	fa01 f202 	lsl.w	r2, r1, r2
 80008ae:	4611      	mov	r1, r2
 80008b0:	4a29      	ldr	r2, [pc, #164]	@ (8000958 <I2C_IRQInterruptConfig+0xf8>)
 80008b2:	430b      	orrs	r3, r1
 80008b4:	6013      	str	r3, [r2, #0]
 80008b6:	e046      	b.n	8000946 <I2C_IRQInterruptConfig+0xe6>
        else if(IRQNumber >= 64 && IRQNumber < 96)
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80008bc:	d943      	bls.n	8000946 <I2C_IRQInterruptConfig+0xe6>
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2b5f      	cmp	r3, #95	@ 0x5f
 80008c2:	d840      	bhi.n	8000946 <I2C_IRQInterruptConfig+0xe6>
            *NVIC_ISER3 |= (1 << (IRQNumber % 64));
 80008c4:	4b25      	ldr	r3, [pc, #148]	@ (800095c <I2C_IRQInterruptConfig+0xfc>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	79fa      	ldrb	r2, [r7, #7]
 80008ca:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80008ce:	2101      	movs	r1, #1
 80008d0:	fa01 f202 	lsl.w	r2, r1, r2
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a21      	ldr	r2, [pc, #132]	@ (800095c <I2C_IRQInterruptConfig+0xfc>)
 80008d8:	430b      	orrs	r3, r1
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	e033      	b.n	8000946 <I2C_IRQInterruptConfig+0xe6>
        if(IRQNumber <= 31)
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b1f      	cmp	r3, #31
 80008e2:	d80a      	bhi.n	80008fa <I2C_IRQInterruptConfig+0x9a>
            *NVIC_ICER0 |= (1 << IRQNumber);
 80008e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000960 <I2C_IRQInterruptConfig+0x100>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	79fa      	ldrb	r2, [r7, #7]
 80008ea:	2101      	movs	r1, #1
 80008ec:	fa01 f202 	lsl.w	r2, r1, r2
 80008f0:	4611      	mov	r1, r2
 80008f2:	4a1b      	ldr	r2, [pc, #108]	@ (8000960 <I2C_IRQInterruptConfig+0x100>)
 80008f4:	430b      	orrs	r3, r1
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	e025      	b.n	8000946 <I2C_IRQInterruptConfig+0xe6>
        else if(IRQNumber > 31 && IRQNumber < 64)
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b1f      	cmp	r3, #31
 80008fe:	d90f      	bls.n	8000920 <I2C_IRQInterruptConfig+0xc0>
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	2b3f      	cmp	r3, #63	@ 0x3f
 8000904:	d80c      	bhi.n	8000920 <I2C_IRQInterruptConfig+0xc0>
            *NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000906:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <I2C_IRQInterruptConfig+0x104>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	79fa      	ldrb	r2, [r7, #7]
 800090c:	f002 021f 	and.w	r2, r2, #31
 8000910:	2101      	movs	r1, #1
 8000912:	fa01 f202 	lsl.w	r2, r1, r2
 8000916:	4611      	mov	r1, r2
 8000918:	4a12      	ldr	r2, [pc, #72]	@ (8000964 <I2C_IRQInterruptConfig+0x104>)
 800091a:	430b      	orrs	r3, r1
 800091c:	6013      	str	r3, [r2, #0]
 800091e:	e012      	b.n	8000946 <I2C_IRQInterruptConfig+0xe6>
        else if(IRQNumber >= 64 && IRQNumber < 96)
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	2b3f      	cmp	r3, #63	@ 0x3f
 8000924:	d90f      	bls.n	8000946 <I2C_IRQInterruptConfig+0xe6>
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2b5f      	cmp	r3, #95	@ 0x5f
 800092a:	d80c      	bhi.n	8000946 <I2C_IRQInterruptConfig+0xe6>
            *NVIC_ICER3 |= (1 << (IRQNumber % 64));
 800092c:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <I2C_IRQInterruptConfig+0x108>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	79fa      	ldrb	r2, [r7, #7]
 8000932:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000936:	2101      	movs	r1, #1
 8000938:	fa01 f202 	lsl.w	r2, r1, r2
 800093c:	4611      	mov	r1, r2
 800093e:	4a0a      	ldr	r2, [pc, #40]	@ (8000968 <I2C_IRQInterruptConfig+0x108>)
 8000940:	430b      	orrs	r3, r1
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	e7ff      	b.n	8000946 <I2C_IRQInterruptConfig+0xe6>
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000e100 	.word	0xe000e100
 8000958:	e000e104 	.word	0xe000e104
 800095c:	e000e10c 	.word	0xe000e10c
 8000960:	e000e180 	.word	0xe000e180
 8000964:	e000e184 	.word	0xe000e184
 8000968:	e000e18c 	.word	0xe000e18c

0800096c <I2C_MasterSendDataIT>:



// Non-blocking master send
uint8_t I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
 8000978:	70fb      	strb	r3, [r7, #3]
	uint8_t busystate = pI2CHandle->TxRxState;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	7e1b      	ldrb	r3, [r3, #24]
 800097e:	74fb      	strb	r3, [r7, #19]

	if((busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8000980:	7cfb      	ldrb	r3, [r7, #19]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d045      	beq.n	8000a12 <I2C_MasterSendDataIT+0xa6>
 8000986:	7cfb      	ldrb	r3, [r7, #19]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d042      	beq.n	8000a12 <I2C_MasterSendDataIT+0xa6>
	{
		// Save context
		pI2CHandle->pTxBuffer = pTxBuffer;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	609a      	str	r2, [r3, #8]
		pI2CHandle->TxLen     = Len;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	611a      	str	r2, [r3, #16]
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	2202      	movs	r2, #2
 800099c:	761a      	strb	r2, [r3, #24]
		pI2CHandle->DevAddr   = SlaveAddr;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	78fa      	ldrb	r2, [r7, #3]
 80009a2:	765a      	strb	r2, [r3, #25]
		pI2CHandle->Sr        = Sr;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80009aa:	f883 2020 	strb.w	r2, [r3, #32]

		while(((pI2CHandle->pI2Cx->ISR >> 15) & 1) == 0); // Wait until bus free
 80009ae:	bf00      	nop
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	0bdb      	lsrs	r3, r3, #15
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d0f7      	beq.n	80009b0 <I2C_MasterSendDataIT+0x44>

		// Prepare CR2 for transmission
		uint32_t cr2 = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
		cr2 |= (SlaveAddr << 1);  // Slave address
 80009c4:	78fb      	ldrb	r3, [r7, #3]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	697a      	ldr	r2, [r7, #20]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	617b      	str	r3, [r7, #20]
		cr2 |= (Len << 16);       // Number of bytes
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	041b      	lsls	r3, r3, #16
 80009d2:	697a      	ldr	r2, [r7, #20]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	617b      	str	r3, [r7, #20]
		if(Sr == I2C_DISABLE_SR) cr2 |= (1 << 25); // Auto-stop if needed
 80009d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d103      	bne.n	80009e8 <I2C_MasterSendDataIT+0x7c>
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009e6:	617b      	str	r3, [r7, #20]

		pI2CHandle->pI2Cx->CR2 |= cr2;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	6859      	ldr	r1, [r3, #4]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	430a      	orrs	r2, r1
 80009f6:	605a      	str	r2, [r3, #4]

		// Generate start + enable interrupts
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fe6b 	bl	80006d8 <I2C_GenerateStartCondition>
		pI2CHandle->pI2Cx->CR1 |= ((1<<1) | (1<<6) | (1<<7));
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f042 02c2 	orr.w	r2, r2, #194	@ 0xc2
 8000a10:	601a      	str	r2, [r3, #0]
	}

	return busystate;
 8000a12:	7cfb      	ldrb	r3, [r7, #19]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3718      	adds	r7, #24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <I2C_MasterHandleTXEInterrupt>:
    return busystate;
}

// Handle TXE (data register empty)
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle )
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->TxLen > 0)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	691b      	ldr	r3, [r3, #16]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d00f      	beq.n	8000a4c <I2C_MasterHandleTXEInterrupt+0x30>
	{
		pI2CHandle->pI2Cx->TXDR = *(pI2CHandle->pTxBuffer); // Load next byte
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	781a      	ldrb	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	629a      	str	r2, [r3, #40]	@ 0x28
		pI2CHandle->TxLen--;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	691b      	ldr	r3, [r3, #16]
 8000a3c:	1e5a      	subs	r2, r3, #1
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	611a      	str	r2, [r3, #16]
		pI2CHandle->pTxBuffer++;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
	}
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <I2C_MasterHandleRXNEInterrupt>:



// Handle RXNE (data available)
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle )
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->RxSize == 1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	69db      	ldr	r3, [r3, #28]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d10c      	bne.n	8000a82 <I2C_MasterHandleRXNEInterrupt+0x2a>
	{
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->RXDR; // Read last byte
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	701a      	strb	r2, [r3, #0]
		pI2CHandle->RxLen--;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	1e5a      	subs	r2, r3, #1
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	615a      	str	r2, [r3, #20]
 8000a80:	e01e      	b.n	8000ac0 <I2C_MasterHandleRXNEInterrupt+0x68>
	}
	else if(pI2CHandle->RxSize > 1)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d91a      	bls.n	8000ac0 <I2C_MasterHandleRXNEInterrupt+0x68>
	{
		if(pI2CHandle->RxLen == 2) I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE); // NACK before last byte
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	d105      	bne.n	8000a9e <I2C_MasterHandleRXNEInterrupt+0x46>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 f9f6 	bl	8000e8a <I2C_ManageAcking>

		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->RXDR;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	701a      	strb	r2, [r3, #0]
		pI2CHandle->pRxBuffer++;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	1c5a      	adds	r2, r3, #1
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	60da      	str	r2, [r3, #12]
		pI2CHandle->RxLen--;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	1e5a      	subs	r2, r3, #1
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	615a      	str	r2, [r3, #20]
	}

	if(pI2CHandle->RxLen == 0)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d110      	bne.n	8000aea <I2C_MasterHandleRXNEInterrupt+0x92>
	{
		if(pI2CHandle->Sr == I2C_DISABLE_SR) I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d104      	bne.n	8000adc <I2C_MasterHandleRXNEInterrupt+0x84>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fe0e 	bl	80006f8 <I2C_GenerateStopCondition>

		I2C_CloseReceiveData(pI2CHandle); // Reset state
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f000 f808 	bl	8000af2 <I2C_CloseReceiveData>
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_RX_CMPLT); // Notify app
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f000 fc11 	bl	800130c <I2C_ApplicationEventCallback>
	}
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <I2C_CloseReceiveData>:



// Close RX transfer
void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << 1);  // Disable RXNEIE
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f022 0202 	bic.w	r2, r2, #2
 8000b08:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << 6);  // Disable STOPIE
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	685a      	ldr	r2, [r3, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b18:	605a      	str	r2, [r3, #4]

	// Reset handle state
	pI2CHandle->TxRxState = I2C_READY;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	761a      	strb	r2, [r3, #24]
	pI2CHandle->pRxBuffer = NULL;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
	pI2CHandle->RxLen     = 0;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	615a      	str	r2, [r3, #20]
	pI2CHandle->RxSize    = 0;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]

	// Re-enable ACK if it was enabled
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	795b      	ldrb	r3, [r3, #5]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d105      	bne.n	8000b46 <I2C_CloseReceiveData+0x54>
		I2C_ManageAcking(pI2CHandle->pI2Cx,ENABLE);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2101      	movs	r1, #1
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 f9a2 	bl	8000e8a <I2C_ManageAcking>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <I2C_CloseSendData>:

// Close TX transfer
void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << 1);  // Disable TXEIE
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	685a      	ldr	r2, [r3, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f022 0202 	bic.w	r2, r2, #2
 8000b64:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << 6);  // Disable STOPIE
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	685a      	ldr	r2, [r3, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b74:	605a      	str	r2, [r3, #4]

	// Reset handle state
	pI2CHandle->TxRxState = I2C_READY;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	761a      	strb	r2, [r3, #24]
	pI2CHandle->pTxBuffer = NULL;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
	pI2CHandle->TxLen     = 0;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <I2C_ExecuteAddressPhaseWrite>:


static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	70fb      	strb	r3, [r7, #3]
	// Clear old slave address bits (SADD[9:0]) in CR2
	pI2Cx->CR2 &= ~(0x3FFU << 0);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000ba8:	f023 0303 	bic.w	r3, r3, #3
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	6053      	str	r3, [r2, #4]

	// Load new slave address (shifted left 1, as LSB = R/W bit)
	pI2Cx->CR2 |= ((uint32_t)SlaveAddr << 1) & (0x3FFU << 0);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	78fb      	ldrb	r3, [r7, #3]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	605a      	str	r2, [r3, #4]

	// Clear bit10 (RD_WRN = 0 → Write operation)
	pI2Cx->CR2 &= ~(1U << 10);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	605a      	str	r2, [r3, #4]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	460b      	mov	r3, r1
 8000be4:	70fb      	strb	r3, [r7, #3]
    // Clear old slave address bits (SADD[9:0]) in CR2
    pI2Cx->CR2 &= ~(0x3FFU << 0);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000bee:	f023 0303 	bic.w	r3, r3, #3
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	6053      	str	r3, [r2, #4]

    // Load new slave address (shifted left 1, as LSB = R/W bit)
    pI2Cx->CR2 |= ((uint32_t)SlaveAddr << 1) & (0x3FFU << 0);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	78fb      	ldrb	r3, [r7, #3]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c02:	431a      	orrs	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	605a      	str	r2, [r3, #4]

    // Set bit10 (RD_WRN = 1 → Read operation)
    pI2Cx->CR2 |= (1U << 10);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	605a      	str	r2, [r3, #4]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <I2C_EV_IRQHandling>:



// Handle event interrupts
void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
    uint32_t isr = pI2CHandle->pI2Cx->ISR;  // Interrupt status
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	60fb      	str	r3, [r7, #12]
    uint32_t cr1 = pI2CHandle->pI2Cx->CR1;  // Control register
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	60bb      	str	r3, [r7, #8]

    // ADDR flag (address matched)
    if((isr & (1U << 3)) && (cr1 & (1U << 3)))
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f003 0308 	and.w	r3, r3, #8
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d01d      	beq.n	8000c7e <I2C_EV_IRQHandling+0x5e>
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	f003 0308 	and.w	r3, r3, #8
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d018      	beq.n	8000c7e <I2C_EV_IRQHandling+0x5e>
    {
        if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	7e1b      	ldrb	r3, [r3, #24]
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d108      	bne.n	8000c66 <I2C_EV_IRQHandling+0x46>
            I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	7e5b      	ldrb	r3, [r3, #25]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4610      	mov	r0, r2
 8000c60:	f7ff ff98 	bl	8000b94 <I2C_ExecuteAddressPhaseWrite>
 8000c64:	e00b      	b.n	8000c7e <I2C_EV_IRQHandling+0x5e>
        else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	7e1b      	ldrb	r3, [r3, #24]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d107      	bne.n	8000c7e <I2C_EV_IRQHandling+0x5e>
            I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	7e5b      	ldrb	r3, [r3, #25]
 8000c76:	4619      	mov	r1, r3
 8000c78:	4610      	mov	r0, r2
 8000c7a:	f7ff ffae 	bl	8000bda <I2C_ExecuteAddressPhaseRead>
    }

    if(isr & (1U << 3)) pI2CHandle->pI2Cx->ICR |= (1U << 3); // Clear ADDR
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f003 0308 	and.w	r3, r3, #8
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d007      	beq.n	8000c98 <I2C_EV_IRQHandling+0x78>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	69da      	ldr	r2, [r3, #28]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f042 0208 	orr.w	r2, r2, #8
 8000c96:	61da      	str	r2, [r3, #28]

    // STOPF flag
    if((isr & (1U << 6)) && (cr1 & (1U << 6)))
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d020      	beq.n	8000ce4 <I2C_EV_IRQHandling+0xc4>
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d01b      	beq.n	8000ce4 <I2C_EV_IRQHandling+0xc4>
    {
        if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX && pI2CHandle->TxLen == 0)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	7e1b      	ldrb	r3, [r3, #24]
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d117      	bne.n	8000ce4 <I2C_EV_IRQHandling+0xc4>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d113      	bne.n	8000ce4 <I2C_EV_IRQHandling+0xc4>
        {
            if(pI2CHandle->Sr == I2C_DISABLE_SR) pI2CHandle->pI2Cx->CR2 |= (1U << 14); // Generate STOP
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d107      	bne.n	8000cd6 <I2C_EV_IRQHandling+0xb6>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000cd4:	605a      	str	r2, [r3, #4]

            I2C_CloseSendData(pI2CHandle);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ff39 	bl	8000b4e <I2C_CloseSendData>
            I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 8000cdc:	2100      	movs	r1, #0
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f000 fb14 	bl	800130c <I2C_ApplicationEventCallback>
        }
    }

    if(isr & (1U << 6)) // Clear STOPF
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00b      	beq.n	8000d06 <I2C_EV_IRQHandling+0xe6>
    {
        pI2CHandle->pI2Cx->ICR |= (1U << 6);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	69da      	ldr	r2, [r3, #28]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000cfc:	61da      	str	r2, [r3, #28]
        I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 8000cfe:	2102      	movs	r1, #2
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f000 fb03 	bl	800130c <I2C_ApplicationEventCallback>
    }

    // TXE flag
    if((isr & (1U << 1)) && (cr1 & (1U << 1)))
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d01a      	beq.n	8000d46 <I2C_EV_IRQHandling+0x126>
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d015      	beq.n	8000d46 <I2C_EV_IRQHandling+0x126>
    {
        if(isr & (1U << 16)) // TXIS set
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d007      	beq.n	8000d34 <I2C_EV_IRQHandling+0x114>
        {
            if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	7e1b      	ldrb	r3, [r3, #24]
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d10c      	bne.n	8000d46 <I2C_EV_IRQHandling+0x126>
                I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff fe75 	bl	8000a1c <I2C_MasterHandleTXEInterrupt>
 8000d32:	e008      	b.n	8000d46 <I2C_EV_IRQHandling+0x126>
        }
        else if(isr & (1U << 17)) // Data request from slave
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <I2C_EV_IRQHandling+0x126>
            I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_REQ);
 8000d3e:	2108      	movs	r1, #8
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 fae3 	bl	800130c <I2C_ApplicationEventCallback>
    }

    // RXNE flag
    if((isr & (1U << 2)) && (cr1 & (1U << 2)))
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d01a      	beq.n	8000d86 <I2C_EV_IRQHandling+0x166>
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d015      	beq.n	8000d86 <I2C_EV_IRQHandling+0x166>
    {
        if(isr & (1U << 16)) // RXNE set
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d007      	beq.n	8000d74 <I2C_EV_IRQHandling+0x154>
        {
            if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	7e1b      	ldrb	r3, [r3, #24]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d10c      	bne.n	8000d86 <I2C_EV_IRQHandling+0x166>
                I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff fe73 	bl	8000a58 <I2C_MasterHandleRXNEInterrupt>
        }
        else if(!(isr & (1U << 17))) // Data received from slave
            I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
    }
}
 8000d72:	e008      	b.n	8000d86 <I2C_EV_IRQHandling+0x166>
        else if(!(isr & (1U << 17))) // Data received from slave
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d103      	bne.n	8000d86 <I2C_EV_IRQHandling+0x166>
            I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
 8000d7e:	2109      	movs	r1, #9
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f000 fac3 	bl	800130c <I2C_ApplicationEventCallback>
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <I2C_ER_IRQHandling>:



// Handle error interrupts
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b084      	sub	sp, #16
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
    uint32_t isr = pI2CHandle->pI2Cx->ISR;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	60fb      	str	r3, [r7, #12]
    uint32_t cr1 = pI2CHandle->pI2Cx->CR1;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	60bb      	str	r3, [r7, #8]

    if((isr & (1U << 8)) && (cr1 & (1U << 7)))   // Bus error
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d010      	beq.n	8000dd2 <I2C_ER_IRQHandling+0x44>
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00b      	beq.n	8000dd2 <I2C_ER_IRQHandling+0x44>
    {
        pI2CHandle->pI2Cx->ICR |= (1U << 8);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	69da      	ldr	r2, [r3, #28]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000dc8:	61da      	str	r2, [r3, #28]
        I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_BERR);
 8000dca:	2103      	movs	r1, #3
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f000 fa9d 	bl	800130c <I2C_ApplicationEventCallback>
    }

    if((isr & (1U << 9)) && (cr1 & (1U << 7)))   // Arbitration lost
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d010      	beq.n	8000dfe <I2C_ER_IRQHandling+0x70>
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00b      	beq.n	8000dfe <I2C_ER_IRQHandling+0x70>
    {
        pI2CHandle->pI2Cx->ICR |= (1U << 9);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	69da      	ldr	r2, [r3, #28]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000df4:	61da      	str	r2, [r3, #28]
        I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_ARLO);
 8000df6:	2104      	movs	r1, #4
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 fa87 	bl	800130c <I2C_ApplicationEventCallback>
    }

    if((isr & (1U << 10)) && (cr1 & (1U << 7)))  // Acknowledge failure
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d010      	beq.n	8000e2a <I2C_ER_IRQHandling+0x9c>
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d00b      	beq.n	8000e2a <I2C_ER_IRQHandling+0x9c>
    {
        pI2CHandle->pI2Cx->ICR |= (1U << 10);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	69da      	ldr	r2, [r3, #28]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e20:	61da      	str	r2, [r3, #28]
        I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_AF);
 8000e22:	2105      	movs	r1, #5
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f000 fa71 	bl	800130c <I2C_ApplicationEventCallback>
    }

    if((isr & (1U << 11)) && (cr1 & (1U << 7)))  // Overrun
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d010      	beq.n	8000e56 <I2C_ER_IRQHandling+0xc8>
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d00b      	beq.n	8000e56 <I2C_ER_IRQHandling+0xc8>
    {
        pI2CHandle->pI2Cx->ICR |= (1U << 11);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	69da      	ldr	r2, [r3, #28]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000e4c:	61da      	str	r2, [r3, #28]
        I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_OVR);
 8000e4e:	2106      	movs	r1, #6
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f000 fa5b 	bl	800130c <I2C_ApplicationEventCallback>
    }

    if((isr & (1U << 12)) && (cr1 & (1U << 7)))  // Timeout
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d010      	beq.n	8000e82 <I2C_ER_IRQHandling+0xf4>
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d00b      	beq.n	8000e82 <I2C_ER_IRQHandling+0xf4>
    {
        pI2CHandle->pI2Cx->ICR |= (1U << 12);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	69da      	ldr	r2, [r3, #28]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000e78:	61da      	str	r2, [r3, #28]
        I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_TIMEOUT);
 8000e7a:	2107      	movs	r1, #7
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f000 fa45 	bl	800130c <I2C_ApplicationEventCallback>
    }
}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <I2C_ManageAcking>:

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
 8000e92:	460b      	mov	r3, r1
 8000e94:	70fb      	strb	r3, [r7, #3]
    if (EnOrDi == ENABLE)
 8000e96:	78fb      	ldrb	r3, [r7, #3]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d106      	bne.n	8000eaa <I2C_ManageAcking+0x20>
    {
        // Set the ACK bit
        pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	601a      	str	r2, [r3, #0]
    else
    {
        // Clear the ACK bit
        pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
    }
}
 8000ea8:	e005      	b.n	8000eb6 <I2C_ManageAcking+0x2c>
        pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	601a      	str	r2, [r3, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <USART_PeriClockControl>:
#include "USART_driver.h"
#include "RCC_driver.h"

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d136      	bne.n	8000f44 <USART_PeriClockControl+0x80>
	{
		if(pUSARTx == USART1)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a38      	ldr	r2, [pc, #224]	@ (8000fbc <USART_PeriClockControl+0xf8>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d106      	bne.n	8000eec <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000ede:	4b38      	ldr	r3, [pc, #224]	@ (8000fc0 <USART_PeriClockControl+0xfc>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ee2:	4a37      	ldr	r2, [pc, #220]	@ (8000fc0 <USART_PeriClockControl+0xfc>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee8:	6613      	str	r3, [r2, #96]	@ 0x60
		else if(pUSARTx == UART5)
		{
			UART5_PCLK_DI();
		}
	}
}
 8000eea:	e061      	b.n	8000fb0 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a35      	ldr	r2, [pc, #212]	@ (8000fc4 <USART_PeriClockControl+0x100>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d106      	bne.n	8000f02 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000ef4:	4b32      	ldr	r3, [pc, #200]	@ (8000fc0 <USART_PeriClockControl+0xfc>)
 8000ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef8:	4a31      	ldr	r2, [pc, #196]	@ (8000fc0 <USART_PeriClockControl+0xfc>)
 8000efa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000efe:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000f00:	e056      	b.n	8000fb0 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a30      	ldr	r2, [pc, #192]	@ (8000fc8 <USART_PeriClockControl+0x104>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d106      	bne.n	8000f18 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc0 <USART_PeriClockControl+0xfc>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0e:	4a2c      	ldr	r2, [pc, #176]	@ (8000fc0 <USART_PeriClockControl+0xfc>)
 8000f10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f14:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000f16:	e04b      	b.n	8000fb0 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a2c      	ldr	r2, [pc, #176]	@ (8000fcc <USART_PeriClockControl+0x108>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d106      	bne.n	8000f2e <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000f20:	4b27      	ldr	r3, [pc, #156]	@ (8000fc0 <USART_PeriClockControl+0xfc>)
 8000f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f24:	4a26      	ldr	r2, [pc, #152]	@ (8000fc0 <USART_PeriClockControl+0xfc>)
 8000f26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f2a:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000f2c:	e040      	b.n	8000fb0 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a27      	ldr	r2, [pc, #156]	@ (8000fd0 <USART_PeriClockControl+0x10c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d13c      	bne.n	8000fb0 <USART_PeriClockControl+0xec>
			UART5_PCLK_EN();
 8000f36:	4b22      	ldr	r3, [pc, #136]	@ (8000fc0 <USART_PeriClockControl+0xfc>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3a:	4a21      	ldr	r2, [pc, #132]	@ (8000fc0 <USART_PeriClockControl+0xfc>)
 8000f3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000f40:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000f42:	e035      	b.n	8000fb0 <USART_PeriClockControl+0xec>
		if(pUSARTx == USART1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a1d      	ldr	r2, [pc, #116]	@ (8000fbc <USART_PeriClockControl+0xf8>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d106      	bne.n	8000f5a <USART_PeriClockControl+0x96>
			USART1_PCLK_DI();
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc0 <USART_PeriClockControl+0xfc>)
 8000f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f50:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc0 <USART_PeriClockControl+0xfc>)
 8000f52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f56:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8000f58:	e02a      	b.n	8000fb0 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a19      	ldr	r2, [pc, #100]	@ (8000fc4 <USART_PeriClockControl+0x100>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d106      	bne.n	8000f70 <USART_PeriClockControl+0xac>
			USART2_PCLK_DI();
 8000f62:	4b17      	ldr	r3, [pc, #92]	@ (8000fc0 <USART_PeriClockControl+0xfc>)
 8000f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f66:	4a16      	ldr	r2, [pc, #88]	@ (8000fc0 <USART_PeriClockControl+0xfc>)
 8000f68:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000f6c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000f6e:	e01f      	b.n	8000fb0 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a15      	ldr	r2, [pc, #84]	@ (8000fc8 <USART_PeriClockControl+0x104>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d106      	bne.n	8000f86 <USART_PeriClockControl+0xc2>
			USART3_PCLK_DI();
 8000f78:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <USART_PeriClockControl+0xfc>)
 8000f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7c:	4a10      	ldr	r2, [pc, #64]	@ (8000fc0 <USART_PeriClockControl+0xfc>)
 8000f7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f82:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000f84:	e014      	b.n	8000fb0 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a10      	ldr	r2, [pc, #64]	@ (8000fcc <USART_PeriClockControl+0x108>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d106      	bne.n	8000f9c <USART_PeriClockControl+0xd8>
			UART4_PCLK_DI();
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <USART_PeriClockControl+0xfc>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f92:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc0 <USART_PeriClockControl+0xfc>)
 8000f94:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000f98:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000f9a:	e009      	b.n	8000fb0 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd0 <USART_PeriClockControl+0x10c>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d105      	bne.n	8000fb0 <USART_PeriClockControl+0xec>
			UART5_PCLK_DI();
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <USART_PeriClockControl+0xfc>)
 8000fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa8:	4a05      	ldr	r2, [pc, #20]	@ (8000fc0 <USART_PeriClockControl+0xfc>)
 8000faa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000fae:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	40013800 	.word	0x40013800
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40004400 	.word	0x40004400
 8000fc8:	40004800 	.word	0x40004800
 8000fcc:	40004c00 	.word	0x40004c00
 8000fd0:	40005000 	.word	0x40005000

08000fd4 <USART_Init>:
}



void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
		uint32_t tempreg=0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]

		USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff6c 	bl	8000ec4 <USART_PeriClockControl>

		if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	791b      	ldrb	r3, [r3, #4]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d104      	bne.n	8000ffe <USART_Init+0x2a>
		{
			tempreg|= (1 << USART_CR1_RE);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	e010      	b.n	8001020 <USART_Init+0x4c>
		}
		else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	791b      	ldrb	r3, [r3, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d104      	bne.n	8001010 <USART_Init+0x3c>
		{
			tempreg |= ( 1 << USART_CR1_TE );
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e007      	b.n	8001020 <USART_Init+0x4c>
		}
		else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	791b      	ldrb	r3, [r3, #4]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d103      	bne.n	8001020 <USART_Init+0x4c>
		{
			tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f043 030c 	orr.w	r3, r3, #12
 800101e:	60fb      	str	r3, [r7, #12]
		}

		tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7b5b      	ldrb	r3, [r3, #13]
 8001024:	031b      	lsls	r3, r3, #12
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]

		if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	7b9b      	ldrb	r3, [r3, #14]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d104      	bne.n	800103e <USART_Init+0x6a>
		{
			tempreg |= ( 1 << USART_CR1_PCE);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	e00b      	b.n	8001056 <USART_Init+0x82>

		}
		else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	7b9b      	ldrb	r3, [r3, #14]
 8001042:	2b02      	cmp	r3, #2
 8001044:	d107      	bne.n	8001056 <USART_Init+0x82>
		{
		    tempreg |= ( 1 << USART_CR1_PCE);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800104c:	60fb      	str	r3, [r7, #12]
		    tempreg |= ( 1 << USART_CR1_PS);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001054:	60fb      	str	r3, [r7, #12]
		}


		pUSARTHandle->pUSARTx->CR1 = tempreg;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	601a      	str	r2, [r3, #0]
		tempreg=0;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
		tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7b1b      	ldrb	r3, [r3, #12]
 8001066:	031b      	lsls	r3, r3, #12
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	4313      	orrs	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
		pUSARTHandle->pUSARTx->CR2 = tempreg;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	605a      	str	r2, [r3, #4]

		tempreg=0;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]


		if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7bdb      	ldrb	r3, [r3, #15]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d104      	bne.n	800108c <USART_Init+0xb8>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	e014      	b.n	80010b6 <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7bdb      	ldrb	r3, [r3, #15]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d104      	bne.n	800109e <USART_Init+0xca>
		{
			tempreg |= ( 1 << USART_CR3_RTSE);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	e00b      	b.n	80010b6 <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	7bdb      	ldrb	r3, [r3, #15]
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d107      	bne.n	80010b6 <USART_Init+0xe2>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ac:	60fb      	str	r3, [r7, #12]
			tempreg |= ( 1 << USART_CR3_RTSE);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b4:	60fb      	str	r3, [r7, #12]
		}

		pUSARTHandle->pUSARTx->CR3 = tempreg;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	609a      	str	r2, [r3, #8]
		pUSARTHandle->pUSARTx->BRR=0X25;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2225      	movs	r2, #37	@ 0x25
 80010c4:	60da      	str	r2, [r3, #12]
	//	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <USART_SendData>:




void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

	for(uint32_t i = 0 ; i < Len; i++)
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	e031      	b.n	8001144 <USART_SendData+0x76>
	{
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 80010e0:	bf00      	nop
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2180      	movs	r1, #128	@ 0x80
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 f85a 	bl	80011a2 <USART_GetFlagStatus>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0f6      	beq.n	80010e2 <USART_SendData+0x14>

		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	7b5b      	ldrb	r3, [r3, #13]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d118      	bne.n	800112e <USART_SendData+0x60>
		{
			pdata = (uint16_t*) pTxBuffer;
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800110e:	629a      	str	r2, [r3, #40]	@ 0x28

			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	7b9b      	ldrb	r3, [r3, #14]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d106      	bne.n	8001126 <USART_SendData+0x58>
			{
				pTxBuffer++;
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	3301      	adds	r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	3301      	adds	r3, #1
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	e00b      	b.n	800113e <USART_SendData+0x70>

			}
			else
			{
				pTxBuffer++;
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	3301      	adds	r3, #1
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	e007      	b.n	800113e <USART_SendData+0x70>
			}
		}
		else
		{

			pUSARTHandle->pUSARTx->TDR = (*pTxBuffer  & (uint8_t)0xFF);
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	781a      	ldrb	r2, [r3, #0]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	629a      	str	r2, [r3, #40]	@ 0x28
			pTxBuffer++;
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	3301      	adds	r3, #1
 800113c:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	3301      	adds	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	429a      	cmp	r2, r3
 800114a:	d3c9      	bcc.n	80010e0 <USART_SendData+0x12>
		}
	}
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 800114c:	bf00      	nop
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2140      	movs	r1, #64	@ 0x40
 8001154:	4618      	mov	r0, r3
 8001156:	f000 f824 	bl	80011a2 <USART_GetFlagStatus>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f6      	beq.n	800114e <USART_SendData+0x80>
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <USART_PeripheralControl>:
	temp2=0;

}

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	460b      	mov	r3, r1
 8001174:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d106      	bne.n	800118a <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |=(1<<USART_CR1_UE);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f043 0201 	orr.w	r2, r3, #1
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
	}
}
 8001188:	e005      	b.n	8001196 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 0201 	bic.w	r2, r3, #1
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	601a      	str	r2, [r3, #0]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <USART_GetFlagStatus>:


uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx,uint8_t StatusFlagName)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	460b      	mov	r3, r1
 80011ac:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx ->ISR & StatusFlagName)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69da      	ldr	r2, [r3, #28]
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <USART_GetFlagStatus+0x1c>
	{
		return SET;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <USART_GetFlagStatus+0x1e>
	}
	return RESET;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <USART2_GPIOInits>:

uint8_t some_data[] = "hello from STM";   // Data to send via I2C

// ------------------- USART2 GPIO Initialization -------------------
void USART2_GPIOInits(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
    GPIO_Handle_t usart2_gpio;
    memset(&usart2_gpio,0,sizeof(usart2_gpio)); // Clear structure
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	220c      	movs	r2, #12
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 f962 	bl	80014a2 <memset>

    usart2_gpio.pGPIOx = GPIOA;                           // Use GPIOA pins
 80011de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80011e2:	607b      	str	r3, [r7, #4]
    usart2_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;   // Alternate function mode
 80011e4:	2302      	movs	r3, #2
 80011e6:	727b      	strb	r3, [r7, #9]
    usart2_gpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP; // Push-pull
 80011e8:	2300      	movs	r3, #0
 80011ea:	733b      	strb	r3, [r7, #12]
    usart2_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;// Pull-up
 80011ec:	2301      	movs	r3, #1
 80011ee:	72fb      	strb	r3, [r7, #11]
    usart2_gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;  // Fast speed
 80011f0:	2302      	movs	r3, #2
 80011f2:	72bb      	strb	r3, [r7, #10]
    usart2_gpio.GPIO_PinConfig.GPIO_PinAltFunMode = 7;           // USART2 AF7
 80011f4:	2307      	movs	r3, #7
 80011f6:	737b      	strb	r3, [r7, #13]

    // PA2 -> USART2 TX
    usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	723b      	strb	r3, [r7, #8]
    GPIOA_PCLK_EN();
 80011fc:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <USART2_GPIOInits+0x58>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001200:	4a08      	ldr	r2, [pc, #32]	@ (8001224 <USART2_GPIOInits+0x58>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIO_Init(&usart2_gpio);
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f8ac 	bl	8000368 <GPIO_Init>

    // PA3 -> USART2 RX
    usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8001210:	2303      	movs	r3, #3
 8001212:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&usart2_gpio);
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f8a6 	bl	8000368 <GPIO_Init>
}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40021000 	.word	0x40021000

08001228 <USART2_Init>:

// ------------------- USART2 Peripheral Initialization -------------------
void USART2_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
    usart2_handle.pUSARTx = USART2;  // Select USART2
 800122c:	4b0d      	ldr	r3, [pc, #52]	@ (8001264 <USART2_Init+0x3c>)
 800122e:	4a0e      	ldr	r2, [pc, #56]	@ (8001268 <USART2_Init+0x40>)
 8001230:	601a      	str	r2, [r3, #0]
    usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200; // Baudrate
 8001232:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <USART2_Init+0x3c>)
 8001234:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001238:	609a      	str	r2, [r3, #8]
    usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <USART2_Init+0x3c>)
 800123c:	2200      	movs	r2, #0
 800123e:	73da      	strb	r2, [r3, #15]
    usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX; // Enable TX and RX
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <USART2_Init+0x3c>)
 8001242:	2202      	movs	r2, #2
 8001244:	711a      	strb	r2, [r3, #4]
    usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <USART2_Init+0x3c>)
 8001248:	2200      	movs	r2, #0
 800124a:	731a      	strb	r2, [r3, #12]
    usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 800124c:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <USART2_Init+0x3c>)
 800124e:	2200      	movs	r2, #0
 8001250:	735a      	strb	r2, [r3, #13]
    usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8001252:	4b04      	ldr	r3, [pc, #16]	@ (8001264 <USART2_Init+0x3c>)
 8001254:	2200      	movs	r2, #0
 8001256:	739a      	strb	r2, [r3, #14]
    USART_Init(&usart2_handle);
 8001258:	4802      	ldr	r0, [pc, #8]	@ (8001264 <USART2_Init+0x3c>)
 800125a:	f7ff febb 	bl	8000fd4 <USART_Init>
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000050 	.word	0x20000050
 8001268:	40004400 	.word	0x40004400

0800126c <I2C1_GPIOInits>:

// ------------------- I2C1 GPIO Initialization -------------------
void I2C1_GPIOInits(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
    GPIO_Handle_t I2CPins;

    I2CPins.pGPIOx = GPIOB;                         // I2C uses GPIOB
 8001272:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <I2C1_GPIOInits+0x48>)
 8001274:	607b      	str	r3, [r7, #4]
    I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN; // Alternate function
 8001276:	2302      	movs	r3, #2
 8001278:	727b      	strb	r3, [r7, #9]
    I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD; // Open-drain
 800127a:	2301      	movs	r3, #1
 800127c:	733b      	strb	r3, [r7, #12]
    I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU; // Pull-up
 800127e:	2301      	movs	r3, #1
 8001280:	72fb      	strb	r3, [r7, #11]
    I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;  // I2C1 AF4
 8001282:	2304      	movs	r3, #4
 8001284:	737b      	strb	r3, [r7, #13]
    I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001286:	2302      	movs	r3, #2
 8001288:	72bb      	strb	r3, [r7, #10]
    GPIO_PeriClockControl(GPIOB, ENABLE);           // Enable GPIOB clock
 800128a:	2101      	movs	r1, #1
 800128c:	4809      	ldr	r0, [pc, #36]	@ (80012b4 <I2C1_GPIOInits+0x48>)
 800128e:	f7fe ff9d 	bl	80001cc <GPIO_PeriClockControl>

    // PB6 -> I2C1 SCL
    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8001292:	2306      	movs	r3, #6
 8001294:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2CPins);
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f865 	bl	8000368 <GPIO_Init>

    // PB7 -> I2C1 SDA
    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800129e:	2307      	movs	r3, #7
 80012a0:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2CPins);
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f85f 	bl	8000368 <GPIO_Init>
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	48000400 	.word	0x48000400

080012b8 <I2C1_Inits>:

// ------------------- I2C1 Peripheral Initialization -------------------
void I2C1_Inits(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
    I2C1Handle.pI2Cx = I2C1;          // Select I2C1
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <I2C1_Inits+0x20>)
 80012be:	4a07      	ldr	r2, [pc, #28]	@ (80012dc <I2C1_Inits+0x24>)
 80012c0:	601a      	str	r2, [r3, #0]
    I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE; // Enable ACK
 80012c2:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <I2C1_Inits+0x20>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	715a      	strb	r2, [r3, #5]
    I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;     // Own address
 80012c8:	4b03      	ldr	r3, [pc, #12]	@ (80012d8 <I2C1_Inits+0x20>)
 80012ca:	2261      	movs	r2, #97	@ 0x61
 80012cc:	711a      	strb	r2, [r3, #4]
    I2C_Init(&I2C1Handle);
 80012ce:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <I2C1_Inits+0x20>)
 80012d0:	f7ff fa96 	bl	8000800 <I2C_Init>
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000002c 	.word	0x2000002c
 80012dc:	40005400 	.word	0x40005400

080012e0 <delay>:

// ------------------- Small Delay -------------------
void delay(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
    for(uint32_t i = 0; i < 250000; i++);
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	e002      	b.n	80012f2 <delay+0x12>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3301      	adds	r3, #1
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a04      	ldr	r2, [pc, #16]	@ (8001308 <delay+0x28>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d9f8      	bls.n	80012ec <delay+0xc>
}
 80012fa:	bf00      	nop
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	0003d08f 	.word	0x0003d08f

0800130c <I2C_ApplicationEventCallback>:

// ------------------- I2C Application Callback -------------------
void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEv)
{
 800130c:	b5b0      	push	{r4, r5, r7, lr}
 800130e:	b08e      	sub	sp, #56	@ 0x38
 8001310:	af02      	add	r7, sp, #8
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	70fb      	strb	r3, [r7, #3]
    if(AppEv == I2C_EV_TX_CMPLT)   // Transmission complete event
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d11d      	bne.n	800135a <I2C_ApplicationEventCallback+0x4e>
    {
        uint8_t msg1[] = "[I2C] TX Complete Interrupt Triggered\r\n";
 800131e:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <I2C_ApplicationEventCallback+0x80>)
 8001320:	f107 0408 	add.w	r4, r7, #8
 8001324:	461d      	mov	r5, r3
 8001326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800132a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800132e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001332:	e884 0003 	stmia.w	r4, {r0, r1}
        USART_SendData(&usart2_handle, msg1, sizeof(msg1)-1);
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	2227      	movs	r2, #39	@ 0x27
 800133c:	4619      	mov	r1, r3
 800133e:	4814      	ldr	r0, [pc, #80]	@ (8001390 <I2C_ApplicationEventCallback+0x84>)
 8001340:	f7ff fec5 	bl	80010ce <USART_SendData>

        delay();
 8001344:	f7ff ffcc 	bl	80012e0 <delay>
        // Send data again in interrupt mode
        I2C_MasterSendDataIT(pI2CHandle, some_data, sizeof(some_data)-1, SLAVE_ADDR, 0);
 8001348:	2300      	movs	r3, #0
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2368      	movs	r3, #104	@ 0x68
 800134e:	220e      	movs	r2, #14
 8001350:	4910      	ldr	r1, [pc, #64]	@ (8001394 <I2C_ApplicationEventCallback+0x88>)
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff fb0a 	bl	800096c <I2C_MasterSendDataIT>
    else if(AppEv == I2C_ERROR_AF) // NACK received event
    {
        uint8_t msg2[] = "[I2C] NACK Received (AF Error)\r\n";
        USART_SendData(&usart2_handle, msg2, sizeof(msg2)-1);
    }
}
 8001358:	e013      	b.n	8001382 <I2C_ApplicationEventCallback+0x76>
    else if(AppEv == I2C_ERROR_AF) // NACK received event
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	2b05      	cmp	r3, #5
 800135e:	d110      	bne.n	8001382 <I2C_ApplicationEventCallback+0x76>
        uint8_t msg2[] = "[I2C] NACK Received (AF Error)\r\n";
 8001360:	4b0d      	ldr	r3, [pc, #52]	@ (8001398 <I2C_ApplicationEventCallback+0x8c>)
 8001362:	f107 0408 	add.w	r4, r7, #8
 8001366:	461d      	mov	r5, r3
 8001368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800136a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800136c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800136e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001370:	682b      	ldr	r3, [r5, #0]
 8001372:	7023      	strb	r3, [r4, #0]
        USART_SendData(&usart2_handle, msg2, sizeof(msg2)-1);
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	2220      	movs	r2, #32
 800137a:	4619      	mov	r1, r3
 800137c:	4804      	ldr	r0, [pc, #16]	@ (8001390 <I2C_ApplicationEventCallback+0x84>)
 800137e:	f7ff fea6 	bl	80010ce <USART_SendData>
}
 8001382:	bf00      	nop
 8001384:	3730      	adds	r7, #48	@ 0x30
 8001386:	46bd      	mov	sp, r7
 8001388:	bdb0      	pop	{r4, r5, r7, pc}
 800138a:	bf00      	nop
 800138c:	08001514 	.word	0x08001514
 8001390:	20000050 	.word	0x20000050
 8001394:	20000000 	.word	0x20000000
 8001398:	0800153c 	.word	0x0800153c

0800139c <main>:

// ------------------- Main Function -------------------
int main(void)
{
 800139c:	b5b0      	push	{r4, r5, r7, lr}
 800139e:	b08e      	sub	sp, #56	@ 0x38
 80013a0:	af02      	add	r7, sp, #8
    // Initialize USART2 for debugging messages
    USART2_GPIOInits();
 80013a2:	f7ff ff13 	bl	80011cc <USART2_GPIOInits>
    USART2_Init();
 80013a6:	f7ff ff3f 	bl	8001228 <USART2_Init>
    USART_PeripheralControl(USART2, ENABLE);
 80013aa:	2101      	movs	r1, #1
 80013ac:	4818      	ldr	r0, [pc, #96]	@ (8001410 <main+0x74>)
 80013ae:	f7ff fedc 	bl	800116a <USART_PeripheralControl>

    uint8_t start_msg[] = "Starting I2C Transmission via Interrupts...\r\n";
 80013b2:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <main+0x78>)
 80013b4:	463c      	mov	r4, r7
 80013b6:	461d      	mov	r5, r3
 80013b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013c4:	c407      	stmia	r4!, {r0, r1, r2}
 80013c6:	8023      	strh	r3, [r4, #0]
    USART_SendData(&usart2_handle, start_msg, sizeof(start_msg)-1);
 80013c8:	463b      	mov	r3, r7
 80013ca:	222d      	movs	r2, #45	@ 0x2d
 80013cc:	4619      	mov	r1, r3
 80013ce:	4812      	ldr	r0, [pc, #72]	@ (8001418 <main+0x7c>)
 80013d0:	f7ff fe7d 	bl	80010ce <USART_SendData>

    // Initialize I2C1
    I2C_PeriClockControl(I2C1, ENABLE);
 80013d4:	2101      	movs	r1, #1
 80013d6:	4811      	ldr	r0, [pc, #68]	@ (800141c <main+0x80>)
 80013d8:	f7ff f9ba 	bl	8000750 <I2C_PeriClockControl>
    I2C1_GPIOInits();
 80013dc:	f7ff ff46 	bl	800126c <I2C1_GPIOInits>
    I2C1_Inits();
 80013e0:	f7ff ff6a 	bl	80012b8 <I2C1_Inits>
    I2C_PeripheralControl(I2C1, ENABLE);
 80013e4:	2101      	movs	r1, #1
 80013e6:	480d      	ldr	r0, [pc, #52]	@ (800141c <main+0x80>)
 80013e8:	f7ff f996 	bl	8000718 <I2C_PeripheralControl>

    // Enable I2C interrupts (event + error)
    I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 80013ec:	2101      	movs	r1, #1
 80013ee:	201f      	movs	r0, #31
 80013f0:	f7ff fa36 	bl	8000860 <I2C_IRQInterruptConfig>
    I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);
 80013f4:	2101      	movs	r1, #1
 80013f6:	2020      	movs	r0, #32
 80013f8:	f7ff fa32 	bl	8000860 <I2C_IRQInterruptConfig>

    // Start sending data via I2C (interrupt mode)
    I2C_MasterSendDataIT(&I2C1Handle, some_data, sizeof(some_data)-1, SLAVE_ADDR, 0);
 80013fc:	2300      	movs	r3, #0
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2368      	movs	r3, #104	@ 0x68
 8001402:	220e      	movs	r2, #14
 8001404:	4906      	ldr	r1, [pc, #24]	@ (8001420 <main+0x84>)
 8001406:	4807      	ldr	r0, [pc, #28]	@ (8001424 <main+0x88>)
 8001408:	f7ff fab0 	bl	800096c <I2C_MasterSendDataIT>

    while(1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <main+0x70>
 8001410:	40004400 	.word	0x40004400
 8001414:	08001560 	.word	0x08001560
 8001418:	20000050 	.word	0x20000050
 800141c:	40005400 	.word	0x40005400
 8001420:	20000000 	.word	0x20000000
 8001424:	2000002c 	.word	0x2000002c

08001428 <I2C1_EV_IRQHandler>:
    }
}

// ------------------- IRQ Handlers -------------------
void I2C1_EV_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
    I2C_EV_IRQHandling(&I2C1Handle); // Handle I2C event interrupt
 800142c:	4802      	ldr	r0, [pc, #8]	@ (8001438 <I2C1_EV_IRQHandler+0x10>)
 800142e:	f7ff fbf7 	bl	8000c20 <I2C_EV_IRQHandling>
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000002c 	.word	0x2000002c

0800143c <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
    I2C_ER_IRQHandling(&I2C1Handle); // Handle I2C error interrupt
 8001440:	4802      	ldr	r0, [pc, #8]	@ (800144c <I2C1_ER_IRQHandler+0x10>)
 8001442:	f7ff fca4 	bl	8000d8e <I2C_ER_IRQHandling>
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000002c 	.word	0x2000002c

08001450 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001450:	480d      	ldr	r0, [pc, #52]	@ (8001488 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001452:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001454:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001458:	480c      	ldr	r0, [pc, #48]	@ (800148c <LoopForever+0x6>)
  ldr r1, =_edata
 800145a:	490d      	ldr	r1, [pc, #52]	@ (8001490 <LoopForever+0xa>)
  ldr r2, =_sidata
 800145c:	4a0d      	ldr	r2, [pc, #52]	@ (8001494 <LoopForever+0xe>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001460:	e002      	b.n	8001468 <LoopCopyDataInit>

08001462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001466:	3304      	adds	r3, #4

08001468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800146c:	d3f9      	bcc.n	8001462 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146e:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001470:	4c0a      	ldr	r4, [pc, #40]	@ (800149c <LoopForever+0x16>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001474:	e001      	b.n	800147a <LoopFillZerobss>

08001476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001478:	3204      	adds	r2, #4

0800147a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800147c:	d3fb      	bcc.n	8001476 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800147e:	f000 f819 	bl	80014b4 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8001482:	f7ff ff8b 	bl	800139c <main>

08001486 <LoopForever>:

LoopForever:
  b LoopForever
 8001486:	e7fe      	b.n	8001486 <LoopForever>
  ldr   r0, =_estack
 8001488:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800148c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001490:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001494:	08001598 	.word	0x08001598
  ldr r2, =_sbss
 8001498:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800149c:	20000074 	.word	0x20000074

080014a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014a0:	e7fe      	b.n	80014a0 <ADC1_2_IRQHandler>

080014a2 <memset>:
 80014a2:	4402      	add	r2, r0
 80014a4:	4603      	mov	r3, r0
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d100      	bne.n	80014ac <memset+0xa>
 80014aa:	4770      	bx	lr
 80014ac:	f803 1b01 	strb.w	r1, [r3], #1
 80014b0:	e7f9      	b.n	80014a6 <memset+0x4>
	...

080014b4 <__libc_init_array>:
 80014b4:	b570      	push	{r4, r5, r6, lr}
 80014b6:	4d0d      	ldr	r5, [pc, #52]	@ (80014ec <__libc_init_array+0x38>)
 80014b8:	4c0d      	ldr	r4, [pc, #52]	@ (80014f0 <__libc_init_array+0x3c>)
 80014ba:	1b64      	subs	r4, r4, r5
 80014bc:	10a4      	asrs	r4, r4, #2
 80014be:	2600      	movs	r6, #0
 80014c0:	42a6      	cmp	r6, r4
 80014c2:	d109      	bne.n	80014d8 <__libc_init_array+0x24>
 80014c4:	4d0b      	ldr	r5, [pc, #44]	@ (80014f4 <__libc_init_array+0x40>)
 80014c6:	4c0c      	ldr	r4, [pc, #48]	@ (80014f8 <__libc_init_array+0x44>)
 80014c8:	f000 f818 	bl	80014fc <_init>
 80014cc:	1b64      	subs	r4, r4, r5
 80014ce:	10a4      	asrs	r4, r4, #2
 80014d0:	2600      	movs	r6, #0
 80014d2:	42a6      	cmp	r6, r4
 80014d4:	d105      	bne.n	80014e2 <__libc_init_array+0x2e>
 80014d6:	bd70      	pop	{r4, r5, r6, pc}
 80014d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80014dc:	4798      	blx	r3
 80014de:	3601      	adds	r6, #1
 80014e0:	e7ee      	b.n	80014c0 <__libc_init_array+0xc>
 80014e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80014e6:	4798      	blx	r3
 80014e8:	3601      	adds	r6, #1
 80014ea:	e7f2      	b.n	80014d2 <__libc_init_array+0x1e>
 80014ec:	08001590 	.word	0x08001590
 80014f0:	08001590 	.word	0x08001590
 80014f4:	08001590 	.word	0x08001590
 80014f8:	08001594 	.word	0x08001594

080014fc <_init>:
 80014fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fe:	bf00      	nop
 8001500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001502:	bc08      	pop	{r3}
 8001504:	469e      	mov	lr, r3
 8001506:	4770      	bx	lr

08001508 <_fini>:
 8001508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800150a:	bf00      	nop
 800150c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800150e:	bc08      	pop	{r3}
 8001510:	469e      	mov	lr, r3
 8001512:	4770      	bx	lr
