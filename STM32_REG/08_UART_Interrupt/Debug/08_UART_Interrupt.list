
08_UART_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fd4  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001160  08001160  00002160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800118c  0800118c  0000219c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800118c  0800118c  0000218c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001194  0800119c  0000219c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001194  08001194  00002194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001198  08001198  00002198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000219c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000219c  2**0
                  CONTENTS
 10 .bss          00000044  20000000  20000000  00003000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000044  20000044  00003000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000219c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001652  00000000  00000000  000021cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004da  00000000  00000000  0000381e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000160  00000000  00000000  00003cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000ff  00000000  00000000  00003e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000023d3  00000000  00000000  00003f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001c71  00000000  00000000  0000632a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009e00  00000000  00000000  00007f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00011d9b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004d8  00000000  00000000  00011de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  000122b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000000 	.word	0x20000000
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001148 	.word	0x08001148

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000004 	.word	0x20000004
 80001c8:	08001148 	.word	0x08001148

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <GPIO_PeriClockControl>:
#include "GPIO_driver.h"

/*peripheral clock setup */
void GPIO_PeriClockControl(GPIO_Regdef_t *pGPIOx , uint8_t EnorDi)
{
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	460b      	mov	r3, r1
 80001e6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80001e8:	78fb      	ldrb	r3, [r7, #3]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d157      	bne.n	800029e <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80001f4:	d106      	bne.n	8000204 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80001f6:	4b58      	ldr	r3, [pc, #352]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80001f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001fa:	4a57      	ldr	r2, [pc, #348]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80001fc:	f043 0301 	orr.w	r3, r3, #1
 8000200:	64d3      	str	r3, [r2, #76]	@ 0x4c
				else if(pGPIOx==GPIOH)
				{
					GPIOH_PCLK_DI();
				}
	}
}
 8000202:	e0a3      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOB)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4a55      	ldr	r2, [pc, #340]	@ (800035c <GPIO_PeriClockControl+0x180>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d106      	bne.n	800021a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800020c:	4b52      	ldr	r3, [pc, #328]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800020e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000210:	4a51      	ldr	r2, [pc, #324]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000212:	f043 0302 	orr.w	r3, r3, #2
 8000216:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000218:	e098      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOC)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4a50      	ldr	r2, [pc, #320]	@ (8000360 <GPIO_PeriClockControl+0x184>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d106      	bne.n	8000230 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000222:	4b4d      	ldr	r3, [pc, #308]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000226:	4a4c      	ldr	r2, [pc, #304]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000228:	f043 0304 	orr.w	r3, r3, #4
 800022c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800022e:	e08d      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOD)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a4c      	ldr	r2, [pc, #304]	@ (8000364 <GPIO_PeriClockControl+0x188>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d106      	bne.n	8000246 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000238:	4b47      	ldr	r3, [pc, #284]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800023a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800023c:	4a46      	ldr	r2, [pc, #280]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800023e:	f043 0308 	orr.w	r3, r3, #8
 8000242:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000244:	e082      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOE)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4a47      	ldr	r2, [pc, #284]	@ (8000368 <GPIO_PeriClockControl+0x18c>)
 800024a:	4293      	cmp	r3, r2
 800024c:	d106      	bne.n	800025c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800024e:	4b42      	ldr	r3, [pc, #264]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000252:	4a41      	ldr	r2, [pc, #260]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000254:	f043 0310 	orr.w	r3, r3, #16
 8000258:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800025a:	e077      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOF)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	4a43      	ldr	r2, [pc, #268]	@ (800036c <GPIO_PeriClockControl+0x190>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d106      	bne.n	8000272 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000264:	4b3c      	ldr	r3, [pc, #240]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000268:	4a3b      	ldr	r2, [pc, #236]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800026a:	f043 0320 	orr.w	r3, r3, #32
 800026e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000270:	e06c      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOG)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4a3e      	ldr	r2, [pc, #248]	@ (8000370 <GPIO_PeriClockControl+0x194>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d106      	bne.n	8000288 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800027a:	4b37      	ldr	r3, [pc, #220]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800027c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800027e:	4a36      	ldr	r2, [pc, #216]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000284:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000286:	e061      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOH)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4a3a      	ldr	r2, [pc, #232]	@ (8000374 <GPIO_PeriClockControl+0x198>)
 800028c:	4293      	cmp	r3, r2
 800028e:	d15d      	bne.n	800034c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000290:	4b31      	ldr	r3, [pc, #196]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000294:	4a30      	ldr	r2, [pc, #192]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800029a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800029c:	e056      	b.n	800034c <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80002a4:	d106      	bne.n	80002b4 <GPIO_PeriClockControl+0xd8>
					GPIOA_PCLK_DI();
 80002a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002aa:	4a2b      	ldr	r2, [pc, #172]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002ac:	f023 0301 	bic.w	r3, r3, #1
 80002b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002b2:	e04b      	b.n	800034c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOB)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a29      	ldr	r2, [pc, #164]	@ (800035c <GPIO_PeriClockControl+0x180>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d106      	bne.n	80002ca <GPIO_PeriClockControl+0xee>
					GPIOB_PCLK_DI();
 80002bc:	4b26      	ldr	r3, [pc, #152]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002c0:	4a25      	ldr	r2, [pc, #148]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002c2:	f023 0302 	bic.w	r3, r3, #2
 80002c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002c8:	e040      	b.n	800034c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOC)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4a24      	ldr	r2, [pc, #144]	@ (8000360 <GPIO_PeriClockControl+0x184>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d106      	bne.n	80002e0 <GPIO_PeriClockControl+0x104>
					GPIOC_PCLK_DI();
 80002d2:	4b21      	ldr	r3, [pc, #132]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002d6:	4a20      	ldr	r2, [pc, #128]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002d8:	f023 0304 	bic.w	r3, r3, #4
 80002dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002de:	e035      	b.n	800034c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOD)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4a20      	ldr	r2, [pc, #128]	@ (8000364 <GPIO_PeriClockControl+0x188>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d106      	bne.n	80002f6 <GPIO_PeriClockControl+0x11a>
					GPIOD_PCLK_DI();
 80002e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ec:	4a1a      	ldr	r2, [pc, #104]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002ee:	f023 0308 	bic.w	r3, r3, #8
 80002f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002f4:	e02a      	b.n	800034c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOE)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000368 <GPIO_PeriClockControl+0x18c>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d106      	bne.n	800030c <GPIO_PeriClockControl+0x130>
					GPIOE_PCLK_DI();
 80002fe:	4b16      	ldr	r3, [pc, #88]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000302:	4a15      	ldr	r2, [pc, #84]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000304:	f023 0310 	bic.w	r3, r3, #16
 8000308:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800030a:	e01f      	b.n	800034c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOF)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a17      	ldr	r2, [pc, #92]	@ (800036c <GPIO_PeriClockControl+0x190>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d106      	bne.n	8000322 <GPIO_PeriClockControl+0x146>
					GPIOF_PCLK_DI();
 8000314:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000318:	4a0f      	ldr	r2, [pc, #60]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800031a:	f023 0320 	bic.w	r3, r3, #32
 800031e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000320:	e014      	b.n	800034c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOG)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a12      	ldr	r2, [pc, #72]	@ (8000370 <GPIO_PeriClockControl+0x194>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d106      	bne.n	8000338 <GPIO_PeriClockControl+0x15c>
					GPIOG_PCLK_DI();
 800032a:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800032e:	4a0a      	ldr	r2, [pc, #40]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000330:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000334:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000336:	e009      	b.n	800034c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOH)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a0e      	ldr	r2, [pc, #56]	@ (8000374 <GPIO_PeriClockControl+0x198>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d105      	bne.n	800034c <GPIO_PeriClockControl+0x170>
					GPIOH_PCLK_DI();
 8000340:	4b05      	ldr	r3, [pc, #20]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000344:	4a04      	ldr	r2, [pc, #16]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000346:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800034a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	40021000 	.word	0x40021000
 800035c:	48000400 	.word	0x48000400
 8000360:	48000800 	.word	0x48000800
 8000364:	48000c00 	.word	0x48000c00
 8000368:	48001000 	.word	0x48001000
 800036c:	48001400 	.word	0x48001400
 8000370:	48001800 	.word	0x48001800
 8000374:	48001c00 	.word	0x48001c00

08000378 <GPIO_Init>:

/*Init and Deinit */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000378:	b480      	push	{r7}
 800037a:	b087      	sub	sp, #28
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	795b      	ldrb	r3, [r3, #5]
 8000388:	2b03      	cmp	r3, #3
 800038a:	d822      	bhi.n	80003d2 <GPIO_Init+0x5a>
	{
		temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	795b      	ldrb	r3, [r3, #5]
 8000390:	461a      	mov	r2, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	791b      	ldrb	r3, [r3, #4]
 8000396:	005b      	lsls	r3, r3, #1
 8000398:	fa02 f303 	lsl.w	r3, r2, r3
 800039c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	791b      	ldrb	r3, [r3, #4]
 80003a8:	005b      	lsls	r3, r3, #1
 80003aa:	2103      	movs	r1, #3
 80003ac:	fa01 f303 	lsl.w	r3, r1, r3
 80003b0:	43db      	mvns	r3, r3
 80003b2:	4619      	mov	r1, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	400a      	ands	r2, r1
 80003ba:	601a      	str	r2, [r3, #0]
		pGPIOHandle ->pGPIOx->MODER |= temp;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	6819      	ldr	r1, [r3, #0]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	697a      	ldr	r2, [r7, #20]
 80003c8:	430a      	orrs	r2, r1
 80003ca:	601a      	str	r2, [r3, #0]
		temp=0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
 80003d0:	e0e1      	b.n	8000596 <GPIO_Init+0x21e>
	}
	else{
		temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	795b      	ldrb	r3, [r3, #5]
 80003d6:	461a      	mov	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	791b      	ldrb	r3, [r3, #4]
 80003dc:	005b      	lsls	r3, r3, #1
 80003de:	fa02 f303 	lsl.w	r3, r2, r3
 80003e2:	617b      	str	r3, [r7, #20]
				pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	791b      	ldrb	r3, [r3, #4]
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	2103      	movs	r1, #3
 80003f2:	fa01 f303 	lsl.w	r3, r1, r3
 80003f6:	43db      	mvns	r3, r3
 80003f8:	4619      	mov	r1, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	400a      	ands	r2, r1
 8000400:	601a      	str	r2, [r3, #0]
				pGPIOHandle ->pGPIOx->MODER |= temp;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	6819      	ldr	r1, [r3, #0]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	697a      	ldr	r2, [r7, #20]
 800040e:	430a      	orrs	r2, r1
 8000410:	601a      	str	r2, [r3, #0]
				temp=0;
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	795b      	ldrb	r3, [r3, #5]
 800041a:	2b04      	cmp	r3, #4
 800041c:	d117      	bne.n	800044e <GPIO_Init+0xd6>
		{
			EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800041e:	4b47      	ldr	r3, [pc, #284]	@ (800053c <GPIO_Init+0x1c4>)
 8000420:	68db      	ldr	r3, [r3, #12]
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	7912      	ldrb	r2, [r2, #4]
 8000426:	4611      	mov	r1, r2
 8000428:	2201      	movs	r2, #1
 800042a:	408a      	lsls	r2, r1
 800042c:	4611      	mov	r1, r2
 800042e:	4a43      	ldr	r2, [pc, #268]	@ (800053c <GPIO_Init+0x1c4>)
 8000430:	430b      	orrs	r3, r1
 8000432:	60d3      	str	r3, [r2, #12]

			EXTI->RTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000434:	4b41      	ldr	r3, [pc, #260]	@ (800053c <GPIO_Init+0x1c4>)
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	7912      	ldrb	r2, [r2, #4]
 800043c:	4611      	mov	r1, r2
 800043e:	2201      	movs	r2, #1
 8000440:	408a      	lsls	r2, r1
 8000442:	43d2      	mvns	r2, r2
 8000444:	4611      	mov	r1, r2
 8000446:	4a3d      	ldr	r2, [pc, #244]	@ (800053c <GPIO_Init+0x1c4>)
 8000448:	400b      	ands	r3, r1
 800044a:	6093      	str	r3, [r2, #8]
 800044c:	e035      	b.n	80004ba <GPIO_Init+0x142>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	795b      	ldrb	r3, [r3, #5]
 8000452:	2b05      	cmp	r3, #5
 8000454:	d117      	bne.n	8000486 <GPIO_Init+0x10e>
		{
			EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000456:	4b39      	ldr	r3, [pc, #228]	@ (800053c <GPIO_Init+0x1c4>)
 8000458:	689b      	ldr	r3, [r3, #8]
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	7912      	ldrb	r2, [r2, #4]
 800045e:	4611      	mov	r1, r2
 8000460:	2201      	movs	r2, #1
 8000462:	408a      	lsls	r2, r1
 8000464:	4611      	mov	r1, r2
 8000466:	4a35      	ldr	r2, [pc, #212]	@ (800053c <GPIO_Init+0x1c4>)
 8000468:	430b      	orrs	r3, r1
 800046a:	6093      	str	r3, [r2, #8]

			EXTI->FTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800046c:	4b33      	ldr	r3, [pc, #204]	@ (800053c <GPIO_Init+0x1c4>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	7912      	ldrb	r2, [r2, #4]
 8000474:	4611      	mov	r1, r2
 8000476:	2201      	movs	r2, #1
 8000478:	408a      	lsls	r2, r1
 800047a:	43d2      	mvns	r2, r2
 800047c:	4611      	mov	r1, r2
 800047e:	4a2f      	ldr	r2, [pc, #188]	@ (800053c <GPIO_Init+0x1c4>)
 8000480:	400b      	ands	r3, r1
 8000482:	60d3      	str	r3, [r2, #12]
 8000484:	e019      	b.n	80004ba <GPIO_Init+0x142>

		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	795b      	ldrb	r3, [r3, #5]
 800048a:	2b06      	cmp	r3, #6
 800048c:	d115      	bne.n	80004ba <GPIO_Init+0x142>
		{
			EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800048e:	4b2b      	ldr	r3, [pc, #172]	@ (800053c <GPIO_Init+0x1c4>)
 8000490:	68db      	ldr	r3, [r3, #12]
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	7912      	ldrb	r2, [r2, #4]
 8000496:	4611      	mov	r1, r2
 8000498:	2201      	movs	r2, #1
 800049a:	408a      	lsls	r2, r1
 800049c:	4611      	mov	r1, r2
 800049e:	4a27      	ldr	r2, [pc, #156]	@ (800053c <GPIO_Init+0x1c4>)
 80004a0:	430b      	orrs	r3, r1
 80004a2:	60d3      	str	r3, [r2, #12]

			EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80004a4:	4b25      	ldr	r3, [pc, #148]	@ (800053c <GPIO_Init+0x1c4>)
 80004a6:	689b      	ldr	r3, [r3, #8]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	7912      	ldrb	r2, [r2, #4]
 80004ac:	4611      	mov	r1, r2
 80004ae:	2201      	movs	r2, #1
 80004b0:	408a      	lsls	r2, r1
 80004b2:	4611      	mov	r1, r2
 80004b4:	4a21      	ldr	r2, [pc, #132]	@ (800053c <GPIO_Init+0x1c4>)
 80004b6:	430b      	orrs	r3, r1
 80004b8:	6093      	str	r3, [r2, #8]
		}
	 uint8_t temp1=pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber/4;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	791b      	ldrb	r3, [r3, #4]
 80004be:	089b      	lsrs	r3, r3, #2
 80004c0:	74fb      	strb	r3, [r7, #19]
	 uint8_t temp2=pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber%4;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	791b      	ldrb	r3, [r3, #4]
 80004c6:	f003 0303 	and.w	r3, r3, #3
 80004ca:	74bb      	strb	r3, [r7, #18]
	 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80004d4:	d042      	beq.n	800055c <GPIO_Init+0x1e4>
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a19      	ldr	r2, [pc, #100]	@ (8000540 <GPIO_Init+0x1c8>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d02b      	beq.n	8000538 <GPIO_Init+0x1c0>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a17      	ldr	r2, [pc, #92]	@ (8000544 <GPIO_Init+0x1cc>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d024      	beq.n	8000534 <GPIO_Init+0x1bc>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a16      	ldr	r2, [pc, #88]	@ (8000548 <GPIO_Init+0x1d0>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d01d      	beq.n	8000530 <GPIO_Init+0x1b8>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a14      	ldr	r2, [pc, #80]	@ (800054c <GPIO_Init+0x1d4>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d016      	beq.n	800052c <GPIO_Init+0x1b4>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a13      	ldr	r2, [pc, #76]	@ (8000550 <GPIO_Init+0x1d8>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d00f      	beq.n	8000528 <GPIO_Init+0x1b0>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a11      	ldr	r2, [pc, #68]	@ (8000554 <GPIO_Init+0x1dc>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d008      	beq.n	8000524 <GPIO_Init+0x1ac>
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a10      	ldr	r2, [pc, #64]	@ (8000558 <GPIO_Init+0x1e0>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d101      	bne.n	8000520 <GPIO_Init+0x1a8>
 800051c:	2307      	movs	r3, #7
 800051e:	e01e      	b.n	800055e <GPIO_Init+0x1e6>
 8000520:	2300      	movs	r3, #0
 8000522:	e01c      	b.n	800055e <GPIO_Init+0x1e6>
 8000524:	2306      	movs	r3, #6
 8000526:	e01a      	b.n	800055e <GPIO_Init+0x1e6>
 8000528:	2305      	movs	r3, #5
 800052a:	e018      	b.n	800055e <GPIO_Init+0x1e6>
 800052c:	2304      	movs	r3, #4
 800052e:	e016      	b.n	800055e <GPIO_Init+0x1e6>
 8000530:	2303      	movs	r3, #3
 8000532:	e014      	b.n	800055e <GPIO_Init+0x1e6>
 8000534:	2302      	movs	r3, #2
 8000536:	e012      	b.n	800055e <GPIO_Init+0x1e6>
 8000538:	2301      	movs	r3, #1
 800053a:	e010      	b.n	800055e <GPIO_Init+0x1e6>
 800053c:	40010400 	.word	0x40010400
 8000540:	48000400 	.word	0x48000400
 8000544:	48000800 	.word	0x48000800
 8000548:	48000c00 	.word	0x48000c00
 800054c:	48001000 	.word	0x48001000
 8000550:	48001400 	.word	0x48001400
 8000554:	48001800 	.word	0x48001800
 8000558:	48001c00 	.word	0x48001c00
 800055c:	2300      	movs	r3, #0
 800055e:	747b      	strb	r3, [r7, #17]
	 SYSCFG_PCLK_EN();
 8000560:	4b5e      	ldr	r3, [pc, #376]	@ (80006dc <GPIO_Init+0x364>)
 8000562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000564:	4a5d      	ldr	r2, [pc, #372]	@ (80006dc <GPIO_Init+0x364>)
 8000566:	f043 0301 	orr.w	r3, r3, #1
 800056a:	6613      	str	r3, [r2, #96]	@ 0x60
	 SYSCFG->EXTICR[temp1]=portcode << (temp2 * 4);
 800056c:	7c7a      	ldrb	r2, [r7, #17]
 800056e:	7cbb      	ldrb	r3, [r7, #18]
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	fa02 f103 	lsl.w	r1, r2, r3
 8000576:	4a5a      	ldr	r2, [pc, #360]	@ (80006e0 <GPIO_Init+0x368>)
 8000578:	7cfb      	ldrb	r3, [r7, #19]
 800057a:	3302      	adds	r3, #2
 800057c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 EXTI -> IMR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000580:	4b58      	ldr	r3, [pc, #352]	@ (80006e4 <GPIO_Init+0x36c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	7912      	ldrb	r2, [r2, #4]
 8000588:	4611      	mov	r1, r2
 800058a:	2201      	movs	r2, #1
 800058c:	408a      	lsls	r2, r1
 800058e:	4611      	mov	r1, r2
 8000590:	4a54      	ldr	r2, [pc, #336]	@ (80006e4 <GPIO_Init+0x36c>)
 8000592:	430b      	orrs	r3, r1
 8000594:	6013      	str	r3, [r2, #0]
	}

	temp=0;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
	temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	799b      	ldrb	r3, [r3, #6]
 800059e:	461a      	mov	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	791b      	ldrb	r3, [r3, #4]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	fa02 f303 	lsl.w	r3, r2, r3
 80005aa:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->OSPEEDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	689a      	ldr	r2, [r3, #8]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	791b      	ldrb	r3, [r3, #4]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	2103      	movs	r1, #3
 80005ba:	fa01 f303 	lsl.w	r3, r1, r3
 80005be:	43db      	mvns	r3, r3
 80005c0:	4619      	mov	r1, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	400a      	ands	r2, r1
 80005c8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6899      	ldr	r1, [r3, #8]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	430a      	orrs	r2, r1
 80005d8:	609a      	str	r2, [r3, #8]
	temp=0;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]

	temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	79db      	ldrb	r3, [r3, #7]
 80005e2:	461a      	mov	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	fa02 f303 	lsl.w	r3, r2, r3
 80005ee:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->PUPDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	68da      	ldr	r2, [r3, #12]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	791b      	ldrb	r3, [r3, #4]
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	2103      	movs	r1, #3
 80005fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000602:	43db      	mvns	r3, r3
 8000604:	4619      	mov	r1, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	400a      	ands	r2, r1
 800060c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	68d9      	ldr	r1, [r3, #12]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	697a      	ldr	r2, [r7, #20]
 800061a:	430a      	orrs	r2, r1
 800061c:	60da      	str	r2, [r3, #12]
	temp=0;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]

	temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType<<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	7a1b      	ldrb	r3, [r3, #8]
 8000626:	461a      	mov	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	fa02 f303 	lsl.w	r3, r2, r3
 8000630:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->OTYPER &= ~(0X01 << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	685a      	ldr	r2, [r3, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	4619      	mov	r1, r3
 800063e:	2301      	movs	r3, #1
 8000640:	408b      	lsls	r3, r1
 8000642:	43db      	mvns	r3, r3
 8000644:	4619      	mov	r1, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	400a      	ands	r2, r1
 800064c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	6859      	ldr	r1, [r3, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	430a      	orrs	r2, r1
 800065c:	605a      	str	r2, [r3, #4]
	temp=0;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	795b      	ldrb	r3, [r3, #5]
 8000666:	2b02      	cmp	r3, #2
 8000668:	d132      	bne.n	80006d0 <GPIO_Init+0x358>
	{
		uint32_t temp1 ,temp2;
		temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	791b      	ldrb	r3, [r3, #4]
 800066e:	08db      	lsrs	r3, r3, #3
 8000670:	b2db      	uxtb	r3, r3
 8000672:	60fb      	str	r3, [r7, #12]
		temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	791b      	ldrb	r3, [r3, #4]
 8000678:	f003 0307 	and.w	r3, r3, #7
 800067c:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0X0f<< (4*temp2));
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	3208      	adds	r2, #8
 8000686:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	210f      	movs	r1, #15
 8000690:	fa01 f303 	lsl.w	r3, r1, r3
 8000694:	43db      	mvns	r3, r3
 8000696:	4619      	mov	r1, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4011      	ands	r1, r2
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	3208      	adds	r2, #8
 80006a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	3208      	adds	r2, #8
 80006ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7a5b      	ldrb	r3, [r3, #9]
 80006b6:	4619      	mov	r1, r3
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	fa01 f303 	lsl.w	r3, r1, r3
 80006c0:	4619      	mov	r1, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4311      	orrs	r1, r2
 80006c8:	68fa      	ldr	r2, [r7, #12]
 80006ca:	3208      	adds	r2, #8
 80006cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80006d0:	bf00      	nop
 80006d2:	371c      	adds	r7, #28
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40010000 	.word	0x40010000
 80006e4:	40010400 	.word	0x40010400

080006e8 <GPIO_ToggleOutputPin>:
void GPIO_WriteToOutputPort(GPIO_Regdef_t *pGPIOx,uint16_t value)
{
	pGPIOx->ODR=value;
}
void GPIO_ToggleOutputPin(GPIO_Regdef_t *pGPIOx,uint8_t PinNumber)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	460b      	mov	r3, r1
 80006f2:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1<<PinNumber);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	695b      	ldr	r3, [r3, #20]
 80006f8:	78fa      	ldrb	r2, [r7, #3]
 80006fa:	2101      	movs	r1, #1
 80006fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000700:	405a      	eors	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	615a      	str	r2, [r3, #20]
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <USART_PeriClockControl>:
#include "USART_driver.h"
#include "RCC_driver.h"

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d136      	bne.n	8000794 <USART_PeriClockControl+0x80>
	{
		if(pUSARTx == USART1)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a38      	ldr	r2, [pc, #224]	@ (800080c <USART_PeriClockControl+0xf8>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d106      	bne.n	800073c <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 800072e:	4b38      	ldr	r3, [pc, #224]	@ (8000810 <USART_PeriClockControl+0xfc>)
 8000730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000732:	4a37      	ldr	r2, [pc, #220]	@ (8000810 <USART_PeriClockControl+0xfc>)
 8000734:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000738:	6613      	str	r3, [r2, #96]	@ 0x60
		else if(pUSARTx == UART5)
		{
			UART5_PCLK_DI();
		}
	}
}
 800073a:	e061      	b.n	8000800 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a35      	ldr	r2, [pc, #212]	@ (8000814 <USART_PeriClockControl+0x100>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d106      	bne.n	8000752 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000744:	4b32      	ldr	r3, [pc, #200]	@ (8000810 <USART_PeriClockControl+0xfc>)
 8000746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000748:	4a31      	ldr	r2, [pc, #196]	@ (8000810 <USART_PeriClockControl+0xfc>)
 800074a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800074e:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000750:	e056      	b.n	8000800 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a30      	ldr	r2, [pc, #192]	@ (8000818 <USART_PeriClockControl+0x104>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d106      	bne.n	8000768 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 800075a:	4b2d      	ldr	r3, [pc, #180]	@ (8000810 <USART_PeriClockControl+0xfc>)
 800075c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800075e:	4a2c      	ldr	r2, [pc, #176]	@ (8000810 <USART_PeriClockControl+0xfc>)
 8000760:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000764:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000766:	e04b      	b.n	8000800 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a2c      	ldr	r2, [pc, #176]	@ (800081c <USART_PeriClockControl+0x108>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d106      	bne.n	800077e <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000770:	4b27      	ldr	r3, [pc, #156]	@ (8000810 <USART_PeriClockControl+0xfc>)
 8000772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000774:	4a26      	ldr	r2, [pc, #152]	@ (8000810 <USART_PeriClockControl+0xfc>)
 8000776:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800077a:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800077c:	e040      	b.n	8000800 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a27      	ldr	r2, [pc, #156]	@ (8000820 <USART_PeriClockControl+0x10c>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d13c      	bne.n	8000800 <USART_PeriClockControl+0xec>
			UART5_PCLK_EN();
 8000786:	4b22      	ldr	r3, [pc, #136]	@ (8000810 <USART_PeriClockControl+0xfc>)
 8000788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800078a:	4a21      	ldr	r2, [pc, #132]	@ (8000810 <USART_PeriClockControl+0xfc>)
 800078c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000790:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000792:	e035      	b.n	8000800 <USART_PeriClockControl+0xec>
		if(pUSARTx == USART1)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a1d      	ldr	r2, [pc, #116]	@ (800080c <USART_PeriClockControl+0xf8>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d106      	bne.n	80007aa <USART_PeriClockControl+0x96>
			USART1_PCLK_DI();
 800079c:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <USART_PeriClockControl+0xfc>)
 800079e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000810 <USART_PeriClockControl+0xfc>)
 80007a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80007a6:	6613      	str	r3, [r2, #96]	@ 0x60
}
 80007a8:	e02a      	b.n	8000800 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a19      	ldr	r2, [pc, #100]	@ (8000814 <USART_PeriClockControl+0x100>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d106      	bne.n	80007c0 <USART_PeriClockControl+0xac>
			USART2_PCLK_DI();
 80007b2:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <USART_PeriClockControl+0xfc>)
 80007b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007b6:	4a16      	ldr	r2, [pc, #88]	@ (8000810 <USART_PeriClockControl+0xfc>)
 80007b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80007bc:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80007be:	e01f      	b.n	8000800 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4a15      	ldr	r2, [pc, #84]	@ (8000818 <USART_PeriClockControl+0x104>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d106      	bne.n	80007d6 <USART_PeriClockControl+0xc2>
			USART3_PCLK_DI();
 80007c8:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <USART_PeriClockControl+0xfc>)
 80007ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007cc:	4a10      	ldr	r2, [pc, #64]	@ (8000810 <USART_PeriClockControl+0xfc>)
 80007ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80007d2:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80007d4:	e014      	b.n	8000800 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a10      	ldr	r2, [pc, #64]	@ (800081c <USART_PeriClockControl+0x108>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d106      	bne.n	80007ec <USART_PeriClockControl+0xd8>
			UART4_PCLK_DI();
 80007de:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <USART_PeriClockControl+0xfc>)
 80007e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000810 <USART_PeriClockControl+0xfc>)
 80007e4:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80007e8:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80007ea:	e009      	b.n	8000800 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a0c      	ldr	r2, [pc, #48]	@ (8000820 <USART_PeriClockControl+0x10c>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d105      	bne.n	8000800 <USART_PeriClockControl+0xec>
			UART5_PCLK_DI();
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <USART_PeriClockControl+0xfc>)
 80007f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007f8:	4a05      	ldr	r2, [pc, #20]	@ (8000810 <USART_PeriClockControl+0xfc>)
 80007fa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80007fe:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	40013800 	.word	0x40013800
 8000810:	40021000 	.word	0x40021000
 8000814:	40004400 	.word	0x40004400
 8000818:	40004800 	.word	0x40004800
 800081c:	40004c00 	.word	0x40004c00
 8000820:	40005000 	.word	0x40005000

08000824 <USART_Init>:
}



void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
		uint32_t tempreg=0;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]

		USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2101      	movs	r1, #1
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff6c 	bl	8000714 <USART_PeriClockControl>

		if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	791b      	ldrb	r3, [r3, #4]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d104      	bne.n	800084e <USART_Init+0x2a>
		{
			tempreg|= (1 << USART_CR1_RE);
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f043 0304 	orr.w	r3, r3, #4
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	e010      	b.n	8000870 <USART_Init+0x4c>
		}
		else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	791b      	ldrb	r3, [r3, #4]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d104      	bne.n	8000860 <USART_Init+0x3c>
		{
			tempreg |= ( 1 << USART_CR1_TE );
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	f043 0308 	orr.w	r3, r3, #8
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e007      	b.n	8000870 <USART_Init+0x4c>
		}
		else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	791b      	ldrb	r3, [r3, #4]
 8000864:	2b02      	cmp	r3, #2
 8000866:	d103      	bne.n	8000870 <USART_Init+0x4c>
		{
			tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f043 030c 	orr.w	r3, r3, #12
 800086e:	60fb      	str	r3, [r7, #12]
		}

		tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	7b5b      	ldrb	r3, [r3, #13]
 8000874:	031b      	lsls	r3, r3, #12
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	4313      	orrs	r3, r2
 800087a:	60fb      	str	r3, [r7, #12]

		if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	7b9b      	ldrb	r3, [r3, #14]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d104      	bne.n	800088e <USART_Init+0x6a>
		{
			tempreg |= ( 1 << USART_CR1_PCE);
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	e00b      	b.n	80008a6 <USART_Init+0x82>

		}
		else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	7b9b      	ldrb	r3, [r3, #14]
 8000892:	2b02      	cmp	r3, #2
 8000894:	d107      	bne.n	80008a6 <USART_Init+0x82>
		{
		    tempreg |= ( 1 << USART_CR1_PCE);
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800089c:	60fb      	str	r3, [r7, #12]
		    tempreg |= ( 1 << USART_CR1_PS);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008a4:	60fb      	str	r3, [r7, #12]
		}


		pUSARTHandle->pUSARTx->CR1 = tempreg;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	601a      	str	r2, [r3, #0]
		tempreg=0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
		tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	7b1b      	ldrb	r3, [r3, #12]
 80008b6:	031b      	lsls	r3, r3, #12
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	60fb      	str	r3, [r7, #12]
		pUSARTHandle->pUSARTx->CR2 = tempreg;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	605a      	str	r2, [r3, #4]

		tempreg=0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]


		if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	7bdb      	ldrb	r3, [r3, #15]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d104      	bne.n	80008dc <USART_Init+0xb8>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	e014      	b.n	8000906 <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	7bdb      	ldrb	r3, [r3, #15]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d104      	bne.n	80008ee <USART_Init+0xca>
		{
			tempreg |= ( 1 << USART_CR3_RTSE);
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	e00b      	b.n	8000906 <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	7bdb      	ldrb	r3, [r3, #15]
 80008f2:	2b03      	cmp	r3, #3
 80008f4:	d107      	bne.n	8000906 <USART_Init+0xe2>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008fc:	60fb      	str	r3, [r7, #12]
			tempreg |= ( 1 << USART_CR3_RTSE);
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000904:	60fb      	str	r3, [r7, #12]
		}

		pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	609a      	str	r2, [r3, #8]
		pUSARTHandle->pUSARTx->BRR=0X23;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2223      	movs	r2, #35	@ 0x23
 8000914:	60da      	str	r2, [r3, #12]
	//	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <USART_SendData>:




void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	60f8      	str	r0, [r7, #12]
 8000926:	60b9      	str	r1, [r7, #8]
 8000928:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

	for(uint32_t i = 0 ; i < Len; i++)
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
 800092e:	e031      	b.n	8000994 <USART_SendData+0x76>
	{
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000930:	bf00      	nop
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2180      	movs	r1, #128	@ 0x80
 8000938:	4618      	mov	r0, r3
 800093a:	f000 facc 	bl	8000ed6 <USART_GetFlagStatus>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d0f6      	beq.n	8000932 <USART_SendData+0x14>

		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	7b5b      	ldrb	r3, [r3, #13]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d118      	bne.n	800097e <USART_SendData+0x60>
		{
			pdata = (uint16_t*) pTxBuffer;
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800095e:	629a      	str	r2, [r3, #40]	@ 0x28

			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	7b9b      	ldrb	r3, [r3, #14]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d106      	bne.n	8000976 <USART_SendData+0x58>
			{
				pTxBuffer++;
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	3301      	adds	r3, #1
 800096c:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	3301      	adds	r3, #1
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	e00b      	b.n	800098e <USART_SendData+0x70>

			}
			else
			{
				pTxBuffer++;
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	3301      	adds	r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	e007      	b.n	800098e <USART_SendData+0x70>
			}
		}
		else
		{

			pUSARTHandle->pUSARTx->TDR = (*pTxBuffer  & (uint8_t)0xFF);
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	781a      	ldrb	r2, [r3, #0]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	629a      	str	r2, [r3, #40]	@ 0x28
			pTxBuffer++;
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	3301      	adds	r3, #1
 800098c:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	3301      	adds	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697a      	ldr	r2, [r7, #20]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	429a      	cmp	r2, r3
 800099a:	d3c9      	bcc.n	8000930 <USART_SendData+0x12>
		}
	}
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 800099c:	bf00      	nop
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2140      	movs	r1, #64	@ 0x40
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fa96 	bl	8000ed6 <USART_GetFlagStatus>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d0f6      	beq.n	800099e <USART_SendData+0x80>
}
 80009b0:	bf00      	nop
 80009b2:	bf00      	nop
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <USART_ReceiveDataIT>:

	return txstate;
}

uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b087      	sub	sp, #28
 80009be:	af00      	add	r7, sp, #0
 80009c0:	60f8      	str	r0, [r7, #12]
 80009c2:	60b9      	str	r1, [r7, #8]
 80009c4:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80009cc:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 80009ce:	7dfb      	ldrb	r3, [r7, #23]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d014      	beq.n	80009fe <USART_ReceiveDataIT+0x44>
	{
		pUSARTHandle->RxLen = Len;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2201      	movs	r2, #1
 80009e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		(void)pUSARTHandle->pUSARTx->RDR;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24

		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_RXNEIE);
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f042 0220 	orr.w	r2, r2, #32
 80009fc:	601a      	str	r2, [r3, #0]

	}

	return rxstate;
 80009fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	371c      	adds	r7, #28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <USART_IRQInterruptConfig>:


void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	460a      	mov	r2, r1
 8000a16:	71fb      	strb	r3, [r7, #7]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000a1c:	79bb      	ldrb	r3, [r7, #6]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d133      	bne.n	8000a8a <USART_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b1f      	cmp	r3, #31
 8000a26:	d80a      	bhi.n	8000a3e <USART_IRQInterruptConfig+0x32>
		{
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000a28:	4b35      	ldr	r3, [pc, #212]	@ (8000b00 <USART_IRQInterruptConfig+0xf4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	79fa      	ldrb	r2, [r7, #7]
 8000a2e:	2101      	movs	r1, #1
 8000a30:	fa01 f202 	lsl.w	r2, r1, r2
 8000a34:	4611      	mov	r1, r2
 8000a36:	4a32      	ldr	r2, [pc, #200]	@ (8000b00 <USART_IRQInterruptConfig+0xf4>)
 8000a38:	430b      	orrs	r3, r1
 8000a3a:	6013      	str	r3, [r2, #0]
		{
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8000a3c:	e059      	b.n	8000af2 <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b1f      	cmp	r3, #31
 8000a42:	d90f      	bls.n	8000a64 <USART_IRQInterruptConfig+0x58>
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a48:	d80c      	bhi.n	8000a64 <USART_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000a4a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b04 <USART_IRQInterruptConfig+0xf8>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	79fa      	ldrb	r2, [r7, #7]
 8000a50:	f002 021f 	and.w	r2, r2, #31
 8000a54:	2101      	movs	r1, #1
 8000a56:	fa01 f202 	lsl.w	r2, r1, r2
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4a29      	ldr	r2, [pc, #164]	@ (8000b04 <USART_IRQInterruptConfig+0xf8>)
 8000a5e:	430b      	orrs	r3, r1
 8000a60:	6013      	str	r3, [r2, #0]
 8000a62:	e046      	b.n	8000af2 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a68:	d943      	bls.n	8000af2 <USART_IRQInterruptConfig+0xe6>
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b5f      	cmp	r3, #95	@ 0x5f
 8000a6e:	d840      	bhi.n	8000af2 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8000a70:	4b25      	ldr	r3, [pc, #148]	@ (8000b08 <USART_IRQInterruptConfig+0xfc>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	79fa      	ldrb	r2, [r7, #7]
 8000a76:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a80:	4611      	mov	r1, r2
 8000a82:	4a21      	ldr	r2, [pc, #132]	@ (8000b08 <USART_IRQInterruptConfig+0xfc>)
 8000a84:	430b      	orrs	r3, r1
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	e033      	b.n	8000af2 <USART_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b1f      	cmp	r3, #31
 8000a8e:	d80a      	bhi.n	8000aa6 <USART_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000a90:	4b1e      	ldr	r3, [pc, #120]	@ (8000b0c <USART_IRQInterruptConfig+0x100>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	79fa      	ldrb	r2, [r7, #7]
 8000a96:	2101      	movs	r1, #1
 8000a98:	fa01 f202 	lsl.w	r2, r1, r2
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	4a1b      	ldr	r2, [pc, #108]	@ (8000b0c <USART_IRQInterruptConfig+0x100>)
 8000aa0:	430b      	orrs	r3, r1
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	e025      	b.n	8000af2 <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	2b1f      	cmp	r3, #31
 8000aaa:	d90f      	bls.n	8000acc <USART_IRQInterruptConfig+0xc0>
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ab0:	d80c      	bhi.n	8000acc <USART_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000ab2:	4b17      	ldr	r3, [pc, #92]	@ (8000b10 <USART_IRQInterruptConfig+0x104>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	f002 021f 	and.w	r2, r2, #31
 8000abc:	2101      	movs	r1, #1
 8000abe:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <USART_IRQInterruptConfig+0x104>)
 8000ac6:	430b      	orrs	r3, r1
 8000ac8:	6013      	str	r3, [r2, #0]
 8000aca:	e012      	b.n	8000af2 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2b05      	cmp	r3, #5
 8000ad0:	d90f      	bls.n	8000af2 <USART_IRQInterruptConfig+0xe6>
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	2b5f      	cmp	r3, #95	@ 0x5f
 8000ad6:	d80c      	bhi.n	8000af2 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <USART_IRQInterruptConfig+0x108>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	79fa      	ldrb	r2, [r7, #7]
 8000ade:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4a0a      	ldr	r2, [pc, #40]	@ (8000b14 <USART_IRQInterruptConfig+0x108>)
 8000aec:	430b      	orrs	r3, r1
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	e7ff      	b.n	8000af2 <USART_IRQInterruptConfig+0xe6>
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000e100 	.word	0xe000e100
 8000b04:	e000e104 	.word	0xe000e104
 8000b08:	e000e10c 	.word	0xe000e10c
 8000b0c:	e000e180 	.word	0xe000e180
 8000b10:	e000e184 	.word	0xe000e184
 8000b14:	e000e18c 	.word	0xe000e18c

08000b18 <USART_IRQHandling>:
	*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );

}

void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

	uint32_t temp1 , temp2,temp3;
	uint16_t *pdata;

	temp1 = pUSARTHandle->pUSARTx->ISR & ( 1 << USART_ISR_TC);  /*TC flag */
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b2a:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TCIE);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b36:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d021      	beq.n	8000b82 <USART_IRQHandling+0x6a>
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d01e      	beq.n	8000b82 <USART_IRQHandling+0x6a>
	{
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d119      	bne.n	8000b82 <USART_IRQHandling+0x6a>
		{
			if(! pUSARTHandle->TxLen )
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d115      	bne.n	8000b82 <USART_IRQHandling+0x6a>
			{
				pUSARTHandle->pUSARTx->ISR &= ~( 1 << USART_ISR_TC);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	69da      	ldr	r2, [r3, #28]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b64:	61da      	str	r2, [r3, #28]
				pUSARTHandle->TxBusyState = USART_READY;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 2020 	strb.w	r2, [r3, #32]
				pUSARTHandle->pTxBuffer = NULL;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
				pUSARTHandle->TxLen = 0;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f000 fa5f 	bl	8001040 <USART_ApplicationEventCallback>
			}
		}
	}
	temp1=0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
	temp2=0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]

	temp1 = pUSARTHandle->pUSARTx->ISR & ( 1 << USART_ISR_TXE);  /*TXE flag */
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	69db      	ldr	r3, [r3, #28]
 8000b90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b94:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TXEIE);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ba0:	613b      	str	r3, [r7, #16]
	if(temp1 && temp2 )
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d055      	beq.n	8000c54 <USART_IRQHandling+0x13c>
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d052      	beq.n	8000c54 <USART_IRQHandling+0x13c>
	{
		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d14d      	bne.n	8000c54 <USART_IRQHandling+0x13c>
		{
			if(pUSARTHandle->TxLen > 0)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d03d      	beq.n	8000c3c <USART_IRQHandling+0x124>
			{
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	7b5b      	ldrb	r3, [r3, #13]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d129      	bne.n	8000c1c <USART_IRQHandling+0x104>
				{
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	691b      	ldr	r3, [r3, #16]
 8000bcc:	60fb      	str	r3, [r7, #12]
					pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000bdc:	629a      	str	r2, [r3, #40]	@ 0x28
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	7b9b      	ldrb	r3, [r3, #14]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d10f      	bne.n	8000c06 <USART_IRQHandling+0xee>
					{
						pUSARTHandle->pTxBuffer++;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	691b      	ldr	r3, [r3, #16]
 8000bea:	1c5a      	adds	r2, r3, #1
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=2;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	1e9a      	subs	r2, r3, #2
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	619a      	str	r2, [r3, #24]
 8000c04:	e01a      	b.n	8000c3c <USART_IRQHandling+0x124>
					}
					else
					{
						pUSARTHandle->pTxBuffer++;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	1c5a      	adds	r2, r3, #1
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=1;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	1e5a      	subs	r2, r3, #1
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	619a      	str	r2, [r3, #24]
 8000c1a:	e00f      	b.n	8000c3c <USART_IRQHandling+0x124>
					}
				}
				else
				{
					pUSARTHandle->pUSARTx->TDR = (*pUSARTHandle->pTxBuffer  & (uint8_t)0xFF);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	691b      	ldr	r3, [r3, #16]
 8000c20:	781a      	ldrb	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	629a      	str	r2, [r3, #40]	@ 0x28
					pUSARTHandle->pTxBuffer++;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	1c5a      	adds	r2, r3, #1
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	611a      	str	r2, [r3, #16]
					pUSARTHandle->TxLen-=1;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	1e5a      	subs	r2, r3, #1
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	619a      	str	r2, [r3, #24]
				}

			}
			if (pUSARTHandle->TxLen == 0 )
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d107      	bne.n	8000c54 <USART_IRQHandling+0x13c>
			{
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TXEIE);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000c52:	601a      	str	r2, [r3, #0]
			}
		}
	}
	temp1=0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
	temp2=0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]

	temp1 = pUSARTHandle->pUSARTx->ISR & ( 1 << USART_ISR_RXNE);  /* RXNE flag*/
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	f003 0320 	and.w	r3, r3, #32
 8000c66:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f003 0320 	and.w	r3, r3, #32
 8000c72:	613b      	str	r3, [r7, #16]
	if(temp1 && temp2 )
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d073      	beq.n	8000d62 <USART_IRQHandling+0x24a>
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d070      	beq.n	8000d62 <USART_IRQHandling+0x24a>
	{
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d16b      	bne.n	8000d62 <USART_IRQHandling+0x24a>
		{
			if(pUSARTHandle->RxLen > 0)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d053      	beq.n	8000d3a <USART_IRQHandling+0x222>
			{
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	7b5b      	ldrb	r3, [r3, #13]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d12f      	bne.n	8000cfa <USART_IRQHandling+0x1e2>
				{
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	7b9b      	ldrb	r3, [r3, #14]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d119      	bne.n	8000cd6 <USART_IRQHandling+0x1be>
					{
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->RDR  & (uint16_t)0x01FF);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000cb2:	b292      	uxth	r2, r2
 8000cb4:	801a      	strh	r2, [r3, #0]
						pUSARTHandle->pRxBuffer++;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	1c5a      	adds	r2, r3, #1
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen-=2;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	1e9a      	subs	r2, r3, #2
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	61da      	str	r2, [r3, #28]
 8000cd4:	e031      	b.n	8000d3a <USART_IRQHandling+0x222>
					}
					else
					{
						 *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->RDR  & (uint8_t)0xFF);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	701a      	strb	r2, [r3, #0]
						 pUSARTHandle->pRxBuffer++;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	1c5a      	adds	r2, r3, #1
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	615a      	str	r2, [r3, #20]
						 pUSARTHandle->RxLen-=1;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	1e5a      	subs	r2, r3, #1
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	61da      	str	r2, [r3, #28]
 8000cf8:	e01f      	b.n	8000d3a <USART_IRQHandling+0x222>
					}
				}
				else
				{
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	7b9b      	ldrb	r3, [r3, #14]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d107      	bne.n	8000d12 <USART_IRQHandling+0x1fa>
					{
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->RDR  & (uint8_t)0xFF);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	e009      	b.n	8000d26 <USART_IRQHandling+0x20e>
					}
					else
					{
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->RDR  & (uint8_t)0x7F);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	701a      	strb	r2, [r3, #0]
					}
					pUSARTHandle->pRxBuffer++;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	1c5a      	adds	r2, r3, #1
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	615a      	str	r2, [r3, #20]
					 pUSARTHandle->RxLen-=1;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	69db      	ldr	r3, [r3, #28]
 8000d34:	1e5a      	subs	r2, r3, #1
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	61da      	str	r2, [r3, #28]
				}
			}

			if(! pUSARTHandle->RxLen)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10f      	bne.n	8000d62 <USART_IRQHandling+0x24a>
			{
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f022 0220 	bic.w	r2, r2, #32
 8000d50:	601a      	str	r2, [r3, #0]
				pUSARTHandle->RxBusyState = USART_READY;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 f96f 	bl	8001040 <USART_ApplicationEventCallback>
			}
		}
	}
	temp1=0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
	temp2=0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]

	temp1 = pUSARTHandle->pUSARTx->ISR & ( 1 << USART_ISR_CTS);  /*CTS flag  not for UART4 and UART5*/
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	69db      	ldr	r3, [r3, #28]
 8000d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d74:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d80:	613b      	str	r3, [r7, #16]
	temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSIE);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d8c:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 &&temp3)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d011      	beq.n	8000db8 <USART_IRQHandling+0x2a0>
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d00e      	beq.n	8000db8 <USART_IRQHandling+0x2a0>
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00b      	beq.n	8000db8 <USART_IRQHandling+0x2a0>
	{
		pUSARTHandle->pUSARTx->ISR &=  ~( 1 << USART_ISR_CTS);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	69da      	ldr	r2, [r3, #28]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000dae:	61da      	str	r2, [r3, #28]
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 8000db0:	2103      	movs	r1, #3
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f000 f944 	bl	8001040 <USART_ApplicationEventCallback>
	}
	temp1=0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
	temp2=0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
	temp3=0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60bb      	str	r3, [r7, #8]

	temp1 = pUSARTHandle->pUSARTx->ISR & ( 1 << USART_ISR_IDLE);     /*IDLE detection flag */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	f003 0310 	and.w	r3, r3, #16
 8000dce:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_IDLEIE);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0310 	and.w	r3, r3, #16
 8000dda:	613b      	str	r3, [r7, #16]
	if(temp1 && temp2)
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d00f      	beq.n	8000e02 <USART_IRQHandling+0x2ea>
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d00c      	beq.n	8000e02 <USART_IRQHandling+0x2ea>
	{
		temp1 = pUSARTHandle->pUSARTx->ISR &= ~( 1 << USART_ISR_IDLE);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	6812      	ldr	r2, [r2, #0]
 8000df2:	f023 0310 	bic.w	r3, r3, #16
 8000df6:	61d3      	str	r3, [r2, #28]
 8000df8:	617b      	str	r3, [r7, #20]
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 8000dfa:	2102      	movs	r1, #2
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f000 f91f 	bl	8001040 <USART_ApplicationEventCallback>
	}
	temp1=0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
	temp2=0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]

	temp1 = pUSARTHandle->pUSARTx->ISR & USART_ISR_ORE;		/*Overrun detection flag */
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	69db      	ldr	r3, [r3, #28]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0305 	and.w	r3, r3, #5
 8000e20:	613b      	str	r3, [r7, #16]
	if(temp1  && temp2 )
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d006      	beq.n	8000e36 <USART_IRQHandling+0x31e>
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <USART_IRQHandling+0x31e>
	{
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8000e2e:	2107      	movs	r1, #7
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f000 f905 	bl	8001040 <USART_ApplicationEventCallback>
	}
	temp1=0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
	temp2=0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]

	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_EIE) ;	/*Error Flag */
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	613b      	str	r3, [r7, #16]
	if(temp2)
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d01e      	beq.n	8000e8e <USART_IRQHandling+0x376>
	{
		temp1 = pUSARTHandle->pUSARTx->ISR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	617b      	str	r3, [r7, #20]
		if(temp1 & ( 1 << USART_ISR_FE))
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <USART_IRQHandling+0x352>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 8000e62:	2105      	movs	r1, #5
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 f8eb 	bl	8001040 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_ISR_NF) )
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d003      	beq.n	8000e7c <USART_IRQHandling+0x364>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 8000e74:	2106      	movs	r1, #6
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 f8e2 	bl	8001040 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_ISR_ORE) )
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <USART_IRQHandling+0x376>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8000e86:	2107      	movs	r1, #7
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f000 f8d9 	bl	8001040 <USART_ApplicationEventCallback>
		}
	}
	temp1=0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
	temp2=0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]

}
 8000e96:	bf00      	nop
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <USART_PeripheralControl>:

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000eaa:	78fb      	ldrb	r3, [r7, #3]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d106      	bne.n	8000ebe <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |=(1<<USART_CR1_UE);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f043 0201 	orr.w	r2, r3, #1
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
	}
}
 8000ebc:	e005      	b.n	8000eca <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f023 0201 	bic.w	r2, r3, #1
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	601a      	str	r2, [r3, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <USART_GetFlagStatus>:


uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx,uint8_t StatusFlagName)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx ->ISR & StatusFlagName)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69da      	ldr	r2, [r3, #28]
 8000ee6:	78fb      	ldrb	r3, [r7, #3]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <USART_GetFlagStatus+0x1c>
	{
		return SET;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e000      	b.n	8000ef4 <USART_GetFlagStatus+0x1e>
	}
	return RESET;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <USART2_Init>:
USART_Handle_t usart2_handle; // USART2 handle
uint8_t rx_data;              // variable to store received byte

// Configure USART2 peripheral
void USART2_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
    usart2_handle.pUSARTx = USART2;                           // use USART2
 8000f04:	4b0d      	ldr	r3, [pc, #52]	@ (8000f3c <USART2_Init+0x3c>)
 8000f06:	4a0e      	ldr	r2, [pc, #56]	@ (8000f40 <USART2_Init+0x40>)
 8000f08:	601a      	str	r2, [r3, #0]
    usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200; // baud = 115200
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <USART2_Init+0x3c>)
 8000f0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f10:	609a      	str	r2, [r3, #8]
    usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE; // no RTS/CTS
 8000f12:	4b0a      	ldr	r3, [pc, #40]	@ (8000f3c <USART2_Init+0x3c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	73da      	strb	r2, [r3, #15]
    usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;  // enable TX + RX
 8000f18:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <USART2_Init+0x3c>)
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	711a      	strb	r2, [r3, #4]
    usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1; // 1 stop bit
 8000f1e:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <USART2_Init+0x3c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	731a      	strb	r2, [r3, #12]
    usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS; // 8-bit data
 8000f24:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <USART2_Init+0x3c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	735a      	strb	r2, [r3, #13]
    usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE; // no parity
 8000f2a:	4b04      	ldr	r3, [pc, #16]	@ (8000f3c <USART2_Init+0x3c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	739a      	strb	r2, [r3, #14]
    USART_Init(&usart2_handle);  // apply config to hardware
 8000f30:	4802      	ldr	r0, [pc, #8]	@ (8000f3c <USART2_Init+0x3c>)
 8000f32:	f7ff fc77 	bl	8000824 <USART_Init>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	2000001c 	.word	0x2000001c
 8000f40:	40004400 	.word	0x40004400

08000f44 <USART2_GPIOInit>:

// Configure PA2 (TX) and PA3 (RX) pins
void USART2_GPIOInit(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
    GPIO_Handle_t usart_gpios;
    usart_gpios.pGPIOx = GPIOA;
 8000f4a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f4e:	607b      	str	r3, [r7, #4]
    usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;   // alternate function
 8000f50:	2302      	movs	r3, #2
 8000f52:	727b      	strb	r3, [r7, #9]
    usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP; // push-pull output
 8000f54:	2300      	movs	r3, #0
 8000f56:	733b      	strb	r3, [r7, #12]
    usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU; // enable pull-up
 8000f58:	2301      	movs	r3, #1
 8000f5a:	72fb      	strb	r3, [r7, #11]
    usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;  // fast speed
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	72bb      	strb	r3, [r7, #10]
    usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode = 7;           // AF7 for USART2
 8000f60:	2307      	movs	r3, #7
 8000f62:	737b      	strb	r3, [r7, #13]

    // PA2 -> USART2_TX
    usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	723b      	strb	r3, [r7, #8]
    GPIO_PeriClockControl(GPIOA, ENABLE); // enable GPIOA clock
 8000f68:	2101      	movs	r1, #1
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6e:	f7ff f935 	bl	80001dc <GPIO_PeriClockControl>
    GPIO_Init(&usart_gpios);
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff f9ff 	bl	8000378 <GPIO_Init>

    // PA3 -> USART2_RX
    usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&usart_gpios);
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff f9f9 	bl	8000378 <GPIO_Init>
}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <GPIO_LedInit>:

// Configure PA5 as LED output
void GPIO_LedInit(void)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b084      	sub	sp, #16
 8000f92:	af00      	add	r7, sp, #0
    GPIO_Handle_t GpioLed;
    GpioLed.pGPIOx = GPIOA;
 8000f94:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f98:	607b      	str	r3, [r7, #4]
    GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5; // PA5
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	723b      	strb	r3, [r7, #8]
    GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;   // output mode
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	727b      	strb	r3, [r7, #9]
    GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	72bb      	strb	r3, [r7, #10]
    GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	733b      	strb	r3, [r7, #12]
    GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000faa:	2300      	movs	r3, #0
 8000fac:	72fb      	strb	r3, [r7, #11]
    GPIO_Init(&GpioLed);
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff f9e1 	bl	8000378 <GPIO_Init>
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <main>:

int main(void)
{
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
    USART2_GPIOInit();    // setup TX/RX pins
 8000fc6:	f7ff ffbd 	bl	8000f44 <USART2_GPIOInit>
    USART2_Init();        // setup USART2
 8000fca:	f7ff ff99 	bl	8000f00 <USART2_Init>
    GPIO_LedInit();       // setup LED
 8000fce:	f7ff ffde 	bl	8000f8e <GPIO_LedInit>

    USART_IRQInterruptConfig(IRQ_NO_USART2, ENABLE); // enable USART2 interrupt in NVIC
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	2026      	movs	r0, #38	@ 0x26
 8000fd6:	f7ff fd19 	bl	8000a0c <USART_IRQInterruptConfig>
    USART_PeripheralControl(USART2, ENABLE);         // enable USART2 module
 8000fda:	2101      	movs	r1, #1
 8000fdc:	480f      	ldr	r0, [pc, #60]	@ (800101c <main+0x5c>)
 8000fde:	f7ff ff5e 	bl	8000e9e <USART_PeripheralControl>

    // Send startup message
    char init_msg[] = "UART Initialized\r\n";
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <main+0x60>)
 8000fe4:	1d3c      	adds	r4, r7, #4
 8000fe6:	461d      	mov	r5, r3
 8000fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fec:	682b      	ldr	r3, [r5, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	8022      	strh	r2, [r4, #0]
 8000ff2:	3402      	adds	r4, #2
 8000ff4:	0c1b      	lsrs	r3, r3, #16
 8000ff6:	7023      	strb	r3, [r4, #0]
    USART_SendData(&usart2_handle, (uint8_t*)init_msg, strlen(init_msg));
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff f8e6 	bl	80001cc <strlen>
 8001000:	4602      	mov	r2, r0
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	4619      	mov	r1, r3
 8001006:	4807      	ldr	r0, [pc, #28]	@ (8001024 <main+0x64>)
 8001008:	f7ff fc89 	bl	800091e <USART_SendData>

    // enable RX interrupt for 1 byte
    USART_ReceiveDataIT(&usart2_handle, &rx_data, 1);
 800100c:	2201      	movs	r2, #1
 800100e:	4906      	ldr	r1, [pc, #24]	@ (8001028 <main+0x68>)
 8001010:	4804      	ldr	r0, [pc, #16]	@ (8001024 <main+0x64>)
 8001012:	f7ff fcd2 	bl	80009ba <USART_ReceiveDataIT>

    while (1)
 8001016:	bf00      	nop
 8001018:	e7fd      	b.n	8001016 <main+0x56>
 800101a:	bf00      	nop
 800101c:	40004400 	.word	0x40004400
 8001020:	08001160 	.word	0x08001160
 8001024:	2000001c 	.word	0x2000001c
 8001028:	20000040 	.word	0x20000040

0800102c <USART2_IRQHandler>:
    }
}

// ISR for USART2
void USART2_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
    USART_IRQHandling(&usart2_handle); // delegate handling to driver
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <USART2_IRQHandler+0x10>)
 8001032:	f7ff fd71 	bl	8000b18 <USART_IRQHandling>
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2000001c 	.word	0x2000001c

08001040 <USART_ApplicationEventCallback>:

// Called when RX complete interrupt occurs
void USART_ApplicationEventCallback(USART_Handle_t *pUSARTHandle, uint8_t ApEv)
{
 8001040:	b5b0      	push	{r4, r5, r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	70fb      	strb	r3, [r7, #3]
    if (ApEv == USART_EVENT_RX_CMPLT) // check if RX is complete
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d124      	bne.n	800109c <USART_ApplicationEventCallback+0x5c>
    {
        // notify via UART
        char msg[] = "Interrupt generated\r\n";
 8001052:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <USART_ApplicationEventCallback+0x64>)
 8001054:	f107 0408 	add.w	r4, r7, #8
 8001058:	461d      	mov	r5, r3
 800105a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001062:	6020      	str	r0, [r4, #0]
 8001064:	3404      	adds	r4, #4
 8001066:	8021      	strh	r1, [r4, #0]
        USART_SendData(pUSARTHandle, (uint8_t*)msg, strlen(msg));
 8001068:	f107 0308 	add.w	r3, r7, #8
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff f8ad 	bl	80001cc <strlen>
 8001072:	4602      	mov	r2, r0
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	4619      	mov	r1, r3
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff fc4f 	bl	800091e <USART_SendData>

        // toggle LED if 'a' was received
        if (rx_data == 'a')
 8001080:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <USART_ApplicationEventCallback+0x68>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b61      	cmp	r3, #97	@ 0x61
 8001086:	d104      	bne.n	8001092 <USART_ApplicationEventCallback+0x52>
            GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_5);
 8001088:	2105      	movs	r1, #5
 800108a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800108e:	f7ff fb2b 	bl	80006e8 <GPIO_ToggleOutputPin>

        // re-enable RX interrupt for next byte
        USART_ReceiveDataIT(pUSARTHandle, &rx_data, 1);
 8001092:	2201      	movs	r2, #1
 8001094:	4904      	ldr	r1, [pc, #16]	@ (80010a8 <USART_ApplicationEventCallback+0x68>)
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fc8f 	bl	80009ba <USART_ReceiveDataIT>
    }
}
 800109c:	bf00      	nop
 800109e:	3720      	adds	r7, #32
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bdb0      	pop	{r4, r5, r7, pc}
 80010a4:	08001174 	.word	0x08001174
 80010a8:	20000040 	.word	0x20000040

080010ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010ac:	480d      	ldr	r0, [pc, #52]	@ (80010e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b4:	480c      	ldr	r0, [pc, #48]	@ (80010e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010b6:	490d      	ldr	r1, [pc, #52]	@ (80010ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80010b8:	4a0d      	ldr	r2, [pc, #52]	@ (80010f0 <LoopForever+0xe>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010cc:	4c0a      	ldr	r4, [pc, #40]	@ (80010f8 <LoopForever+0x16>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80010da:	f000 f811 	bl	8001100 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80010de:	f7ff ff6f 	bl	8000fc0 <main>

080010e2 <LoopForever>:

LoopForever:
  b LoopForever
 80010e2:	e7fe      	b.n	80010e2 <LoopForever>
  ldr   r0, =_estack
 80010e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80010f0:	0800119c 	.word	0x0800119c
  ldr r2, =_sbss
 80010f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80010f8:	20000044 	.word	0x20000044

080010fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC1_2_IRQHandler>
	...

08001100 <__libc_init_array>:
 8001100:	b570      	push	{r4, r5, r6, lr}
 8001102:	4d0d      	ldr	r5, [pc, #52]	@ (8001138 <__libc_init_array+0x38>)
 8001104:	4c0d      	ldr	r4, [pc, #52]	@ (800113c <__libc_init_array+0x3c>)
 8001106:	1b64      	subs	r4, r4, r5
 8001108:	10a4      	asrs	r4, r4, #2
 800110a:	2600      	movs	r6, #0
 800110c:	42a6      	cmp	r6, r4
 800110e:	d109      	bne.n	8001124 <__libc_init_array+0x24>
 8001110:	4d0b      	ldr	r5, [pc, #44]	@ (8001140 <__libc_init_array+0x40>)
 8001112:	4c0c      	ldr	r4, [pc, #48]	@ (8001144 <__libc_init_array+0x44>)
 8001114:	f000 f818 	bl	8001148 <_init>
 8001118:	1b64      	subs	r4, r4, r5
 800111a:	10a4      	asrs	r4, r4, #2
 800111c:	2600      	movs	r6, #0
 800111e:	42a6      	cmp	r6, r4
 8001120:	d105      	bne.n	800112e <__libc_init_array+0x2e>
 8001122:	bd70      	pop	{r4, r5, r6, pc}
 8001124:	f855 3b04 	ldr.w	r3, [r5], #4
 8001128:	4798      	blx	r3
 800112a:	3601      	adds	r6, #1
 800112c:	e7ee      	b.n	800110c <__libc_init_array+0xc>
 800112e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001132:	4798      	blx	r3
 8001134:	3601      	adds	r6, #1
 8001136:	e7f2      	b.n	800111e <__libc_init_array+0x1e>
 8001138:	08001194 	.word	0x08001194
 800113c:	08001194 	.word	0x08001194
 8001140:	08001194 	.word	0x08001194
 8001144:	08001198 	.word	0x08001198

08001148 <_init>:
 8001148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800114a:	bf00      	nop
 800114c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800114e:	bc08      	pop	{r3}
 8001150:	469e      	mov	lr, r3
 8001152:	4770      	bx	lr

08001154 <_fini>:
 8001154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001156:	bf00      	nop
 8001158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800115a:	bc08      	pop	{r3}
 800115c:	469e      	mov	lr, r3
 800115e:	4770      	bx	lr
