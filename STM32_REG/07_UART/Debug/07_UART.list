
07_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b28  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cb4  08000cb4  00002034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cb4  08000cb4  00002034  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000cb4  08000cb4  00002034  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000cb4  08000cb4  00002034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cb4  08000cb4  00001cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000cb8  08000cb8  00001cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08000cbc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00002034  2**0
                  CONTENTS
 10 .bss          00000040  20000034  20000034  00002034  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  00002034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001614  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000491  00000000  00000000  00003678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000128  00000000  00000000  00003b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d4  00000000  00000000  00003c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000027dd  00000000  00000000  00003d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000018cd  00000000  00000000  000064e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a29b  00000000  00000000  00007db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00012051  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003ec  00000000  00000000  00012094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00012480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000034 	.word	0x20000034
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000c9c 	.word	0x08000c9c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000038 	.word	0x20000038
 80001c8:	08000c9c 	.word	0x08000c9c

080001cc <GPIO_PeriClockControl>:
#include "GPIO_driver.h"

/*peripheral clock setup */
void GPIO_PeriClockControl(GPIO_Regdef_t *pGPIOx , uint8_t EnorDi)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	460b      	mov	r3, r1
 80001d6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80001d8:	78fb      	ldrb	r3, [r7, #3]
 80001da:	2b01      	cmp	r3, #1
 80001dc:	d157      	bne.n	800028e <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80001e4:	d106      	bne.n	80001f4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80001e6:	4b58      	ldr	r3, [pc, #352]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80001e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001ea:	4a57      	ldr	r2, [pc, #348]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80001ec:	f043 0301 	orr.w	r3, r3, #1
 80001f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
				else if(pGPIOx==GPIOH)
				{
					GPIOH_PCLK_DI();
				}
	}
}
 80001f2:	e0a3      	b.n	800033c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOB)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4a55      	ldr	r2, [pc, #340]	@ (800034c <GPIO_PeriClockControl+0x180>)
 80001f8:	4293      	cmp	r3, r2
 80001fa:	d106      	bne.n	800020a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80001fc:	4b52      	ldr	r3, [pc, #328]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80001fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000200:	4a51      	ldr	r2, [pc, #324]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000202:	f043 0302 	orr.w	r3, r3, #2
 8000206:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000208:	e098      	b.n	800033c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOC)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a50      	ldr	r2, [pc, #320]	@ (8000350 <GPIO_PeriClockControl+0x184>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d106      	bne.n	8000220 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000212:	4b4d      	ldr	r3, [pc, #308]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000216:	4a4c      	ldr	r2, [pc, #304]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000218:	f043 0304 	orr.w	r3, r3, #4
 800021c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800021e:	e08d      	b.n	800033c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOD)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a4c      	ldr	r2, [pc, #304]	@ (8000354 <GPIO_PeriClockControl+0x188>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d106      	bne.n	8000236 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000228:	4b47      	ldr	r3, [pc, #284]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800022a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800022c:	4a46      	ldr	r2, [pc, #280]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800022e:	f043 0308 	orr.w	r3, r3, #8
 8000232:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000234:	e082      	b.n	800033c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOE)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4a47      	ldr	r2, [pc, #284]	@ (8000358 <GPIO_PeriClockControl+0x18c>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d106      	bne.n	800024c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800023e:	4b42      	ldr	r3, [pc, #264]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000242:	4a41      	ldr	r2, [pc, #260]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000244:	f043 0310 	orr.w	r3, r3, #16
 8000248:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800024a:	e077      	b.n	800033c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOF)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4a43      	ldr	r2, [pc, #268]	@ (800035c <GPIO_PeriClockControl+0x190>)
 8000250:	4293      	cmp	r3, r2
 8000252:	d106      	bne.n	8000262 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000254:	4b3c      	ldr	r3, [pc, #240]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000258:	4a3b      	ldr	r2, [pc, #236]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800025a:	f043 0320 	orr.w	r3, r3, #32
 800025e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000260:	e06c      	b.n	800033c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOG)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4a3e      	ldr	r2, [pc, #248]	@ (8000360 <GPIO_PeriClockControl+0x194>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d106      	bne.n	8000278 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800026a:	4b37      	ldr	r3, [pc, #220]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800026c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800026e:	4a36      	ldr	r2, [pc, #216]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000274:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000276:	e061      	b.n	800033c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOH)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a3a      	ldr	r2, [pc, #232]	@ (8000364 <GPIO_PeriClockControl+0x198>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d15d      	bne.n	800033c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000280:	4b31      	ldr	r3, [pc, #196]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000284:	4a30      	ldr	r2, [pc, #192]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800028a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800028c:	e056      	b.n	800033c <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000294:	d106      	bne.n	80002a4 <GPIO_PeriClockControl+0xd8>
					GPIOA_PCLK_DI();
 8000296:	4b2c      	ldr	r3, [pc, #176]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800029a:	4a2b      	ldr	r2, [pc, #172]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800029c:	f023 0301 	bic.w	r3, r3, #1
 80002a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002a2:	e04b      	b.n	800033c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOB)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a29      	ldr	r2, [pc, #164]	@ (800034c <GPIO_PeriClockControl+0x180>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d106      	bne.n	80002ba <GPIO_PeriClockControl+0xee>
					GPIOB_PCLK_DI();
 80002ac:	4b26      	ldr	r3, [pc, #152]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002b0:	4a25      	ldr	r2, [pc, #148]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002b2:	f023 0302 	bic.w	r3, r3, #2
 80002b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002b8:	e040      	b.n	800033c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOC)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a24      	ldr	r2, [pc, #144]	@ (8000350 <GPIO_PeriClockControl+0x184>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d106      	bne.n	80002d0 <GPIO_PeriClockControl+0x104>
					GPIOC_PCLK_DI();
 80002c2:	4b21      	ldr	r3, [pc, #132]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002c6:	4a20      	ldr	r2, [pc, #128]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002c8:	f023 0304 	bic.w	r3, r3, #4
 80002cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002ce:	e035      	b.n	800033c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOD)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a20      	ldr	r2, [pc, #128]	@ (8000354 <GPIO_PeriClockControl+0x188>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d106      	bne.n	80002e6 <GPIO_PeriClockControl+0x11a>
					GPIOD_PCLK_DI();
 80002d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002de:	f023 0308 	bic.w	r3, r3, #8
 80002e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002e4:	e02a      	b.n	800033c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOE)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000358 <GPIO_PeriClockControl+0x18c>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d106      	bne.n	80002fc <GPIO_PeriClockControl+0x130>
					GPIOE_PCLK_DI();
 80002ee:	4b16      	ldr	r3, [pc, #88]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002f2:	4a15      	ldr	r2, [pc, #84]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002f4:	f023 0310 	bic.w	r3, r3, #16
 80002f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002fa:	e01f      	b.n	800033c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOF)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4a17      	ldr	r2, [pc, #92]	@ (800035c <GPIO_PeriClockControl+0x190>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d106      	bne.n	8000312 <GPIO_PeriClockControl+0x146>
					GPIOF_PCLK_DI();
 8000304:	4b10      	ldr	r3, [pc, #64]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000308:	4a0f      	ldr	r2, [pc, #60]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800030a:	f023 0320 	bic.w	r3, r3, #32
 800030e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000310:	e014      	b.n	800033c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOG)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a12      	ldr	r2, [pc, #72]	@ (8000360 <GPIO_PeriClockControl+0x194>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <GPIO_PeriClockControl+0x15c>
					GPIOG_PCLK_DI();
 800031a:	4b0b      	ldr	r3, [pc, #44]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800031c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800031e:	4a0a      	ldr	r2, [pc, #40]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000324:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000326:	e009      	b.n	800033c <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOH)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a0e      	ldr	r2, [pc, #56]	@ (8000364 <GPIO_PeriClockControl+0x198>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d105      	bne.n	800033c <GPIO_PeriClockControl+0x170>
					GPIOH_PCLK_DI();
 8000330:	4b05      	ldr	r3, [pc, #20]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000334:	4a04      	ldr	r2, [pc, #16]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000336:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800033a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	40021000 	.word	0x40021000
 800034c:	48000400 	.word	0x48000400
 8000350:	48000800 	.word	0x48000800
 8000354:	48000c00 	.word	0x48000c00
 8000358:	48001000 	.word	0x48001000
 800035c:	48001400 	.word	0x48001400
 8000360:	48001800 	.word	0x48001800
 8000364:	48001c00 	.word	0x48001c00

08000368 <GPIO_Init>:

/*Init and Deinit */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000368:	b480      	push	{r7}
 800036a:	b087      	sub	sp, #28
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	795b      	ldrb	r3, [r3, #5]
 8000378:	2b03      	cmp	r3, #3
 800037a:	d822      	bhi.n	80003c2 <GPIO_Init+0x5a>
	{
		temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	795b      	ldrb	r3, [r3, #5]
 8000380:	461a      	mov	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	791b      	ldrb	r3, [r3, #4]
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	fa02 f303 	lsl.w	r3, r2, r3
 800038c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	791b      	ldrb	r3, [r3, #4]
 8000398:	005b      	lsls	r3, r3, #1
 800039a:	2103      	movs	r1, #3
 800039c:	fa01 f303 	lsl.w	r3, r1, r3
 80003a0:	43db      	mvns	r3, r3
 80003a2:	4619      	mov	r1, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	400a      	ands	r2, r1
 80003aa:	601a      	str	r2, [r3, #0]
		pGPIOHandle ->pGPIOx->MODER |= temp;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	6819      	ldr	r1, [r3, #0]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	697a      	ldr	r2, [r7, #20]
 80003b8:	430a      	orrs	r2, r1
 80003ba:	601a      	str	r2, [r3, #0]
		temp=0;
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
 80003c0:	e0e1      	b.n	8000586 <GPIO_Init+0x21e>
	}
	else{
		temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	795b      	ldrb	r3, [r3, #5]
 80003c6:	461a      	mov	r2, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	791b      	ldrb	r3, [r3, #4]
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	fa02 f303 	lsl.w	r3, r2, r3
 80003d2:	617b      	str	r3, [r7, #20]
				pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	791b      	ldrb	r3, [r3, #4]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	2103      	movs	r1, #3
 80003e2:	fa01 f303 	lsl.w	r3, r1, r3
 80003e6:	43db      	mvns	r3, r3
 80003e8:	4619      	mov	r1, r3
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	400a      	ands	r2, r1
 80003f0:	601a      	str	r2, [r3, #0]
				pGPIOHandle ->pGPIOx->MODER |= temp;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	6819      	ldr	r1, [r3, #0]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	697a      	ldr	r2, [r7, #20]
 80003fe:	430a      	orrs	r2, r1
 8000400:	601a      	str	r2, [r3, #0]
				temp=0;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	795b      	ldrb	r3, [r3, #5]
 800040a:	2b04      	cmp	r3, #4
 800040c:	d117      	bne.n	800043e <GPIO_Init+0xd6>
		{
			EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800040e:	4b47      	ldr	r3, [pc, #284]	@ (800052c <GPIO_Init+0x1c4>)
 8000410:	68db      	ldr	r3, [r3, #12]
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	7912      	ldrb	r2, [r2, #4]
 8000416:	4611      	mov	r1, r2
 8000418:	2201      	movs	r2, #1
 800041a:	408a      	lsls	r2, r1
 800041c:	4611      	mov	r1, r2
 800041e:	4a43      	ldr	r2, [pc, #268]	@ (800052c <GPIO_Init+0x1c4>)
 8000420:	430b      	orrs	r3, r1
 8000422:	60d3      	str	r3, [r2, #12]

			EXTI->RTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000424:	4b41      	ldr	r3, [pc, #260]	@ (800052c <GPIO_Init+0x1c4>)
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	7912      	ldrb	r2, [r2, #4]
 800042c:	4611      	mov	r1, r2
 800042e:	2201      	movs	r2, #1
 8000430:	408a      	lsls	r2, r1
 8000432:	43d2      	mvns	r2, r2
 8000434:	4611      	mov	r1, r2
 8000436:	4a3d      	ldr	r2, [pc, #244]	@ (800052c <GPIO_Init+0x1c4>)
 8000438:	400b      	ands	r3, r1
 800043a:	6093      	str	r3, [r2, #8]
 800043c:	e035      	b.n	80004aa <GPIO_Init+0x142>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	795b      	ldrb	r3, [r3, #5]
 8000442:	2b05      	cmp	r3, #5
 8000444:	d117      	bne.n	8000476 <GPIO_Init+0x10e>
		{
			EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000446:	4b39      	ldr	r3, [pc, #228]	@ (800052c <GPIO_Init+0x1c4>)
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	687a      	ldr	r2, [r7, #4]
 800044c:	7912      	ldrb	r2, [r2, #4]
 800044e:	4611      	mov	r1, r2
 8000450:	2201      	movs	r2, #1
 8000452:	408a      	lsls	r2, r1
 8000454:	4611      	mov	r1, r2
 8000456:	4a35      	ldr	r2, [pc, #212]	@ (800052c <GPIO_Init+0x1c4>)
 8000458:	430b      	orrs	r3, r1
 800045a:	6093      	str	r3, [r2, #8]

			EXTI->FTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800045c:	4b33      	ldr	r3, [pc, #204]	@ (800052c <GPIO_Init+0x1c4>)
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	7912      	ldrb	r2, [r2, #4]
 8000464:	4611      	mov	r1, r2
 8000466:	2201      	movs	r2, #1
 8000468:	408a      	lsls	r2, r1
 800046a:	43d2      	mvns	r2, r2
 800046c:	4611      	mov	r1, r2
 800046e:	4a2f      	ldr	r2, [pc, #188]	@ (800052c <GPIO_Init+0x1c4>)
 8000470:	400b      	ands	r3, r1
 8000472:	60d3      	str	r3, [r2, #12]
 8000474:	e019      	b.n	80004aa <GPIO_Init+0x142>

		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	795b      	ldrb	r3, [r3, #5]
 800047a:	2b06      	cmp	r3, #6
 800047c:	d115      	bne.n	80004aa <GPIO_Init+0x142>
		{
			EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800047e:	4b2b      	ldr	r3, [pc, #172]	@ (800052c <GPIO_Init+0x1c4>)
 8000480:	68db      	ldr	r3, [r3, #12]
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	7912      	ldrb	r2, [r2, #4]
 8000486:	4611      	mov	r1, r2
 8000488:	2201      	movs	r2, #1
 800048a:	408a      	lsls	r2, r1
 800048c:	4611      	mov	r1, r2
 800048e:	4a27      	ldr	r2, [pc, #156]	@ (800052c <GPIO_Init+0x1c4>)
 8000490:	430b      	orrs	r3, r1
 8000492:	60d3      	str	r3, [r2, #12]

			EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000494:	4b25      	ldr	r3, [pc, #148]	@ (800052c <GPIO_Init+0x1c4>)
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	7912      	ldrb	r2, [r2, #4]
 800049c:	4611      	mov	r1, r2
 800049e:	2201      	movs	r2, #1
 80004a0:	408a      	lsls	r2, r1
 80004a2:	4611      	mov	r1, r2
 80004a4:	4a21      	ldr	r2, [pc, #132]	@ (800052c <GPIO_Init+0x1c4>)
 80004a6:	430b      	orrs	r3, r1
 80004a8:	6093      	str	r3, [r2, #8]
		}
	 uint8_t temp1=pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber/4;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	791b      	ldrb	r3, [r3, #4]
 80004ae:	089b      	lsrs	r3, r3, #2
 80004b0:	74fb      	strb	r3, [r7, #19]
	 uint8_t temp2=pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber%4;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	791b      	ldrb	r3, [r3, #4]
 80004b6:	f003 0303 	and.w	r3, r3, #3
 80004ba:	74bb      	strb	r3, [r7, #18]
	 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80004c4:	d042      	beq.n	800054c <GPIO_Init+0x1e4>
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a19      	ldr	r2, [pc, #100]	@ (8000530 <GPIO_Init+0x1c8>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d02b      	beq.n	8000528 <GPIO_Init+0x1c0>
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a17      	ldr	r2, [pc, #92]	@ (8000534 <GPIO_Init+0x1cc>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d024      	beq.n	8000524 <GPIO_Init+0x1bc>
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a16      	ldr	r2, [pc, #88]	@ (8000538 <GPIO_Init+0x1d0>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d01d      	beq.n	8000520 <GPIO_Init+0x1b8>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a14      	ldr	r2, [pc, #80]	@ (800053c <GPIO_Init+0x1d4>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d016      	beq.n	800051c <GPIO_Init+0x1b4>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a13      	ldr	r2, [pc, #76]	@ (8000540 <GPIO_Init+0x1d8>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d00f      	beq.n	8000518 <GPIO_Init+0x1b0>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a11      	ldr	r2, [pc, #68]	@ (8000544 <GPIO_Init+0x1dc>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d008      	beq.n	8000514 <GPIO_Init+0x1ac>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a10      	ldr	r2, [pc, #64]	@ (8000548 <GPIO_Init+0x1e0>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d101      	bne.n	8000510 <GPIO_Init+0x1a8>
 800050c:	2307      	movs	r3, #7
 800050e:	e01e      	b.n	800054e <GPIO_Init+0x1e6>
 8000510:	2300      	movs	r3, #0
 8000512:	e01c      	b.n	800054e <GPIO_Init+0x1e6>
 8000514:	2306      	movs	r3, #6
 8000516:	e01a      	b.n	800054e <GPIO_Init+0x1e6>
 8000518:	2305      	movs	r3, #5
 800051a:	e018      	b.n	800054e <GPIO_Init+0x1e6>
 800051c:	2304      	movs	r3, #4
 800051e:	e016      	b.n	800054e <GPIO_Init+0x1e6>
 8000520:	2303      	movs	r3, #3
 8000522:	e014      	b.n	800054e <GPIO_Init+0x1e6>
 8000524:	2302      	movs	r3, #2
 8000526:	e012      	b.n	800054e <GPIO_Init+0x1e6>
 8000528:	2301      	movs	r3, #1
 800052a:	e010      	b.n	800054e <GPIO_Init+0x1e6>
 800052c:	40010400 	.word	0x40010400
 8000530:	48000400 	.word	0x48000400
 8000534:	48000800 	.word	0x48000800
 8000538:	48000c00 	.word	0x48000c00
 800053c:	48001000 	.word	0x48001000
 8000540:	48001400 	.word	0x48001400
 8000544:	48001800 	.word	0x48001800
 8000548:	48001c00 	.word	0x48001c00
 800054c:	2300      	movs	r3, #0
 800054e:	747b      	strb	r3, [r7, #17]
	 SYSCFG_PCLK_EN();
 8000550:	4b5e      	ldr	r3, [pc, #376]	@ (80006cc <GPIO_Init+0x364>)
 8000552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000554:	4a5d      	ldr	r2, [pc, #372]	@ (80006cc <GPIO_Init+0x364>)
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	6613      	str	r3, [r2, #96]	@ 0x60
	 SYSCFG->EXTICR[temp1]=portcode << (temp2 * 4);
 800055c:	7c7a      	ldrb	r2, [r7, #17]
 800055e:	7cbb      	ldrb	r3, [r7, #18]
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	fa02 f103 	lsl.w	r1, r2, r3
 8000566:	4a5a      	ldr	r2, [pc, #360]	@ (80006d0 <GPIO_Init+0x368>)
 8000568:	7cfb      	ldrb	r3, [r7, #19]
 800056a:	3302      	adds	r3, #2
 800056c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 EXTI -> IMR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000570:	4b58      	ldr	r3, [pc, #352]	@ (80006d4 <GPIO_Init+0x36c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	7912      	ldrb	r2, [r2, #4]
 8000578:	4611      	mov	r1, r2
 800057a:	2201      	movs	r2, #1
 800057c:	408a      	lsls	r2, r1
 800057e:	4611      	mov	r1, r2
 8000580:	4a54      	ldr	r2, [pc, #336]	@ (80006d4 <GPIO_Init+0x36c>)
 8000582:	430b      	orrs	r3, r1
 8000584:	6013      	str	r3, [r2, #0]
	}

	temp=0;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
	temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	799b      	ldrb	r3, [r3, #6]
 800058e:	461a      	mov	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	fa02 f303 	lsl.w	r3, r2, r3
 800059a:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->OSPEEDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	689a      	ldr	r2, [r3, #8]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791b      	ldrb	r3, [r3, #4]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	2103      	movs	r1, #3
 80005aa:	fa01 f303 	lsl.w	r3, r1, r3
 80005ae:	43db      	mvns	r3, r3
 80005b0:	4619      	mov	r1, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	400a      	ands	r2, r1
 80005b8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	6899      	ldr	r1, [r3, #8]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	430a      	orrs	r2, r1
 80005c8:	609a      	str	r2, [r3, #8]
	temp=0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]

	temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	79db      	ldrb	r3, [r3, #7]
 80005d2:	461a      	mov	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	791b      	ldrb	r3, [r3, #4]
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->PUPDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	68da      	ldr	r2, [r3, #12]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	2103      	movs	r1, #3
 80005ee:	fa01 f303 	lsl.w	r3, r1, r3
 80005f2:	43db      	mvns	r3, r3
 80005f4:	4619      	mov	r1, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	400a      	ands	r2, r1
 80005fc:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	68d9      	ldr	r1, [r3, #12]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	697a      	ldr	r2, [r7, #20]
 800060a:	430a      	orrs	r2, r1
 800060c:	60da      	str	r2, [r3, #12]
	temp=0;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]

	temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType<<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	7a1b      	ldrb	r3, [r3, #8]
 8000616:	461a      	mov	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791b      	ldrb	r3, [r3, #4]
 800061c:	fa02 f303 	lsl.w	r3, r2, r3
 8000620:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->OTYPER &= ~(0X01 << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	685a      	ldr	r2, [r3, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	4619      	mov	r1, r3
 800062e:	2301      	movs	r3, #1
 8000630:	408b      	lsls	r3, r1
 8000632:	43db      	mvns	r3, r3
 8000634:	4619      	mov	r1, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	400a      	ands	r2, r1
 800063c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	6859      	ldr	r1, [r3, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	430a      	orrs	r2, r1
 800064c:	605a      	str	r2, [r3, #4]
	temp=0;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	795b      	ldrb	r3, [r3, #5]
 8000656:	2b02      	cmp	r3, #2
 8000658:	d132      	bne.n	80006c0 <GPIO_Init+0x358>
	{
		uint32_t temp1 ,temp2;
		temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	791b      	ldrb	r3, [r3, #4]
 800065e:	08db      	lsrs	r3, r3, #3
 8000660:	b2db      	uxtb	r3, r3
 8000662:	60fb      	str	r3, [r7, #12]
		temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	f003 0307 	and.w	r3, r3, #7
 800066c:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0X0f<< (4*temp2));
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	3208      	adds	r2, #8
 8000676:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	210f      	movs	r1, #15
 8000680:	fa01 f303 	lsl.w	r3, r1, r3
 8000684:	43db      	mvns	r3, r3
 8000686:	4619      	mov	r1, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4011      	ands	r1, r2
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	3208      	adds	r2, #8
 8000692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	3208      	adds	r2, #8
 800069e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	7a5b      	ldrb	r3, [r3, #9]
 80006a6:	4619      	mov	r1, r3
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	fa01 f303 	lsl.w	r3, r1, r3
 80006b0:	4619      	mov	r1, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4311      	orrs	r1, r2
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	3208      	adds	r2, #8
 80006bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80006c0:	bf00      	nop
 80006c2:	371c      	adds	r7, #28
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40010000 	.word	0x40010000
 80006d4:	40010400 	.word	0x40010400

080006d8 <USART_PeriClockControl>:
#include "USART_driver.h"
#include "RCC_driver.h"

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	460b      	mov	r3, r1
 80006e2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d136      	bne.n	8000758 <USART_PeriClockControl+0x80>
	{
		if(pUSARTx == USART1)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a38      	ldr	r2, [pc, #224]	@ (80007d0 <USART_PeriClockControl+0xf8>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d106      	bne.n	8000700 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 80006f2:	4b38      	ldr	r3, [pc, #224]	@ (80007d4 <USART_PeriClockControl+0xfc>)
 80006f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006f6:	4a37      	ldr	r2, [pc, #220]	@ (80007d4 <USART_PeriClockControl+0xfc>)
 80006f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006fc:	6613      	str	r3, [r2, #96]	@ 0x60
		else if(pUSARTx == UART5)
		{
			UART5_PCLK_DI();
		}
	}
}
 80006fe:	e061      	b.n	80007c4 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4a35      	ldr	r2, [pc, #212]	@ (80007d8 <USART_PeriClockControl+0x100>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d106      	bne.n	8000716 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000708:	4b32      	ldr	r3, [pc, #200]	@ (80007d4 <USART_PeriClockControl+0xfc>)
 800070a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800070c:	4a31      	ldr	r2, [pc, #196]	@ (80007d4 <USART_PeriClockControl+0xfc>)
 800070e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000712:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000714:	e056      	b.n	80007c4 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a30      	ldr	r2, [pc, #192]	@ (80007dc <USART_PeriClockControl+0x104>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d106      	bne.n	800072c <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 800071e:	4b2d      	ldr	r3, [pc, #180]	@ (80007d4 <USART_PeriClockControl+0xfc>)
 8000720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000722:	4a2c      	ldr	r2, [pc, #176]	@ (80007d4 <USART_PeriClockControl+0xfc>)
 8000724:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000728:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800072a:	e04b      	b.n	80007c4 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a2c      	ldr	r2, [pc, #176]	@ (80007e0 <USART_PeriClockControl+0x108>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d106      	bne.n	8000742 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000734:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <USART_PeriClockControl+0xfc>)
 8000736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000738:	4a26      	ldr	r2, [pc, #152]	@ (80007d4 <USART_PeriClockControl+0xfc>)
 800073a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800073e:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000740:	e040      	b.n	80007c4 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a27      	ldr	r2, [pc, #156]	@ (80007e4 <USART_PeriClockControl+0x10c>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d13c      	bne.n	80007c4 <USART_PeriClockControl+0xec>
			UART5_PCLK_EN();
 800074a:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <USART_PeriClockControl+0xfc>)
 800074c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800074e:	4a21      	ldr	r2, [pc, #132]	@ (80007d4 <USART_PeriClockControl+0xfc>)
 8000750:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000754:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000756:	e035      	b.n	80007c4 <USART_PeriClockControl+0xec>
		if(pUSARTx == USART1)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a1d      	ldr	r2, [pc, #116]	@ (80007d0 <USART_PeriClockControl+0xf8>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d106      	bne.n	800076e <USART_PeriClockControl+0x96>
			USART1_PCLK_DI();
 8000760:	4b1c      	ldr	r3, [pc, #112]	@ (80007d4 <USART_PeriClockControl+0xfc>)
 8000762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000764:	4a1b      	ldr	r2, [pc, #108]	@ (80007d4 <USART_PeriClockControl+0xfc>)
 8000766:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800076a:	6613      	str	r3, [r2, #96]	@ 0x60
}
 800076c:	e02a      	b.n	80007c4 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a19      	ldr	r2, [pc, #100]	@ (80007d8 <USART_PeriClockControl+0x100>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d106      	bne.n	8000784 <USART_PeriClockControl+0xac>
			USART2_PCLK_DI();
 8000776:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <USART_PeriClockControl+0xfc>)
 8000778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800077a:	4a16      	ldr	r2, [pc, #88]	@ (80007d4 <USART_PeriClockControl+0xfc>)
 800077c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000780:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000782:	e01f      	b.n	80007c4 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a15      	ldr	r2, [pc, #84]	@ (80007dc <USART_PeriClockControl+0x104>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d106      	bne.n	800079a <USART_PeriClockControl+0xc2>
			USART3_PCLK_DI();
 800078c:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <USART_PeriClockControl+0xfc>)
 800078e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000790:	4a10      	ldr	r2, [pc, #64]	@ (80007d4 <USART_PeriClockControl+0xfc>)
 8000792:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000796:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000798:	e014      	b.n	80007c4 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4a10      	ldr	r2, [pc, #64]	@ (80007e0 <USART_PeriClockControl+0x108>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d106      	bne.n	80007b0 <USART_PeriClockControl+0xd8>
			UART4_PCLK_DI();
 80007a2:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <USART_PeriClockControl+0xfc>)
 80007a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a6:	4a0b      	ldr	r2, [pc, #44]	@ (80007d4 <USART_PeriClockControl+0xfc>)
 80007a8:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80007ac:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80007ae:	e009      	b.n	80007c4 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4a0c      	ldr	r2, [pc, #48]	@ (80007e4 <USART_PeriClockControl+0x10c>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d105      	bne.n	80007c4 <USART_PeriClockControl+0xec>
			UART5_PCLK_DI();
 80007b8:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <USART_PeriClockControl+0xfc>)
 80007ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007bc:	4a05      	ldr	r2, [pc, #20]	@ (80007d4 <USART_PeriClockControl+0xfc>)
 80007be:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80007c2:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	40013800 	.word	0x40013800
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40004400 	.word	0x40004400
 80007dc:	40004800 	.word	0x40004800
 80007e0:	40004c00 	.word	0x40004c00
 80007e4:	40005000 	.word	0x40005000

080007e8 <USART_Init>:
}



void USART_Init(USART_Handle_t *pUSARTHandle)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
		uint32_t tempreg=0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]

		USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2101      	movs	r1, #1
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ff6c 	bl	80006d8 <USART_PeriClockControl>

		if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	791b      	ldrb	r3, [r3, #4]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d104      	bne.n	8000812 <USART_Init+0x2a>
		{
			tempreg|= (1 << USART_CR1_RE);
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f043 0304 	orr.w	r3, r3, #4
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	e010      	b.n	8000834 <USART_Init+0x4c>
		}
		else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	791b      	ldrb	r3, [r3, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d104      	bne.n	8000824 <USART_Init+0x3c>
		{
			tempreg |= ( 1 << USART_CR1_TE );
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	e007      	b.n	8000834 <USART_Init+0x4c>
		}
		else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	791b      	ldrb	r3, [r3, #4]
 8000828:	2b02      	cmp	r3, #2
 800082a:	d103      	bne.n	8000834 <USART_Init+0x4c>
		{
			tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f043 030c 	orr.w	r3, r3, #12
 8000832:	60fb      	str	r3, [r7, #12]
		}

		tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	7b5b      	ldrb	r3, [r3, #13]
 8000838:	031b      	lsls	r3, r3, #12
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	4313      	orrs	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]

		if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	7b9b      	ldrb	r3, [r3, #14]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d104      	bne.n	8000852 <USART_Init+0x6a>
		{
			tempreg |= ( 1 << USART_CR1_PCE);
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	e00b      	b.n	800086a <USART_Init+0x82>

		}
		else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	7b9b      	ldrb	r3, [r3, #14]
 8000856:	2b02      	cmp	r3, #2
 8000858:	d107      	bne.n	800086a <USART_Init+0x82>
		{
		    tempreg |= ( 1 << USART_CR1_PCE);
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000860:	60fb      	str	r3, [r7, #12]
		    tempreg |= ( 1 << USART_CR1_PS);
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000868:	60fb      	str	r3, [r7, #12]
		}


		pUSARTHandle->pUSARTx->CR1 = tempreg;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	601a      	str	r2, [r3, #0]
		tempreg=0;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
		tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7b1b      	ldrb	r3, [r3, #12]
 800087a:	031b      	lsls	r3, r3, #12
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	4313      	orrs	r3, r2
 8000880:	60fb      	str	r3, [r7, #12]
		pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	605a      	str	r2, [r3, #4]

		tempreg=0;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]


		if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	7bdb      	ldrb	r3, [r3, #15]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d104      	bne.n	80008a0 <USART_Init+0xb8>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	e014      	b.n	80008ca <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	7bdb      	ldrb	r3, [r3, #15]
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d104      	bne.n	80008b2 <USART_Init+0xca>
		{
			tempreg |= ( 1 << USART_CR3_RTSE);
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	e00b      	b.n	80008ca <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	7bdb      	ldrb	r3, [r3, #15]
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	d107      	bne.n	80008ca <USART_Init+0xe2>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008c0:	60fb      	str	r3, [r7, #12]
			tempreg |= ( 1 << USART_CR3_RTSE);
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008c8:	60fb      	str	r3, [r7, #12]
		}

		pUSARTHandle->pUSARTx->CR3 = tempreg;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	609a      	str	r2, [r3, #8]
		pUSARTHandle->pUSARTx->BRR=0X25;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2225      	movs	r2, #37	@ 0x25
 80008d8:	60da      	str	r2, [r3, #12]
	//	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <USART_SendData>:




void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b086      	sub	sp, #24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	60f8      	str	r0, [r7, #12]
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

	for(uint32_t i = 0 ; i < Len; i++)
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	e031      	b.n	8000958 <USART_SendData+0x76>
	{
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 80008f4:	bf00      	nop
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2180      	movs	r1, #128	@ 0x80
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 f8b5 	bl	8000a6c <USART_GetFlagStatus>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d0f6      	beq.n	80008f6 <USART_SendData+0x14>

		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	7b5b      	ldrb	r3, [r3, #13]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d118      	bne.n	8000942 <USART_SendData+0x60>
		{
			pdata = (uint16_t*) pTxBuffer;
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000922:	629a      	str	r2, [r3, #40]	@ 0x28

			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	7b9b      	ldrb	r3, [r3, #14]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d106      	bne.n	800093a <USART_SendData+0x58>
			{
				pTxBuffer++;
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	3301      	adds	r3, #1
 8000930:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	3301      	adds	r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	e00b      	b.n	8000952 <USART_SendData+0x70>

			}
			else
			{
				pTxBuffer++;
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	3301      	adds	r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	e007      	b.n	8000952 <USART_SendData+0x70>
			}
		}
		else
		{

			pUSARTHandle->pUSARTx->TDR = (*pTxBuffer  & (uint8_t)0xFF);
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	629a      	str	r2, [r3, #40]	@ 0x28
			pTxBuffer++;
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	3301      	adds	r3, #1
 8000950:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	3301      	adds	r3, #1
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697a      	ldr	r2, [r7, #20]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	429a      	cmp	r2, r3
 800095e:	d3c9      	bcc.n	80008f4 <USART_SendData+0x12>
		}
	}
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000960:	bf00      	nop
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2140      	movs	r1, #64	@ 0x40
 8000968:	4618      	mov	r0, r3
 800096a:	f000 f87f 	bl	8000a6c <USART_GetFlagStatus>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d0f6      	beq.n	8000962 <USART_SendData+0x80>
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <USART_ReceiveData>:

void USART_ReceiveData(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b086      	sub	sp, #24
 8000982:	af00      	add	r7, sp, #0
 8000984:	60f8      	str	r0, [r7, #12]
 8000986:	60b9      	str	r1, [r7, #8]
 8000988:	607a      	str	r2, [r7, #4]

	for(uint32_t i = 0 ; i < Len; i++)
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
 800098e:	e048      	b.n	8000a22 <USART_ReceiveData+0xa4>
	{
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_RXNE));
 8000990:	bf00      	nop
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2120      	movs	r1, #32
 8000998:	4618      	mov	r0, r3
 800099a:	f000 f867 	bl	8000a6c <USART_GetFlagStatus>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d0f6      	beq.n	8000992 <USART_ReceiveData+0x14>

		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	7b5b      	ldrb	r3, [r3, #13]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d11d      	bne.n	80009e8 <USART_ReceiveData+0x6a>
		{
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	7b9b      	ldrb	r3, [r3, #14]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d10f      	bne.n	80009d4 <USART_ReceiveData+0x56>
			{
				*((uint16_t*) pRxBuffer) = (pUSARTHandle->pUSARTx->RDR  & (uint16_t)0x01FF);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	801a      	strh	r2, [r3, #0]
				pRxBuffer++;
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	3301      	adds	r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
				pRxBuffer++;
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	3301      	adds	r3, #1
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	e023      	b.n	8000a1c <USART_ReceiveData+0x9e>
			}
			else
			{
				 *pRxBuffer = (pUSARTHandle->pUSARTx->RDR  & (uint8_t)0xFF);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	701a      	strb	r2, [r3, #0]
				 pRxBuffer++;
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	3301      	adds	r3, #1
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	e019      	b.n	8000a1c <USART_ReceiveData+0x9e>
			}
		}
		else
		{
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	7b9b      	ldrb	r3, [r3, #14]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d109      	bne.n	8000a04 <USART_ReceiveData+0x86>
			{
				 *pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->RDR  & (uint8_t)0x7F);
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	701a      	strb	r2, [r3, #0]
 8000a02:	e008      	b.n	8000a16 <USART_ReceiveData+0x98>
			}

			else
			{
				 *pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->RDR  & (uint8_t)0x7F);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	701a      	strb	r2, [r3, #0]
			}
			pRxBuffer++;
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d3b2      	bcc.n	8000990 <USART_ReceiveData+0x12>
		}
	}

}
 8000a2a:	bf00      	nop
 8000a2c:	bf00      	nop
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <USART_PeripheralControl>:

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a40:	78fb      	ldrb	r3, [r7, #3]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d106      	bne.n	8000a54 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |=(1<<USART_CR1_UE);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f043 0201 	orr.w	r2, r3, #1
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
	}
}
 8000a52:	e005      	b.n	8000a60 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f023 0201 	bic.w	r2, r3, #1
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	601a      	str	r2, [r3, #0]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <USART_GetFlagStatus>:


uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx,uint8_t StatusFlagName)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx ->ISR & StatusFlagName)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	69da      	ldr	r2, [r3, #28]
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <USART_GetFlagStatus+0x1c>
	{
		return SET;
 8000a84:	2301      	movs	r3, #1
 8000a86:	e000      	b.n	8000a8a <USART_GetFlagStatus+0x1e>
	}
	return RESET;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <delay>:
// USART2 handle
USART_Handle_t usart2_handle;

// Simple delay function
void delay(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
    for(uint32_t i = 0 ; i < 250000 ; i++);
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	e002      	b.n	8000aaa <delay+0x12>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a04      	ldr	r2, [pc, #16]	@ (8000ac0 <delay+0x28>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d9f8      	bls.n	8000aa4 <delay+0xc>
}
 8000ab2:	bf00      	nop
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	0003d08f 	.word	0x0003d08f

08000ac4 <USART2_Init>:

// Initialize USART2 peripheral
void USART2_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
    usart2_handle.pUSARTx = USART2;
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b00 <USART2_Init+0x3c>)
 8000aca:	4a0e      	ldr	r2, [pc, #56]	@ (8000b04 <USART2_Init+0x40>)
 8000acc:	601a      	str	r2, [r3, #0]
    usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;   // baud rate 115200
 8000ace:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <USART2_Init+0x3c>)
 8000ad0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad4:	609a      	str	r2, [r3, #8]
    usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE; // no HW flow
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <USART2_Init+0x3c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	73da      	strb	r2, [r3, #15]
    usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;          // TX & RX mode
 8000adc:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <USART2_Init+0x3c>)
 8000ade:	2202      	movs	r2, #2
 8000ae0:	711a      	strb	r2, [r3, #4]
    usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1; // 1 stop bit
 8000ae2:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <USART2_Init+0x3c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	731a      	strb	r2, [r3, #12]
    usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS; // 8-bit word
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <USART2_Init+0x3c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	735a      	strb	r2, [r3, #13]
    usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE; // no parity
 8000aee:	4b04      	ldr	r3, [pc, #16]	@ (8000b00 <USART2_Init+0x3c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	739a      	strb	r2, [r3, #14]
    USART_Init(&usart2_handle);  // initialize USART2
 8000af4:	4802      	ldr	r0, [pc, #8]	@ (8000b00 <USART2_Init+0x3c>)
 8000af6:	f7ff fe77 	bl	80007e8 <USART_Init>
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000050 	.word	0x20000050
 8000b04:	40004400 	.word	0x40004400

08000b08 <USART2_GPIOInit>:

// Initialize GPIO pins for USART2
void USART2_GPIOInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
    GPIO_Handle_t usart2_gpio;
    memset(&usart2_gpio,0,sizeof(usart2_gpio));
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	220c      	movs	r2, #12
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 f894 	bl	8000c42 <memset>

    usart2_gpio.pGPIOx = GPIOA;
 8000b1a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b1e:	607b      	str	r3, [r7, #4]
    usart2_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;      // alternate function
 8000b20:	2302      	movs	r3, #2
 8000b22:	727b      	strb	r3, [r7, #9]
    usart2_gpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;     // push-pull
 8000b24:	2300      	movs	r3, #0
 8000b26:	733b      	strb	r3, [r7, #12]
    usart2_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;   // pull-up
 8000b28:	2301      	movs	r3, #1
 8000b2a:	72fb      	strb	r3, [r7, #11]
    usart2_gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;     // fast speed
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	72bb      	strb	r3, [r7, #10]
    usart2_gpio.GPIO_PinConfig.GPIO_PinAltFunMode = 7;              // AF7 for USART2
 8000b30:	2307      	movs	r3, #7
 8000b32:	737b      	strb	r3, [r7, #13]

    // TX pin (PA2)
    usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	723b      	strb	r3, [r7, #8]
    GPIOA_PCLK_EN(); // enable clock for GPIOA
 8000b38:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <USART2_GPIOInit+0x58>)
 8000b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3c:	4a08      	ldr	r2, [pc, #32]	@ (8000b60 <USART2_GPIOInit+0x58>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIO_Init(&usart2_gpio);
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fc0e 	bl	8000368 <GPIO_Init>

    // RX pin (PA3)
    usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&usart2_gpio);
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fc08 	bl	8000368 <GPIO_Init>
}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40021000 	.word	0x40021000

08000b64 <main>:

int main(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
    // LED GPIO configuration
    GPIO_Handle_t GpioLed;
    GpioLed.pGPIOx = GPIOA;
 8000b6a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b6e:	607b      	str	r3, [r7, #4]
    GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;      // LED on PA5
 8000b70:	2305      	movs	r3, #5
 8000b72:	723b      	strb	r3, [r7, #8]
    GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;        // output mode
 8000b74:	2301      	movs	r3, #1
 8000b76:	727b      	strb	r3, [r7, #9]
    GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	72bb      	strb	r3, [r7, #10]
    GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;    // push-pull
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	733b      	strb	r3, [r7, #12]
    GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;  // no pull-up/down
 8000b80:	2300      	movs	r3, #0
 8000b82:	72fb      	strb	r3, [r7, #11]
    GPIO_PeriClockControl(GPIOA, ENABLE);
 8000b84:	2101      	movs	r1, #1
 8000b86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b8a:	f7ff fb1f 	bl	80001cc <GPIO_PeriClockControl>
    GPIO_Init(&GpioLed);
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fbe9 	bl	8000368 <GPIO_Init>

    // Initialize UART GPIO and peripheral
    USART2_GPIOInit();
 8000b96:	f7ff ffb7 	bl	8000b08 <USART2_GPIOInit>
    USART2_Init();
 8000b9a:	f7ff ff93 	bl	8000ac4 <USART2_Init>
    USART_PeripheralControl(USART2, ENABLE);  // enable USART2 peripheral
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	4810      	ldr	r0, [pc, #64]	@ (8000be4 <main+0x80>)
 8000ba2:	f7ff ff47 	bl	8000a34 <USART_PeripheralControl>

    // Send initial message over UART
    USART_SendData(&usart2_handle, msg, 19);
 8000ba6:	2213      	movs	r2, #19
 8000ba8:	490f      	ldr	r1, [pc, #60]	@ (8000be8 <main+0x84>)
 8000baa:	4810      	ldr	r0, [pc, #64]	@ (8000bec <main+0x88>)
 8000bac:	f7ff fe99 	bl	80008e2 <USART_SendData>
    delay();
 8000bb0:	f7ff ff72 	bl	8000a98 <delay>

    // Receive a single byte from UART
    uint8_t c;
    USART_ReceiveData(&usart2_handle, &c, 1);
 8000bb4:	1cfb      	adds	r3, r7, #3
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480c      	ldr	r0, [pc, #48]	@ (8000bec <main+0x88>)
 8000bbc:	f7ff fedf 	bl	800097e <USART_ReceiveData>

    // If received byte is 'a', turn on LED
    if(c == 'a')
 8000bc0:	78fb      	ldrb	r3, [r7, #3]
 8000bc2:	2b61      	cmp	r3, #97	@ 0x61
 8000bc4:	d105      	bne.n	8000bd2 <main+0x6e>
    {
    	GPIOA->BSRR=1<<5;
 8000bc6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bca:	2220      	movs	r2, #32
 8000bcc:	619a      	str	r2, [r3, #24]
        //GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_5, SET);  // turn on LED
        delay();
 8000bce:	f7ff ff63 	bl	8000a98 <delay>
    }

    // Send back the received byte
    USART_SendData(&usart2_handle, &c, 1);
 8000bd2:	1cfb      	adds	r3, r7, #3
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4804      	ldr	r0, [pc, #16]	@ (8000bec <main+0x88>)
 8000bda:	f7ff fe82 	bl	80008e2 <USART_SendData>

    while(1);  // infinite loop
 8000bde:	bf00      	nop
 8000be0:	e7fd      	b.n	8000bde <main+0x7a>
 8000be2:	bf00      	nop
 8000be4:	40004400 	.word	0x40004400
 8000be8:	20000000 	.word	0x20000000
 8000bec:	20000050 	.word	0x20000050

08000bf0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf0:	480d      	ldr	r0, [pc, #52]	@ (8000c28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bf2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bf4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf8:	480c      	ldr	r0, [pc, #48]	@ (8000c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfa:	490d      	ldr	r1, [pc, #52]	@ (8000c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c34 <LoopForever+0xe>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c10:	4c0a      	ldr	r4, [pc, #40]	@ (8000c3c <LoopForever+0x16>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000c1e:	f000 f819 	bl	8000c54 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000c22:	f7ff ff9f 	bl	8000b64 <main>

08000c26 <LoopForever>:

LoopForever:
  b LoopForever
 8000c26:	e7fe      	b.n	8000c26 <LoopForever>
  ldr   r0, =_estack
 8000c28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000c34:	08000cbc 	.word	0x08000cbc
  ldr r2, =_sbss
 8000c38:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000c3c:	20000074 	.word	0x20000074

08000c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC1_2_IRQHandler>

08000c42 <memset>:
 8000c42:	4402      	add	r2, r0
 8000c44:	4603      	mov	r3, r0
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d100      	bne.n	8000c4c <memset+0xa>
 8000c4a:	4770      	bx	lr
 8000c4c:	f803 1b01 	strb.w	r1, [r3], #1
 8000c50:	e7f9      	b.n	8000c46 <memset+0x4>
	...

08000c54 <__libc_init_array>:
 8000c54:	b570      	push	{r4, r5, r6, lr}
 8000c56:	4d0d      	ldr	r5, [pc, #52]	@ (8000c8c <__libc_init_array+0x38>)
 8000c58:	4c0d      	ldr	r4, [pc, #52]	@ (8000c90 <__libc_init_array+0x3c>)
 8000c5a:	1b64      	subs	r4, r4, r5
 8000c5c:	10a4      	asrs	r4, r4, #2
 8000c5e:	2600      	movs	r6, #0
 8000c60:	42a6      	cmp	r6, r4
 8000c62:	d109      	bne.n	8000c78 <__libc_init_array+0x24>
 8000c64:	4d0b      	ldr	r5, [pc, #44]	@ (8000c94 <__libc_init_array+0x40>)
 8000c66:	4c0c      	ldr	r4, [pc, #48]	@ (8000c98 <__libc_init_array+0x44>)
 8000c68:	f000 f818 	bl	8000c9c <_init>
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	10a4      	asrs	r4, r4, #2
 8000c70:	2600      	movs	r6, #0
 8000c72:	42a6      	cmp	r6, r4
 8000c74:	d105      	bne.n	8000c82 <__libc_init_array+0x2e>
 8000c76:	bd70      	pop	{r4, r5, r6, pc}
 8000c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c7c:	4798      	blx	r3
 8000c7e:	3601      	adds	r6, #1
 8000c80:	e7ee      	b.n	8000c60 <__libc_init_array+0xc>
 8000c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c86:	4798      	blx	r3
 8000c88:	3601      	adds	r6, #1
 8000c8a:	e7f2      	b.n	8000c72 <__libc_init_array+0x1e>
 8000c8c:	08000cb4 	.word	0x08000cb4
 8000c90:	08000cb4 	.word	0x08000cb4
 8000c94:	08000cb4 	.word	0x08000cb4
 8000c98:	08000cb8 	.word	0x08000cb8

08000c9c <_init>:
 8000c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9e:	bf00      	nop
 8000ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ca2:	bc08      	pop	{r3}
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	4770      	bx	lr

08000ca8 <_fini>:
 8000ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000caa:	bf00      	nop
 8000cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cae:	bc08      	pop	{r3}
 8000cb0:	469e      	mov	lr, r3
 8000cb2:	4770      	bx	lr
