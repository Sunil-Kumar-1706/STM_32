
UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013c4  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001550  08001550  00002550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001570  08001570  00003090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001570  08001570  00002570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001578  08001578  00003090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001578  08001578  00002578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800157c  0800157c  0000257c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08001580  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00003090  2**0
                  CONTENTS
 10 .bss          00000190  20000090  20000090  00003090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00003090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000204c  00000000  00000000  000030c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007c7  00000000  00000000  0000510c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000228  00000000  00000000  000058d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000018c  00000000  00000000  00005b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001778  00000000  00000000  00005c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002b3e  00000000  00000000  00007404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c933  00000000  00000000  00009f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00016875  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e28  00000000  00000000  000168b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000176e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000090 	.word	0x20000090
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001538 	.word	0x08001538

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000094 	.word	0x20000094
 80001c8:	08001538 	.word	0x08001538

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <GPIO_Init>:
}

/*Init and Deinit */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80001dc:	b480      	push	{r7}
 80001de:	b087      	sub	sp, #28
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 80001e4:	2300      	movs	r3, #0
 80001e6:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	795b      	ldrb	r3, [r3, #5]
 80001ec:	2b03      	cmp	r3, #3
 80001ee:	d822      	bhi.n	8000236 <GPIO_Init+0x5a>
	{
		temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	795b      	ldrb	r3, [r3, #5]
 80001f4:	461a      	mov	r2, r3
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	791b      	ldrb	r3, [r3, #4]
 80001fa:	005b      	lsls	r3, r3, #1
 80001fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000200:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	791b      	ldrb	r3, [r3, #4]
 800020c:	005b      	lsls	r3, r3, #1
 800020e:	2103      	movs	r1, #3
 8000210:	fa01 f303 	lsl.w	r3, r1, r3
 8000214:	43db      	mvns	r3, r3
 8000216:	4619      	mov	r1, r3
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	400a      	ands	r2, r1
 800021e:	601a      	str	r2, [r3, #0]
		pGPIOHandle ->pGPIOx->MODER |= temp;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	6819      	ldr	r1, [r3, #0]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	697a      	ldr	r2, [r7, #20]
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
		temp=0;
 8000230:	2300      	movs	r3, #0
 8000232:	617b      	str	r3, [r7, #20]
 8000234:	e0e1      	b.n	80003fa <GPIO_Init+0x21e>
	}
	else{
		temp=( pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	795b      	ldrb	r3, [r3, #5]
 800023a:	461a      	mov	r2, r3
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	791b      	ldrb	r3, [r3, #4]
 8000240:	005b      	lsls	r3, r3, #1
 8000242:	fa02 f303 	lsl.w	r3, r2, r3
 8000246:	617b      	str	r3, [r7, #20]
				pGPIOHandle->pGPIOx->MODER &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	791b      	ldrb	r3, [r3, #4]
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	2103      	movs	r1, #3
 8000256:	fa01 f303 	lsl.w	r3, r1, r3
 800025a:	43db      	mvns	r3, r3
 800025c:	4619      	mov	r1, r3
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	400a      	ands	r2, r1
 8000264:	601a      	str	r2, [r3, #0]
				pGPIOHandle ->pGPIOx->MODER |= temp;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	6819      	ldr	r1, [r3, #0]
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	697a      	ldr	r2, [r7, #20]
 8000272:	430a      	orrs	r2, r1
 8000274:	601a      	str	r2, [r3, #0]
				temp=0;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]
		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	795b      	ldrb	r3, [r3, #5]
 800027e:	2b04      	cmp	r3, #4
 8000280:	d117      	bne.n	80002b2 <GPIO_Init+0xd6>
		{
			EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000282:	4b47      	ldr	r3, [pc, #284]	@ (80003a0 <GPIO_Init+0x1c4>)
 8000284:	68db      	ldr	r3, [r3, #12]
 8000286:	687a      	ldr	r2, [r7, #4]
 8000288:	7912      	ldrb	r2, [r2, #4]
 800028a:	4611      	mov	r1, r2
 800028c:	2201      	movs	r2, #1
 800028e:	408a      	lsls	r2, r1
 8000290:	4611      	mov	r1, r2
 8000292:	4a43      	ldr	r2, [pc, #268]	@ (80003a0 <GPIO_Init+0x1c4>)
 8000294:	430b      	orrs	r3, r1
 8000296:	60d3      	str	r3, [r2, #12]

			EXTI->RTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000298:	4b41      	ldr	r3, [pc, #260]	@ (80003a0 <GPIO_Init+0x1c4>)
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	687a      	ldr	r2, [r7, #4]
 800029e:	7912      	ldrb	r2, [r2, #4]
 80002a0:	4611      	mov	r1, r2
 80002a2:	2201      	movs	r2, #1
 80002a4:	408a      	lsls	r2, r1
 80002a6:	43d2      	mvns	r2, r2
 80002a8:	4611      	mov	r1, r2
 80002aa:	4a3d      	ldr	r2, [pc, #244]	@ (80003a0 <GPIO_Init+0x1c4>)
 80002ac:	400b      	ands	r3, r1
 80002ae:	6093      	str	r3, [r2, #8]
 80002b0:	e035      	b.n	800031e <GPIO_Init+0x142>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	795b      	ldrb	r3, [r3, #5]
 80002b6:	2b05      	cmp	r3, #5
 80002b8:	d117      	bne.n	80002ea <GPIO_Init+0x10e>
		{
			EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80002ba:	4b39      	ldr	r3, [pc, #228]	@ (80003a0 <GPIO_Init+0x1c4>)
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	7912      	ldrb	r2, [r2, #4]
 80002c2:	4611      	mov	r1, r2
 80002c4:	2201      	movs	r2, #1
 80002c6:	408a      	lsls	r2, r1
 80002c8:	4611      	mov	r1, r2
 80002ca:	4a35      	ldr	r2, [pc, #212]	@ (80003a0 <GPIO_Init+0x1c4>)
 80002cc:	430b      	orrs	r3, r1
 80002ce:	6093      	str	r3, [r2, #8]

			EXTI->FTSR1 &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80002d0:	4b33      	ldr	r3, [pc, #204]	@ (80003a0 <GPIO_Init+0x1c4>)
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	687a      	ldr	r2, [r7, #4]
 80002d6:	7912      	ldrb	r2, [r2, #4]
 80002d8:	4611      	mov	r1, r2
 80002da:	2201      	movs	r2, #1
 80002dc:	408a      	lsls	r2, r1
 80002de:	43d2      	mvns	r2, r2
 80002e0:	4611      	mov	r1, r2
 80002e2:	4a2f      	ldr	r2, [pc, #188]	@ (80003a0 <GPIO_Init+0x1c4>)
 80002e4:	400b      	ands	r3, r1
 80002e6:	60d3      	str	r3, [r2, #12]
 80002e8:	e019      	b.n	800031e <GPIO_Init+0x142>

		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	795b      	ldrb	r3, [r3, #5]
 80002ee:	2b06      	cmp	r3, #6
 80002f0:	d115      	bne.n	800031e <GPIO_Init+0x142>
		{
			EXTI->FTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	@ (80003a0 <GPIO_Init+0x1c4>)
 80002f4:	68db      	ldr	r3, [r3, #12]
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	7912      	ldrb	r2, [r2, #4]
 80002fa:	4611      	mov	r1, r2
 80002fc:	2201      	movs	r2, #1
 80002fe:	408a      	lsls	r2, r1
 8000300:	4611      	mov	r1, r2
 8000302:	4a27      	ldr	r2, [pc, #156]	@ (80003a0 <GPIO_Init+0x1c4>)
 8000304:	430b      	orrs	r3, r1
 8000306:	60d3      	str	r3, [r2, #12]

			EXTI->RTSR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000308:	4b25      	ldr	r3, [pc, #148]	@ (80003a0 <GPIO_Init+0x1c4>)
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	7912      	ldrb	r2, [r2, #4]
 8000310:	4611      	mov	r1, r2
 8000312:	2201      	movs	r2, #1
 8000314:	408a      	lsls	r2, r1
 8000316:	4611      	mov	r1, r2
 8000318:	4a21      	ldr	r2, [pc, #132]	@ (80003a0 <GPIO_Init+0x1c4>)
 800031a:	430b      	orrs	r3, r1
 800031c:	6093      	str	r3, [r2, #8]
		}
	 uint8_t temp1=pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber/4;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	791b      	ldrb	r3, [r3, #4]
 8000322:	089b      	lsrs	r3, r3, #2
 8000324:	74fb      	strb	r3, [r7, #19]
	 uint8_t temp2=pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber%4;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	791b      	ldrb	r3, [r3, #4]
 800032a:	f003 0303 	and.w	r3, r3, #3
 800032e:	74bb      	strb	r3, [r7, #18]
	 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000338:	d042      	beq.n	80003c0 <GPIO_Init+0x1e4>
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a19      	ldr	r2, [pc, #100]	@ (80003a4 <GPIO_Init+0x1c8>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d02b      	beq.n	800039c <GPIO_Init+0x1c0>
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a17      	ldr	r2, [pc, #92]	@ (80003a8 <GPIO_Init+0x1cc>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d024      	beq.n	8000398 <GPIO_Init+0x1bc>
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a16      	ldr	r2, [pc, #88]	@ (80003ac <GPIO_Init+0x1d0>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d01d      	beq.n	8000394 <GPIO_Init+0x1b8>
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a14      	ldr	r2, [pc, #80]	@ (80003b0 <GPIO_Init+0x1d4>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d016      	beq.n	8000390 <GPIO_Init+0x1b4>
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a13      	ldr	r2, [pc, #76]	@ (80003b4 <GPIO_Init+0x1d8>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d00f      	beq.n	800038c <GPIO_Init+0x1b0>
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a11      	ldr	r2, [pc, #68]	@ (80003b8 <GPIO_Init+0x1dc>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d008      	beq.n	8000388 <GPIO_Init+0x1ac>
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a10      	ldr	r2, [pc, #64]	@ (80003bc <GPIO_Init+0x1e0>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d101      	bne.n	8000384 <GPIO_Init+0x1a8>
 8000380:	2307      	movs	r3, #7
 8000382:	e01e      	b.n	80003c2 <GPIO_Init+0x1e6>
 8000384:	2300      	movs	r3, #0
 8000386:	e01c      	b.n	80003c2 <GPIO_Init+0x1e6>
 8000388:	2306      	movs	r3, #6
 800038a:	e01a      	b.n	80003c2 <GPIO_Init+0x1e6>
 800038c:	2305      	movs	r3, #5
 800038e:	e018      	b.n	80003c2 <GPIO_Init+0x1e6>
 8000390:	2304      	movs	r3, #4
 8000392:	e016      	b.n	80003c2 <GPIO_Init+0x1e6>
 8000394:	2303      	movs	r3, #3
 8000396:	e014      	b.n	80003c2 <GPIO_Init+0x1e6>
 8000398:	2302      	movs	r3, #2
 800039a:	e012      	b.n	80003c2 <GPIO_Init+0x1e6>
 800039c:	2301      	movs	r3, #1
 800039e:	e010      	b.n	80003c2 <GPIO_Init+0x1e6>
 80003a0:	40010400 	.word	0x40010400
 80003a4:	48000400 	.word	0x48000400
 80003a8:	48000800 	.word	0x48000800
 80003ac:	48000c00 	.word	0x48000c00
 80003b0:	48001000 	.word	0x48001000
 80003b4:	48001400 	.word	0x48001400
 80003b8:	48001800 	.word	0x48001800
 80003bc:	48001c00 	.word	0x48001c00
 80003c0:	2300      	movs	r3, #0
 80003c2:	747b      	strb	r3, [r7, #17]
	 SYSCFG_PCLK_EN();
 80003c4:	4b5e      	ldr	r3, [pc, #376]	@ (8000540 <GPIO_Init+0x364>)
 80003c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003c8:	4a5d      	ldr	r2, [pc, #372]	@ (8000540 <GPIO_Init+0x364>)
 80003ca:	f043 0301 	orr.w	r3, r3, #1
 80003ce:	6613      	str	r3, [r2, #96]	@ 0x60
	 SYSCFG->EXTICR[temp1]=portcode << (temp2 * 4);
 80003d0:	7c7a      	ldrb	r2, [r7, #17]
 80003d2:	7cbb      	ldrb	r3, [r7, #18]
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	fa02 f103 	lsl.w	r1, r2, r3
 80003da:	4a5a      	ldr	r2, [pc, #360]	@ (8000544 <GPIO_Init+0x368>)
 80003dc:	7cfb      	ldrb	r3, [r7, #19]
 80003de:	3302      	adds	r3, #2
 80003e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 EXTI -> IMR1 |=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80003e4:	4b58      	ldr	r3, [pc, #352]	@ (8000548 <GPIO_Init+0x36c>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	7912      	ldrb	r2, [r2, #4]
 80003ec:	4611      	mov	r1, r2
 80003ee:	2201      	movs	r2, #1
 80003f0:	408a      	lsls	r2, r1
 80003f2:	4611      	mov	r1, r2
 80003f4:	4a54      	ldr	r2, [pc, #336]	@ (8000548 <GPIO_Init+0x36c>)
 80003f6:	430b      	orrs	r3, r1
 80003f8:	6013      	str	r3, [r2, #0]
	}

	temp=0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]
	temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	799b      	ldrb	r3, [r3, #6]
 8000402:	461a      	mov	r2, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	791b      	ldrb	r3, [r3, #4]
 8000408:	005b      	lsls	r3, r3, #1
 800040a:	fa02 f303 	lsl.w	r3, r2, r3
 800040e:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->OSPEEDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	689a      	ldr	r2, [r3, #8]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	791b      	ldrb	r3, [r3, #4]
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	2103      	movs	r1, #3
 800041e:	fa01 f303 	lsl.w	r3, r1, r3
 8000422:	43db      	mvns	r3, r3
 8000424:	4619      	mov	r1, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	400a      	ands	r2, r1
 800042c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	6899      	ldr	r1, [r3, #8]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	697a      	ldr	r2, [r7, #20]
 800043a:	430a      	orrs	r2, r1
 800043c:	609a      	str	r2, [r3, #8]
	temp=0;
 800043e:	2300      	movs	r3, #0
 8000440:	617b      	str	r3, [r7, #20]

	temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	79db      	ldrb	r3, [r3, #7]
 8000446:	461a      	mov	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	791b      	ldrb	r3, [r3, #4]
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	fa02 f303 	lsl.w	r3, r2, r3
 8000452:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->PUPDR &= ~(0X03 << (2* pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	68da      	ldr	r2, [r3, #12]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	791b      	ldrb	r3, [r3, #4]
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	2103      	movs	r1, #3
 8000462:	fa01 f303 	lsl.w	r3, r1, r3
 8000466:	43db      	mvns	r3, r3
 8000468:	4619      	mov	r1, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	400a      	ands	r2, r1
 8000470:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	68d9      	ldr	r1, [r3, #12]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	697a      	ldr	r2, [r7, #20]
 800047e:	430a      	orrs	r2, r1
 8000480:	60da      	str	r2, [r3, #12]
	temp=0;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]

	temp=(pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType<<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	7a1b      	ldrb	r3, [r3, #8]
 800048a:	461a      	mov	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	791b      	ldrb	r3, [r3, #4]
 8000490:	fa02 f303 	lsl.w	r3, r2, r3
 8000494:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx->OTYPER &= ~(0X01 << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	685a      	ldr	r2, [r3, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	791b      	ldrb	r3, [r3, #4]
 80004a0:	4619      	mov	r1, r3
 80004a2:	2301      	movs	r3, #1
 80004a4:	408b      	lsls	r3, r1
 80004a6:	43db      	mvns	r3, r3
 80004a8:	4619      	mov	r1, r3
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	400a      	ands	r2, r1
 80004b0:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	6859      	ldr	r1, [r3, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	697a      	ldr	r2, [r7, #20]
 80004be:	430a      	orrs	r2, r1
 80004c0:	605a      	str	r2, [r3, #4]
	temp=0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	795b      	ldrb	r3, [r3, #5]
 80004ca:	2b02      	cmp	r3, #2
 80004cc:	d132      	bne.n	8000534 <GPIO_Init+0x358>
	{
		uint32_t temp1 ,temp2;
		temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	791b      	ldrb	r3, [r3, #4]
 80004d2:	08db      	lsrs	r3, r3, #3
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	60fb      	str	r3, [r7, #12]
		temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	791b      	ldrb	r3, [r3, #4]
 80004dc:	f003 0307 	and.w	r3, r3, #7
 80004e0:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0X0f<< (4*temp2));
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	68fa      	ldr	r2, [r7, #12]
 80004e8:	3208      	adds	r2, #8
 80004ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	210f      	movs	r1, #15
 80004f4:	fa01 f303 	lsl.w	r3, r1, r3
 80004f8:	43db      	mvns	r3, r3
 80004fa:	4619      	mov	r1, r3
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4011      	ands	r1, r2
 8000502:	68fa      	ldr	r2, [r7, #12]
 8000504:	3208      	adds	r2, #8
 8000506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	68fa      	ldr	r2, [r7, #12]
 8000510:	3208      	adds	r2, #8
 8000512:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	7a5b      	ldrb	r3, [r3, #9]
 800051a:	4619      	mov	r1, r3
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	fa01 f303 	lsl.w	r3, r1, r3
 8000524:	4619      	mov	r1, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4311      	orrs	r1, r2
 800052c:	68fa      	ldr	r2, [r7, #12]
 800052e:	3208      	adds	r2, #8
 8000530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000534:	bf00      	nop
 8000536:	371c      	adds	r7, #28
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	40021000 	.word	0x40021000
 8000544:	40010000 	.word	0x40010000
 8000548:	40010400 	.word	0x40010400

0800054c <USART_PeriClockControl>:
#include "USART_driver.h"
#include "RCC_driver.h"

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000558:	78fb      	ldrb	r3, [r7, #3]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d136      	bne.n	80005cc <USART_PeriClockControl+0x80>
	{
		if(pUSARTx == USART1)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a38      	ldr	r2, [pc, #224]	@ (8000644 <USART_PeriClockControl+0xf8>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d106      	bne.n	8000574 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000566:	4b38      	ldr	r3, [pc, #224]	@ (8000648 <USART_PeriClockControl+0xfc>)
 8000568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800056a:	4a37      	ldr	r2, [pc, #220]	@ (8000648 <USART_PeriClockControl+0xfc>)
 800056c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000570:	6613      	str	r3, [r2, #96]	@ 0x60
		else if(pUSARTx == UART5)
		{
			UART5_PCLK_DI();
		}
	}
}
 8000572:	e061      	b.n	8000638 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4a35      	ldr	r2, [pc, #212]	@ (800064c <USART_PeriClockControl+0x100>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d106      	bne.n	800058a <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 800057c:	4b32      	ldr	r3, [pc, #200]	@ (8000648 <USART_PeriClockControl+0xfc>)
 800057e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000580:	4a31      	ldr	r2, [pc, #196]	@ (8000648 <USART_PeriClockControl+0xfc>)
 8000582:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000586:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000588:	e056      	b.n	8000638 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a30      	ldr	r2, [pc, #192]	@ (8000650 <USART_PeriClockControl+0x104>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d106      	bne.n	80005a0 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000592:	4b2d      	ldr	r3, [pc, #180]	@ (8000648 <USART_PeriClockControl+0xfc>)
 8000594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000596:	4a2c      	ldr	r2, [pc, #176]	@ (8000648 <USART_PeriClockControl+0xfc>)
 8000598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800059c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800059e:	e04b      	b.n	8000638 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a2c      	ldr	r2, [pc, #176]	@ (8000654 <USART_PeriClockControl+0x108>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d106      	bne.n	80005b6 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 80005a8:	4b27      	ldr	r3, [pc, #156]	@ (8000648 <USART_PeriClockControl+0xfc>)
 80005aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005ac:	4a26      	ldr	r2, [pc, #152]	@ (8000648 <USART_PeriClockControl+0xfc>)
 80005ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005b2:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80005b4:	e040      	b.n	8000638 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a27      	ldr	r2, [pc, #156]	@ (8000658 <USART_PeriClockControl+0x10c>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d13c      	bne.n	8000638 <USART_PeriClockControl+0xec>
			UART5_PCLK_EN();
 80005be:	4b22      	ldr	r3, [pc, #136]	@ (8000648 <USART_PeriClockControl+0xfc>)
 80005c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005c2:	4a21      	ldr	r2, [pc, #132]	@ (8000648 <USART_PeriClockControl+0xfc>)
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c8:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80005ca:	e035      	b.n	8000638 <USART_PeriClockControl+0xec>
		if(pUSARTx == USART1)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4a1d      	ldr	r2, [pc, #116]	@ (8000644 <USART_PeriClockControl+0xf8>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d106      	bne.n	80005e2 <USART_PeriClockControl+0x96>
			USART1_PCLK_DI();
 80005d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000648 <USART_PeriClockControl+0xfc>)
 80005d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000648 <USART_PeriClockControl+0xfc>)
 80005da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80005de:	6613      	str	r3, [r2, #96]	@ 0x60
}
 80005e0:	e02a      	b.n	8000638 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4a19      	ldr	r2, [pc, #100]	@ (800064c <USART_PeriClockControl+0x100>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d106      	bne.n	80005f8 <USART_PeriClockControl+0xac>
			USART2_PCLK_DI();
 80005ea:	4b17      	ldr	r3, [pc, #92]	@ (8000648 <USART_PeriClockControl+0xfc>)
 80005ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005ee:	4a16      	ldr	r2, [pc, #88]	@ (8000648 <USART_PeriClockControl+0xfc>)
 80005f0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80005f4:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80005f6:	e01f      	b.n	8000638 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a15      	ldr	r2, [pc, #84]	@ (8000650 <USART_PeriClockControl+0x104>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d106      	bne.n	800060e <USART_PeriClockControl+0xc2>
			USART3_PCLK_DI();
 8000600:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <USART_PeriClockControl+0xfc>)
 8000602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000604:	4a10      	ldr	r2, [pc, #64]	@ (8000648 <USART_PeriClockControl+0xfc>)
 8000606:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800060a:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800060c:	e014      	b.n	8000638 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4a10      	ldr	r2, [pc, #64]	@ (8000654 <USART_PeriClockControl+0x108>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d106      	bne.n	8000624 <USART_PeriClockControl+0xd8>
			UART4_PCLK_DI();
 8000616:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <USART_PeriClockControl+0xfc>)
 8000618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800061a:	4a0b      	ldr	r2, [pc, #44]	@ (8000648 <USART_PeriClockControl+0xfc>)
 800061c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000620:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000622:	e009      	b.n	8000638 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a0c      	ldr	r2, [pc, #48]	@ (8000658 <USART_PeriClockControl+0x10c>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d105      	bne.n	8000638 <USART_PeriClockControl+0xec>
			UART5_PCLK_DI();
 800062c:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <USART_PeriClockControl+0xfc>)
 800062e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000630:	4a05      	ldr	r2, [pc, #20]	@ (8000648 <USART_PeriClockControl+0xfc>)
 8000632:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000636:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	40013800 	.word	0x40013800
 8000648:	40021000 	.word	0x40021000
 800064c:	40004400 	.word	0x40004400
 8000650:	40004800 	.word	0x40004800
 8000654:	40004c00 	.word	0x40004c00
 8000658:	40005000 	.word	0x40005000

0800065c <USART_Init>:
}



void USART_Init(USART_Handle_t *pUSARTHandle)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
		uint32_t tempreg=0;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]

		USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2101      	movs	r1, #1
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ff6c 	bl	800054c <USART_PeriClockControl>

		if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	791b      	ldrb	r3, [r3, #4]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d104      	bne.n	8000686 <USART_Init+0x2a>
		{
			tempreg|= (1 << USART_CR1_RE);
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f043 0304 	orr.w	r3, r3, #4
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	e010      	b.n	80006a8 <USART_Init+0x4c>
		}
		else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	791b      	ldrb	r3, [r3, #4]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d104      	bne.n	8000698 <USART_Init+0x3c>
		{
			tempreg |= ( 1 << USART_CR1_TE );
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	f043 0308 	orr.w	r3, r3, #8
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	e007      	b.n	80006a8 <USART_Init+0x4c>
		}
		else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	791b      	ldrb	r3, [r3, #4]
 800069c:	2b02      	cmp	r3, #2
 800069e:	d103      	bne.n	80006a8 <USART_Init+0x4c>
		{
			tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f043 030c 	orr.w	r3, r3, #12
 80006a6:	60fb      	str	r3, [r7, #12]
		}

		tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	7b5b      	ldrb	r3, [r3, #13]
 80006ac:	031b      	lsls	r3, r3, #12
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	60fb      	str	r3, [r7, #12]

		if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	7b9b      	ldrb	r3, [r3, #14]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d104      	bne.n	80006c6 <USART_Init+0x6a>
		{
			tempreg |= ( 1 << USART_CR1_PCE);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	e00b      	b.n	80006de <USART_Init+0x82>

		}
		else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	7b9b      	ldrb	r3, [r3, #14]
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d107      	bne.n	80006de <USART_Init+0x82>
		{
		    tempreg |= ( 1 << USART_CR1_PCE);
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006d4:	60fb      	str	r3, [r7, #12]
		    tempreg |= ( 1 << USART_CR1_PS);
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006dc:	60fb      	str	r3, [r7, #12]
		}


		pUSARTHandle->pUSARTx->CR1 = tempreg;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	601a      	str	r2, [r3, #0]
		tempreg=0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
		tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	7b1b      	ldrb	r3, [r3, #12]
 80006ee:	031b      	lsls	r3, r3, #12
 80006f0:	68fa      	ldr	r2, [r7, #12]
 80006f2:	4313      	orrs	r3, r2
 80006f4:	60fb      	str	r3, [r7, #12]
		pUSARTHandle->pUSARTx->CR2 = tempreg;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	605a      	str	r2, [r3, #4]

		tempreg=0;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]


		if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	7bdb      	ldrb	r3, [r3, #15]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d104      	bne.n	8000714 <USART_Init+0xb8>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e014      	b.n	800073e <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	7bdb      	ldrb	r3, [r3, #15]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d104      	bne.n	8000726 <USART_Init+0xca>
		{
			tempreg |= ( 1 << USART_CR3_RTSE);
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	e00b      	b.n	800073e <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	7bdb      	ldrb	r3, [r3, #15]
 800072a:	2b03      	cmp	r3, #3
 800072c:	d107      	bne.n	800073e <USART_Init+0xe2>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000734:	60fb      	str	r3, [r7, #12]
			tempreg |= ( 1 << USART_CR3_RTSE);
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800073c:	60fb      	str	r3, [r7, #12]
		}

		pUSARTHandle->pUSARTx->CR3 = tempreg;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	609a      	str	r2, [r3, #8]
		pUSARTHandle->pUSARTx->BRR=0X23;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2223      	movs	r2, #35	@ 0x23
 800074c:	60da      	str	r2, [r3, #12]
	//	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <USART_SendData>:




void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b086      	sub	sp, #24
 800075a:	af00      	add	r7, sp, #0
 800075c:	60f8      	str	r0, [r7, #12]
 800075e:	60b9      	str	r1, [r7, #8]
 8000760:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

	for(uint32_t i = 0 ; i < Len; i++)
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	e031      	b.n	80007cc <USART_SendData+0x76>
	{
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000768:	bf00      	nop
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2180      	movs	r1, #128	@ 0x80
 8000770:	4618      	mov	r0, r3
 8000772:	f000 f85a 	bl	800082a <USART_GetFlagStatus>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d0f6      	beq.n	800076a <USART_SendData+0x14>

		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	7b5b      	ldrb	r3, [r3, #13]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d118      	bne.n	80007b6 <USART_SendData+0x60>
		{
			pdata = (uint16_t*) pTxBuffer;
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000796:	629a      	str	r2, [r3, #40]	@ 0x28

			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	7b9b      	ldrb	r3, [r3, #14]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d106      	bne.n	80007ae <USART_SendData+0x58>
			{
				pTxBuffer++;
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	3301      	adds	r3, #1
 80007a4:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	3301      	adds	r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	e00b      	b.n	80007c6 <USART_SendData+0x70>

			}
			else
			{
				pTxBuffer++;
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	3301      	adds	r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	e007      	b.n	80007c6 <USART_SendData+0x70>
			}
		}
		else
		{

			pUSARTHandle->pUSARTx->TDR = (*pTxBuffer  & (uint8_t)0xFF);
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	781a      	ldrb	r2, [r3, #0]
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	629a      	str	r2, [r3, #40]	@ 0x28
			pTxBuffer++;
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	3301      	adds	r3, #1
 80007c4:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	3301      	adds	r3, #1
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	697a      	ldr	r2, [r7, #20]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d3c9      	bcc.n	8000768 <USART_SendData+0x12>
		}
	}
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 80007d4:	bf00      	nop
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2140      	movs	r1, #64	@ 0x40
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 f824 	bl	800082a <USART_GetFlagStatus>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d0f6      	beq.n	80007d6 <USART_SendData+0x80>
}
 80007e8:	bf00      	nop
 80007ea:	bf00      	nop
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <USART_PeripheralControl>:
	temp2=0;

}

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
 80007fa:	460b      	mov	r3, r1
 80007fc:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80007fe:	78fb      	ldrb	r3, [r7, #3]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d106      	bne.n	8000812 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |=(1<<USART_CR1_UE);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f043 0201 	orr.w	r2, r3, #1
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
	}
}
 8000810:	e005      	b.n	800081e <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f023 0201 	bic.w	r2, r3, #1
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	601a      	str	r2, [r3, #0]
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <USART_GetFlagStatus>:


uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx,uint8_t StatusFlagName)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
 8000832:	460b      	mov	r3, r1
 8000834:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx ->ISR & StatusFlagName)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	69da      	ldr	r2, [r3, #28]
 800083a:	78fb      	ldrb	r3, [r7, #3]
 800083c:	4013      	ands	r3, r2
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <USART_GetFlagStatus+0x1c>
	{
		return SET;
 8000842:	2301      	movs	r3, #1
 8000844:	e000      	b.n	8000848 <USART_GetFlagStatus+0x1e>
	}
	return RESET;
 8000846:	2300      	movs	r3, #0
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <USART2_Init>:

USART_Handle_t usart2_handle;   // USART2 handle structure

// USART2 peripheral setup
void USART2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;                                 // Select USART2
 8000858:	4b0d      	ldr	r3, [pc, #52]	@ (8000890 <USART2_Init+0x3c>)
 800085a:	4a0e      	ldr	r2, [pc, #56]	@ (8000894 <USART2_Init+0x40>)
 800085c:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;  // Baud = 115200
 800085e:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <USART2_Init+0x3c>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000864:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE; // No HW flow ctrl
 8000866:	4b0a      	ldr	r3, [pc, #40]	@ (8000890 <USART2_Init+0x3c>)
 8000868:	2200      	movs	r2, #0
 800086a:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;        // Enable TX + RX
 800086c:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <USART2_Init+0x3c>)
 800086e:	2202      	movs	r2, #2
 8000870:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1; // 1 stop bit
 8000872:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <USART2_Init+0x3c>)
 8000874:	2200      	movs	r2, #0
 8000876:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS; // 8-bit data
 8000878:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <USART2_Init+0x3c>)
 800087a:	2200      	movs	r2, #0
 800087c:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE; // No parity
 800087e:	4b04      	ldr	r3, [pc, #16]	@ (8000890 <USART2_Init+0x3c>)
 8000880:	2200      	movs	r2, #0
 8000882:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);                                     // Apply config
 8000884:	4802      	ldr	r0, [pc, #8]	@ (8000890 <USART2_Init+0x3c>)
 8000886:	f7ff fee9 	bl	800065c <USART_Init>
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000ac 	.word	0x200000ac
 8000894:	40004400 	.word	0x40004400

08000898 <USART2_GPIOInit>:

// GPIO config for USART2: PA2 (TX) & PA3 (RX)
void USART2_GPIOInit(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart2_gpio;
	memset(&usart2_gpio,0,sizeof(usart2_gpio));                     // Clear struct
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	220c      	movs	r2, #12
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 fc41 	bl	800112c <memset>

	usart2_gpio.pGPIOx = GPIOA;                                      // Use Port A
 80008aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80008ae:	607b      	str	r3, [r7, #4]
	usart2_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;       // Alternate function
 80008b0:	2302      	movs	r3, #2
 80008b2:	727b      	strb	r3, [r7, #9]
	usart2_gpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;     // Push-pull
 80008b4:	2300      	movs	r3, #0
 80008b6:	733b      	strb	r3, [r7, #12]
	usart2_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;    // Pull-up
 80008b8:	2301      	movs	r3, #1
 80008ba:	72fb      	strb	r3, [r7, #11]
	usart2_gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;      // Fast speed
 80008bc:	2302      	movs	r3, #2
 80008be:	72bb      	strb	r3, [r7, #10]
	usart2_gpio.GPIO_PinConfig.GPIO_PinAltFunMode = 7;               // AF7 = USART2
 80008c0:	2307      	movs	r3, #7
 80008c2:	737b      	strb	r3, [r7, #13]

	GPIOA_PCLK_EN();                                                 // Enable Port A clock
 80008c4:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <USART2_GPIOInit+0x58>)
 80008c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c8:	4a09      	ldr	r2, [pc, #36]	@ (80008f0 <USART2_GPIOInit+0x58>)
 80008ca:	f043 0301 	orr.w	r3, r3, #1
 80008ce:	64d3      	str	r3, [r2, #76]	@ 0x4c

	usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;       // PA2 as TX
 80008d0:	2302      	movs	r3, #2
 80008d2:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart2_gpio);
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fc80 	bl	80001dc <GPIO_Init>

	usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;       // PA3 as RX
 80008dc:	2303      	movs	r3, #3
 80008de:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart2_gpio);
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fc7a 	bl	80001dc <GPIO_Init>
}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40021000 	.word	0x40021000

080008f4 <delay>:

// Simple delay loop
void delay()
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<500000;i++);
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	e002      	b.n	8000906 <delay+0x12>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3301      	adds	r3, #1
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a04      	ldr	r2, [pc, #16]	@ (800091c <delay+0x28>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d9f8      	bls.n	8000900 <delay+0xc>
}
 800090e:	bf00      	nop
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	0007a11f 	.word	0x0007a11f

08000920 <__io_putchar>:

// Redirect printf() to USART2
int __io_putchar(int ch)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	USART_SendData(&usart2_handle, (uint8_t*)&ch, 1);  // Send one char
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2201      	movs	r2, #1
 800092c:	4619      	mov	r1, r3
 800092e:	4804      	ldr	r0, [pc, #16]	@ (8000940 <__io_putchar+0x20>)
 8000930:	f7ff ff11 	bl	8000756 <USART_SendData>
	return(ch);
 8000934:	687b      	ldr	r3, [r7, #4]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200000ac 	.word	0x200000ac

08000944 <uart2_dma_tx_init>:

// DMA setup for USART2 TX
void uart2_dma_tx_init(void)
{
 8000944:	b598      	push	{r3, r4, r7, lr}
 8000946:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1<<0);                         // Enable DMA1 clock
 8000948:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <uart2_dma_tx_init+0x70>)
 800094a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800094c:	4a19      	ldr	r2, [pc, #100]	@ (80009b4 <uart2_dma_tx_init+0x70>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6493      	str	r3, [r2, #72]	@ 0x48

    DMA1_CSELR->CSELR &= ~(0xF << (4*(7-1)));       // Reset CH7 mapping
 8000954:	4b18      	ldr	r3, [pc, #96]	@ (80009b8 <uart2_dma_tx_init+0x74>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a17      	ldr	r2, [pc, #92]	@ (80009b8 <uart2_dma_tx_init+0x74>)
 800095a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800095e:	6013      	str	r3, [r2, #0]
    DMA1_CSELR->CSELR |=  (0x02000000);             // Map CH7 → USART2_TX
 8000960:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <uart2_dma_tx_init+0x74>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a14      	ldr	r2, [pc, #80]	@ (80009b8 <uart2_dma_tx_init+0x74>)
 8000966:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800096a:	6013      	str	r3, [r2, #0]

    DMA1_Channel7->CCR &= ~(1<<0);                  // Disable CH7 before config
 800096c:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <uart2_dma_tx_init+0x78>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a12      	ldr	r2, [pc, #72]	@ (80009bc <uart2_dma_tx_init+0x78>)
 8000972:	f023 0301 	bic.w	r3, r3, #1
 8000976:	6013      	str	r3, [r2, #0]
    DMA1_Channel7->CPAR  = (uint32_t)&USART2->TDR;  // Peripheral = USART2->TDR
 8000978:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <uart2_dma_tx_init+0x78>)
 800097a:	4a11      	ldr	r2, [pc, #68]	@ (80009c0 <uart2_dma_tx_init+0x7c>)
 800097c:	609a      	str	r2, [r3, #8]
    DMA1_Channel7->CMAR  = (uint32_t)tx_buffer;     // Memory source = tx_buffer
 800097e:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <uart2_dma_tx_init+0x78>)
 8000980:	4a10      	ldr	r2, [pc, #64]	@ (80009c4 <uart2_dma_tx_init+0x80>)
 8000982:	60da      	str	r2, [r3, #12]
    DMA1_Channel7->CNDTR = strlen((char*)tx_buffer); // Transfer length
 8000984:	4c0d      	ldr	r4, [pc, #52]	@ (80009bc <uart2_dma_tx_init+0x78>)
 8000986:	480f      	ldr	r0, [pc, #60]	@ (80009c4 <uart2_dma_tx_init+0x80>)
 8000988:	f7ff fc20 	bl	80001cc <strlen>
 800098c:	4603      	mov	r3, r0
 800098e:	6063      	str	r3, [r4, #4]
    DMA1_Channel7->CCR   = (1<<4)|(1<<7)|(1<<13);   // DIR=mem→periph, MINC=1, high priority
 8000990:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <uart2_dma_tx_init+0x78>)
 8000992:	f242 0290 	movw	r2, #8336	@ 0x2090
 8000996:	601a      	str	r2, [r3, #0]

    USART2->CR3 |= (1<<7);                          // Enable USART2 DMA TX
 8000998:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <uart2_dma_tx_init+0x84>)
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <uart2_dma_tx_init+0x84>)
 800099e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009a2:	6093      	str	r3, [r2, #8]

    DMA1_Channel7->CCR |= (1<<0);                   // Enable CH7
 80009a4:	4b05      	ldr	r3, [pc, #20]	@ (80009bc <uart2_dma_tx_init+0x78>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a04      	ldr	r2, [pc, #16]	@ (80009bc <uart2_dma_tx_init+0x78>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	bd98      	pop	{r3, r4, r7, pc}
 80009b4:	40021000 	.word	0x40021000
 80009b8:	400200a8 	.word	0x400200a8
 80009bc:	40020080 	.word	0x40020080
 80009c0:	40004428 	.word	0x40004428
 80009c4:	20000000 	.word	0x20000000
 80009c8:	40004400 	.word	0x40004400

080009cc <main>:

int main()
{
 80009cc:	b598      	push	{r3, r4, r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	USART2_GPIOInit();                              // Setup USART2 pins
 80009d0:	f7ff ff62 	bl	8000898 <USART2_GPIOInit>
	USART2_Init();                                  // Init USART2 peripheral
 80009d4:	f7ff ff3e 	bl	8000854 <USART2_Init>
	USART_PeripheralControl(USART2, ENABLE);        // Enable USART2
 80009d8:	2101      	movs	r1, #1
 80009da:	4815      	ldr	r0, [pc, #84]	@ (8000a30 <main+0x64>)
 80009dc:	f7ff ff09 	bl	80007f2 <USART_PeripheralControl>
	printf("Hello World\r\n");                      // Send msg via USART2
 80009e0:	4814      	ldr	r0, [pc, #80]	@ (8000a34 <main+0x68>)
 80009e2:	f000 fac3 	bl	8000f6c <puts>
	uart2_dma_tx_init();                            // Start DMA transfer
 80009e6:	f7ff ffad 	bl	8000944 <uart2_dma_tx_init>

	while(1)
	{
	    while((DMA1_Channel7->CNDTR) != 0);         // Wait until DMA transfer done
 80009ea:	bf00      	nop
 80009ec:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <main+0x6c>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d1fb      	bne.n	80009ec <main+0x20>

	    DMA1_Channel7->CCR &= ~(1<<0);              // Disable CH7
 80009f4:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <main+0x6c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000a38 <main+0x6c>)
 80009fa:	f023 0301 	bic.w	r3, r3, #1
 80009fe:	6013      	str	r3, [r2, #0]
	    strcpy((char*)tx_buffer, "DMA TX AGAIN\r\n"); // Update buffer
 8000a00:	4a0e      	ldr	r2, [pc, #56]	@ (8000a3c <main+0x70>)
 8000a02:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <main+0x74>)
 8000a04:	4614      	mov	r4, r2
 8000a06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a08:	c407      	stmia	r4!, {r0, r1, r2}
 8000a0a:	8023      	strh	r3, [r4, #0]
 8000a0c:	3402      	adds	r4, #2
 8000a0e:	0c1b      	lsrs	r3, r3, #16
 8000a10:	7023      	strb	r3, [r4, #0]
	    DMA1_Channel7->CNDTR = strlen((char*)tx_buffer); // Reload transfer count
 8000a12:	4c09      	ldr	r4, [pc, #36]	@ (8000a38 <main+0x6c>)
 8000a14:	4809      	ldr	r0, [pc, #36]	@ (8000a3c <main+0x70>)
 8000a16:	f7ff fbd9 	bl	80001cc <strlen>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6063      	str	r3, [r4, #4]
	    DMA1_Channel7->CCR |= (1<<0);               // Restart DMA
 8000a1e:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <main+0x6c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a05      	ldr	r2, [pc, #20]	@ (8000a38 <main+0x6c>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6013      	str	r3, [r2, #0]
	    delay();                                    // Small wait
 8000a2a:	f7ff ff63 	bl	80008f4 <delay>
	    while((DMA1_Channel7->CNDTR) != 0);         // Wait until DMA transfer done
 8000a2e:	e7dc      	b.n	80009ea <main+0x1e>
 8000a30:	40004400 	.word	0x40004400
 8000a34:	08001550 	.word	0x08001550
 8000a38:	40020080 	.word	0x40020080
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	08001560 	.word	0x08001560

08000a44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	e00a      	b.n	8000a6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a56:	f3af 8000 	nop.w
 8000a5a:	4601      	mov	r1, r0
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	1c5a      	adds	r2, r3, #1
 8000a60:	60ba      	str	r2, [r7, #8]
 8000a62:	b2ca      	uxtb	r2, r1
 8000a64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	dbf0      	blt.n	8000a56 <_read+0x12>
  }

  return len;
 8000a74:	687b      	ldr	r3, [r7, #4]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b086      	sub	sp, #24
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	60f8      	str	r0, [r7, #12]
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	e009      	b.n	8000aa4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	1c5a      	adds	r2, r3, #1
 8000a94:	60ba      	str	r2, [r7, #8]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff41 	bl	8000920 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	dbf1      	blt.n	8000a90 <_write+0x12>
  }
  return len;
 8000aac:	687b      	ldr	r3, [r7, #4]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <_close>:

int _close(int file)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ade:	605a      	str	r2, [r3, #4]
  return 0;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <_isatty>:

int _isatty(int file)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000af6:	2301      	movs	r3, #1
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b28:	4a14      	ldr	r2, [pc, #80]	@ (8000b7c <_sbrk+0x5c>)
 8000b2a:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <_sbrk+0x60>)
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b34:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <_sbrk+0x64>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	@ (8000b88 <_sbrk+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b42:	4b10      	ldr	r3, [pc, #64]	@ (8000b84 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d207      	bcs.n	8000b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b50:	f000 fb4a 	bl	80011e8 <__errno>
 8000b54:	4603      	mov	r3, r0
 8000b56:	220c      	movs	r2, #12
 8000b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	e009      	b.n	8000b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b60:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b66:	4b07      	ldr	r3, [pc, #28]	@ (8000b84 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4a05      	ldr	r2, [pc, #20]	@ (8000b84 <_sbrk+0x64>)
 8000b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b72:	68fb      	ldr	r3, [r7, #12]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20018000 	.word	0x20018000
 8000b80:	00000400 	.word	0x00000400
 8000b84:	200000d0 	.word	0x200000d0
 8000b88:	20000220 	.word	0x20000220

08000b8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b8c:	480d      	ldr	r0, [pc, #52]	@ (8000bc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b90:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	@ (8000bcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd0 <LoopForever+0xe>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd8 <LoopForever+0x16>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000bba:	f000 fb1b 	bl	80011f4 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000bbe:	f7ff ff05 	bl	80009cc <main>

08000bc2 <LoopForever>:

LoopForever:
  b LoopForever
 8000bc2:	e7fe      	b.n	8000bc2 <LoopForever>
  ldr   r0, =_estack
 8000bc4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000bd0:	08001580 	.word	0x08001580
  ldr r2, =_sbss
 8000bd4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000bd8:	20000220 	.word	0x20000220

08000bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_2_IRQHandler>
	...

08000be0 <sbrk_aligned>:
 8000be0:	b570      	push	{r4, r5, r6, lr}
 8000be2:	4e0f      	ldr	r6, [pc, #60]	@ (8000c20 <sbrk_aligned+0x40>)
 8000be4:	460c      	mov	r4, r1
 8000be6:	6831      	ldr	r1, [r6, #0]
 8000be8:	4605      	mov	r5, r0
 8000bea:	b911      	cbnz	r1, 8000bf2 <sbrk_aligned+0x12>
 8000bec:	f000 fada 	bl	80011a4 <_sbrk_r>
 8000bf0:	6030      	str	r0, [r6, #0]
 8000bf2:	4621      	mov	r1, r4
 8000bf4:	4628      	mov	r0, r5
 8000bf6:	f000 fad5 	bl	80011a4 <_sbrk_r>
 8000bfa:	1c43      	adds	r3, r0, #1
 8000bfc:	d103      	bne.n	8000c06 <sbrk_aligned+0x26>
 8000bfe:	f04f 34ff 	mov.w	r4, #4294967295
 8000c02:	4620      	mov	r0, r4
 8000c04:	bd70      	pop	{r4, r5, r6, pc}
 8000c06:	1cc4      	adds	r4, r0, #3
 8000c08:	f024 0403 	bic.w	r4, r4, #3
 8000c0c:	42a0      	cmp	r0, r4
 8000c0e:	d0f8      	beq.n	8000c02 <sbrk_aligned+0x22>
 8000c10:	1a21      	subs	r1, r4, r0
 8000c12:	4628      	mov	r0, r5
 8000c14:	f000 fac6 	bl	80011a4 <_sbrk_r>
 8000c18:	3001      	adds	r0, #1
 8000c1a:	d1f2      	bne.n	8000c02 <sbrk_aligned+0x22>
 8000c1c:	e7ef      	b.n	8000bfe <sbrk_aligned+0x1e>
 8000c1e:	bf00      	nop
 8000c20:	200000d4 	.word	0x200000d4

08000c24 <_malloc_r>:
 8000c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c28:	1ccd      	adds	r5, r1, #3
 8000c2a:	f025 0503 	bic.w	r5, r5, #3
 8000c2e:	3508      	adds	r5, #8
 8000c30:	2d0c      	cmp	r5, #12
 8000c32:	bf38      	it	cc
 8000c34:	250c      	movcc	r5, #12
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	4606      	mov	r6, r0
 8000c3a:	db01      	blt.n	8000c40 <_malloc_r+0x1c>
 8000c3c:	42a9      	cmp	r1, r5
 8000c3e:	d904      	bls.n	8000c4a <_malloc_r+0x26>
 8000c40:	230c      	movs	r3, #12
 8000c42:	6033      	str	r3, [r6, #0]
 8000c44:	2000      	movs	r0, #0
 8000c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d20 <_malloc_r+0xfc>
 8000c4e:	f000 f869 	bl	8000d24 <__malloc_lock>
 8000c52:	f8d8 3000 	ldr.w	r3, [r8]
 8000c56:	461c      	mov	r4, r3
 8000c58:	bb44      	cbnz	r4, 8000cac <_malloc_r+0x88>
 8000c5a:	4629      	mov	r1, r5
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	f7ff ffbf 	bl	8000be0 <sbrk_aligned>
 8000c62:	1c43      	adds	r3, r0, #1
 8000c64:	4604      	mov	r4, r0
 8000c66:	d158      	bne.n	8000d1a <_malloc_r+0xf6>
 8000c68:	f8d8 4000 	ldr.w	r4, [r8]
 8000c6c:	4627      	mov	r7, r4
 8000c6e:	2f00      	cmp	r7, #0
 8000c70:	d143      	bne.n	8000cfa <_malloc_r+0xd6>
 8000c72:	2c00      	cmp	r4, #0
 8000c74:	d04b      	beq.n	8000d0e <_malloc_r+0xea>
 8000c76:	6823      	ldr	r3, [r4, #0]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	eb04 0903 	add.w	r9, r4, r3
 8000c80:	f000 fa90 	bl	80011a4 <_sbrk_r>
 8000c84:	4581      	cmp	r9, r0
 8000c86:	d142      	bne.n	8000d0e <_malloc_r+0xea>
 8000c88:	6821      	ldr	r1, [r4, #0]
 8000c8a:	1a6d      	subs	r5, r5, r1
 8000c8c:	4629      	mov	r1, r5
 8000c8e:	4630      	mov	r0, r6
 8000c90:	f7ff ffa6 	bl	8000be0 <sbrk_aligned>
 8000c94:	3001      	adds	r0, #1
 8000c96:	d03a      	beq.n	8000d0e <_malloc_r+0xea>
 8000c98:	6823      	ldr	r3, [r4, #0]
 8000c9a:	442b      	add	r3, r5
 8000c9c:	6023      	str	r3, [r4, #0]
 8000c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	bb62      	cbnz	r2, 8000d00 <_malloc_r+0xdc>
 8000ca6:	f8c8 7000 	str.w	r7, [r8]
 8000caa:	e00f      	b.n	8000ccc <_malloc_r+0xa8>
 8000cac:	6822      	ldr	r2, [r4, #0]
 8000cae:	1b52      	subs	r2, r2, r5
 8000cb0:	d420      	bmi.n	8000cf4 <_malloc_r+0xd0>
 8000cb2:	2a0b      	cmp	r2, #11
 8000cb4:	d917      	bls.n	8000ce6 <_malloc_r+0xc2>
 8000cb6:	1961      	adds	r1, r4, r5
 8000cb8:	42a3      	cmp	r3, r4
 8000cba:	6025      	str	r5, [r4, #0]
 8000cbc:	bf18      	it	ne
 8000cbe:	6059      	strne	r1, [r3, #4]
 8000cc0:	6863      	ldr	r3, [r4, #4]
 8000cc2:	bf08      	it	eq
 8000cc4:	f8c8 1000 	streq.w	r1, [r8]
 8000cc8:	5162      	str	r2, [r4, r5]
 8000cca:	604b      	str	r3, [r1, #4]
 8000ccc:	4630      	mov	r0, r6
 8000cce:	f000 f82f 	bl	8000d30 <__malloc_unlock>
 8000cd2:	f104 000b 	add.w	r0, r4, #11
 8000cd6:	1d23      	adds	r3, r4, #4
 8000cd8:	f020 0007 	bic.w	r0, r0, #7
 8000cdc:	1ac2      	subs	r2, r0, r3
 8000cde:	bf1c      	itt	ne
 8000ce0:	1a1b      	subne	r3, r3, r0
 8000ce2:	50a3      	strne	r3, [r4, r2]
 8000ce4:	e7af      	b.n	8000c46 <_malloc_r+0x22>
 8000ce6:	6862      	ldr	r2, [r4, #4]
 8000ce8:	42a3      	cmp	r3, r4
 8000cea:	bf0c      	ite	eq
 8000cec:	f8c8 2000 	streq.w	r2, [r8]
 8000cf0:	605a      	strne	r2, [r3, #4]
 8000cf2:	e7eb      	b.n	8000ccc <_malloc_r+0xa8>
 8000cf4:	4623      	mov	r3, r4
 8000cf6:	6864      	ldr	r4, [r4, #4]
 8000cf8:	e7ae      	b.n	8000c58 <_malloc_r+0x34>
 8000cfa:	463c      	mov	r4, r7
 8000cfc:	687f      	ldr	r7, [r7, #4]
 8000cfe:	e7b6      	b.n	8000c6e <_malloc_r+0x4a>
 8000d00:	461a      	mov	r2, r3
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	42a3      	cmp	r3, r4
 8000d06:	d1fb      	bne.n	8000d00 <_malloc_r+0xdc>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	6053      	str	r3, [r2, #4]
 8000d0c:	e7de      	b.n	8000ccc <_malloc_r+0xa8>
 8000d0e:	230c      	movs	r3, #12
 8000d10:	6033      	str	r3, [r6, #0]
 8000d12:	4630      	mov	r0, r6
 8000d14:	f000 f80c 	bl	8000d30 <__malloc_unlock>
 8000d18:	e794      	b.n	8000c44 <_malloc_r+0x20>
 8000d1a:	6005      	str	r5, [r0, #0]
 8000d1c:	e7d6      	b.n	8000ccc <_malloc_r+0xa8>
 8000d1e:	bf00      	nop
 8000d20:	200000d8 	.word	0x200000d8

08000d24 <__malloc_lock>:
 8000d24:	4801      	ldr	r0, [pc, #4]	@ (8000d2c <__malloc_lock+0x8>)
 8000d26:	f000 ba8a 	b.w	800123e <__retarget_lock_acquire_recursive>
 8000d2a:	bf00      	nop
 8000d2c:	2000021c 	.word	0x2000021c

08000d30 <__malloc_unlock>:
 8000d30:	4801      	ldr	r0, [pc, #4]	@ (8000d38 <__malloc_unlock+0x8>)
 8000d32:	f000 ba85 	b.w	8001240 <__retarget_lock_release_recursive>
 8000d36:	bf00      	nop
 8000d38:	2000021c 	.word	0x2000021c

08000d3c <std>:
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	b510      	push	{r4, lr}
 8000d40:	4604      	mov	r4, r0
 8000d42:	e9c0 3300 	strd	r3, r3, [r0]
 8000d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d4a:	6083      	str	r3, [r0, #8]
 8000d4c:	8181      	strh	r1, [r0, #12]
 8000d4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000d50:	81c2      	strh	r2, [r0, #14]
 8000d52:	6183      	str	r3, [r0, #24]
 8000d54:	4619      	mov	r1, r3
 8000d56:	2208      	movs	r2, #8
 8000d58:	305c      	adds	r0, #92	@ 0x5c
 8000d5a:	f000 f9e7 	bl	800112c <memset>
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <std+0x58>)
 8000d60:	6263      	str	r3, [r4, #36]	@ 0x24
 8000d62:	4b0d      	ldr	r3, [pc, #52]	@ (8000d98 <std+0x5c>)
 8000d64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000d66:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <std+0x60>)
 8000d68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000da0 <std+0x64>)
 8000d6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <std+0x68>)
 8000d70:	6224      	str	r4, [r4, #32]
 8000d72:	429c      	cmp	r4, r3
 8000d74:	d006      	beq.n	8000d84 <std+0x48>
 8000d76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000d7a:	4294      	cmp	r4, r2
 8000d7c:	d002      	beq.n	8000d84 <std+0x48>
 8000d7e:	33d0      	adds	r3, #208	@ 0xd0
 8000d80:	429c      	cmp	r4, r3
 8000d82:	d105      	bne.n	8000d90 <std+0x54>
 8000d84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d8c:	f000 ba56 	b.w	800123c <__retarget_lock_init_recursive>
 8000d90:	bd10      	pop	{r4, pc}
 8000d92:	bf00      	nop
 8000d94:	08000f7d 	.word	0x08000f7d
 8000d98:	08000f9f 	.word	0x08000f9f
 8000d9c:	08000fd7 	.word	0x08000fd7
 8000da0:	08000ffb 	.word	0x08000ffb
 8000da4:	200000dc 	.word	0x200000dc

08000da8 <stdio_exit_handler>:
 8000da8:	4a02      	ldr	r2, [pc, #8]	@ (8000db4 <stdio_exit_handler+0xc>)
 8000daa:	4903      	ldr	r1, [pc, #12]	@ (8000db8 <stdio_exit_handler+0x10>)
 8000dac:	4803      	ldr	r0, [pc, #12]	@ (8000dbc <stdio_exit_handler+0x14>)
 8000dae:	f000 b869 	b.w	8000e84 <_fwalk_sglue>
 8000db2:	bf00      	nop
 8000db4:	20000034 	.word	0x20000034
 8000db8:	080013e1 	.word	0x080013e1
 8000dbc:	20000044 	.word	0x20000044

08000dc0 <cleanup_stdio>:
 8000dc0:	6841      	ldr	r1, [r0, #4]
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <cleanup_stdio+0x34>)
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	b510      	push	{r4, lr}
 8000dc8:	4604      	mov	r4, r0
 8000dca:	d001      	beq.n	8000dd0 <cleanup_stdio+0x10>
 8000dcc:	f000 fb08 	bl	80013e0 <_fflush_r>
 8000dd0:	68a1      	ldr	r1, [r4, #8]
 8000dd2:	4b09      	ldr	r3, [pc, #36]	@ (8000df8 <cleanup_stdio+0x38>)
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	d002      	beq.n	8000dde <cleanup_stdio+0x1e>
 8000dd8:	4620      	mov	r0, r4
 8000dda:	f000 fb01 	bl	80013e0 <_fflush_r>
 8000dde:	68e1      	ldr	r1, [r4, #12]
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <cleanup_stdio+0x3c>)
 8000de2:	4299      	cmp	r1, r3
 8000de4:	d004      	beq.n	8000df0 <cleanup_stdio+0x30>
 8000de6:	4620      	mov	r0, r4
 8000de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dec:	f000 baf8 	b.w	80013e0 <_fflush_r>
 8000df0:	bd10      	pop	{r4, pc}
 8000df2:	bf00      	nop
 8000df4:	200000dc 	.word	0x200000dc
 8000df8:	20000144 	.word	0x20000144
 8000dfc:	200001ac 	.word	0x200001ac

08000e00 <global_stdio_init.part.0>:
 8000e00:	b510      	push	{r4, lr}
 8000e02:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <global_stdio_init.part.0+0x30>)
 8000e04:	4c0b      	ldr	r4, [pc, #44]	@ (8000e34 <global_stdio_init.part.0+0x34>)
 8000e06:	4a0c      	ldr	r2, [pc, #48]	@ (8000e38 <global_stdio_init.part.0+0x38>)
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2104      	movs	r1, #4
 8000e10:	f7ff ff94 	bl	8000d3c <std>
 8000e14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2109      	movs	r1, #9
 8000e1c:	f7ff ff8e 	bl	8000d3c <std>
 8000e20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000e24:	2202      	movs	r2, #2
 8000e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e2a:	2112      	movs	r1, #18
 8000e2c:	f7ff bf86 	b.w	8000d3c <std>
 8000e30:	20000214 	.word	0x20000214
 8000e34:	200000dc 	.word	0x200000dc
 8000e38:	08000da9 	.word	0x08000da9

08000e3c <__sfp_lock_acquire>:
 8000e3c:	4801      	ldr	r0, [pc, #4]	@ (8000e44 <__sfp_lock_acquire+0x8>)
 8000e3e:	f000 b9fe 	b.w	800123e <__retarget_lock_acquire_recursive>
 8000e42:	bf00      	nop
 8000e44:	2000021d 	.word	0x2000021d

08000e48 <__sfp_lock_release>:
 8000e48:	4801      	ldr	r0, [pc, #4]	@ (8000e50 <__sfp_lock_release+0x8>)
 8000e4a:	f000 b9f9 	b.w	8001240 <__retarget_lock_release_recursive>
 8000e4e:	bf00      	nop
 8000e50:	2000021d 	.word	0x2000021d

08000e54 <__sinit>:
 8000e54:	b510      	push	{r4, lr}
 8000e56:	4604      	mov	r4, r0
 8000e58:	f7ff fff0 	bl	8000e3c <__sfp_lock_acquire>
 8000e5c:	6a23      	ldr	r3, [r4, #32]
 8000e5e:	b11b      	cbz	r3, 8000e68 <__sinit+0x14>
 8000e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e64:	f7ff bff0 	b.w	8000e48 <__sfp_lock_release>
 8000e68:	4b04      	ldr	r3, [pc, #16]	@ (8000e7c <__sinit+0x28>)
 8000e6a:	6223      	str	r3, [r4, #32]
 8000e6c:	4b04      	ldr	r3, [pc, #16]	@ (8000e80 <__sinit+0x2c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1f5      	bne.n	8000e60 <__sinit+0xc>
 8000e74:	f7ff ffc4 	bl	8000e00 <global_stdio_init.part.0>
 8000e78:	e7f2      	b.n	8000e60 <__sinit+0xc>
 8000e7a:	bf00      	nop
 8000e7c:	08000dc1 	.word	0x08000dc1
 8000e80:	20000214 	.word	0x20000214

08000e84 <_fwalk_sglue>:
 8000e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e88:	4607      	mov	r7, r0
 8000e8a:	4688      	mov	r8, r1
 8000e8c:	4614      	mov	r4, r2
 8000e8e:	2600      	movs	r6, #0
 8000e90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e94:	f1b9 0901 	subs.w	r9, r9, #1
 8000e98:	d505      	bpl.n	8000ea6 <_fwalk_sglue+0x22>
 8000e9a:	6824      	ldr	r4, [r4, #0]
 8000e9c:	2c00      	cmp	r4, #0
 8000e9e:	d1f7      	bne.n	8000e90 <_fwalk_sglue+0xc>
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ea6:	89ab      	ldrh	r3, [r5, #12]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d907      	bls.n	8000ebc <_fwalk_sglue+0x38>
 8000eac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	d003      	beq.n	8000ebc <_fwalk_sglue+0x38>
 8000eb4:	4629      	mov	r1, r5
 8000eb6:	4638      	mov	r0, r7
 8000eb8:	47c0      	blx	r8
 8000eba:	4306      	orrs	r6, r0
 8000ebc:	3568      	adds	r5, #104	@ 0x68
 8000ebe:	e7e9      	b.n	8000e94 <_fwalk_sglue+0x10>

08000ec0 <_puts_r>:
 8000ec0:	6a03      	ldr	r3, [r0, #32]
 8000ec2:	b570      	push	{r4, r5, r6, lr}
 8000ec4:	6884      	ldr	r4, [r0, #8]
 8000ec6:	4605      	mov	r5, r0
 8000ec8:	460e      	mov	r6, r1
 8000eca:	b90b      	cbnz	r3, 8000ed0 <_puts_r+0x10>
 8000ecc:	f7ff ffc2 	bl	8000e54 <__sinit>
 8000ed0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000ed2:	07db      	lsls	r3, r3, #31
 8000ed4:	d405      	bmi.n	8000ee2 <_puts_r+0x22>
 8000ed6:	89a3      	ldrh	r3, [r4, #12]
 8000ed8:	0598      	lsls	r0, r3, #22
 8000eda:	d402      	bmi.n	8000ee2 <_puts_r+0x22>
 8000edc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000ede:	f000 f9ae 	bl	800123e <__retarget_lock_acquire_recursive>
 8000ee2:	89a3      	ldrh	r3, [r4, #12]
 8000ee4:	0719      	lsls	r1, r3, #28
 8000ee6:	d502      	bpl.n	8000eee <_puts_r+0x2e>
 8000ee8:	6923      	ldr	r3, [r4, #16]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d135      	bne.n	8000f5a <_puts_r+0x9a>
 8000eee:	4621      	mov	r1, r4
 8000ef0:	4628      	mov	r0, r5
 8000ef2:	f000 f8c5 	bl	8001080 <__swsetup_r>
 8000ef6:	b380      	cbz	r0, 8000f5a <_puts_r+0x9a>
 8000ef8:	f04f 35ff 	mov.w	r5, #4294967295
 8000efc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000efe:	07da      	lsls	r2, r3, #31
 8000f00:	d405      	bmi.n	8000f0e <_puts_r+0x4e>
 8000f02:	89a3      	ldrh	r3, [r4, #12]
 8000f04:	059b      	lsls	r3, r3, #22
 8000f06:	d402      	bmi.n	8000f0e <_puts_r+0x4e>
 8000f08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000f0a:	f000 f999 	bl	8001240 <__retarget_lock_release_recursive>
 8000f0e:	4628      	mov	r0, r5
 8000f10:	bd70      	pop	{r4, r5, r6, pc}
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	da04      	bge.n	8000f20 <_puts_r+0x60>
 8000f16:	69a2      	ldr	r2, [r4, #24]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dc17      	bgt.n	8000f4c <_puts_r+0x8c>
 8000f1c:	290a      	cmp	r1, #10
 8000f1e:	d015      	beq.n	8000f4c <_puts_r+0x8c>
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	6022      	str	r2, [r4, #0]
 8000f26:	7019      	strb	r1, [r3, #0]
 8000f28:	68a3      	ldr	r3, [r4, #8]
 8000f2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	60a3      	str	r3, [r4, #8]
 8000f32:	2900      	cmp	r1, #0
 8000f34:	d1ed      	bne.n	8000f12 <_puts_r+0x52>
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	da11      	bge.n	8000f5e <_puts_r+0x9e>
 8000f3a:	4622      	mov	r2, r4
 8000f3c:	210a      	movs	r1, #10
 8000f3e:	4628      	mov	r0, r5
 8000f40:	f000 f85f 	bl	8001002 <__swbuf_r>
 8000f44:	3001      	adds	r0, #1
 8000f46:	d0d7      	beq.n	8000ef8 <_puts_r+0x38>
 8000f48:	250a      	movs	r5, #10
 8000f4a:	e7d7      	b.n	8000efc <_puts_r+0x3c>
 8000f4c:	4622      	mov	r2, r4
 8000f4e:	4628      	mov	r0, r5
 8000f50:	f000 f857 	bl	8001002 <__swbuf_r>
 8000f54:	3001      	adds	r0, #1
 8000f56:	d1e7      	bne.n	8000f28 <_puts_r+0x68>
 8000f58:	e7ce      	b.n	8000ef8 <_puts_r+0x38>
 8000f5a:	3e01      	subs	r6, #1
 8000f5c:	e7e4      	b.n	8000f28 <_puts_r+0x68>
 8000f5e:	6823      	ldr	r3, [r4, #0]
 8000f60:	1c5a      	adds	r2, r3, #1
 8000f62:	6022      	str	r2, [r4, #0]
 8000f64:	220a      	movs	r2, #10
 8000f66:	701a      	strb	r2, [r3, #0]
 8000f68:	e7ee      	b.n	8000f48 <_puts_r+0x88>
	...

08000f6c <puts>:
 8000f6c:	4b02      	ldr	r3, [pc, #8]	@ (8000f78 <puts+0xc>)
 8000f6e:	4601      	mov	r1, r0
 8000f70:	6818      	ldr	r0, [r3, #0]
 8000f72:	f7ff bfa5 	b.w	8000ec0 <_puts_r>
 8000f76:	bf00      	nop
 8000f78:	20000040 	.word	0x20000040

08000f7c <__sread>:
 8000f7c:	b510      	push	{r4, lr}
 8000f7e:	460c      	mov	r4, r1
 8000f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f84:	f000 f8fc 	bl	8001180 <_read_r>
 8000f88:	2800      	cmp	r0, #0
 8000f8a:	bfab      	itete	ge
 8000f8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000f8e:	89a3      	ldrhlt	r3, [r4, #12]
 8000f90:	181b      	addge	r3, r3, r0
 8000f92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000f96:	bfac      	ite	ge
 8000f98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000f9a:	81a3      	strhlt	r3, [r4, #12]
 8000f9c:	bd10      	pop	{r4, pc}

08000f9e <__swrite>:
 8000f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa2:	461f      	mov	r7, r3
 8000fa4:	898b      	ldrh	r3, [r1, #12]
 8000fa6:	05db      	lsls	r3, r3, #23
 8000fa8:	4605      	mov	r5, r0
 8000faa:	460c      	mov	r4, r1
 8000fac:	4616      	mov	r6, r2
 8000fae:	d505      	bpl.n	8000fbc <__swrite+0x1e>
 8000fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f000 f8d0 	bl	800115c <_lseek_r>
 8000fbc:	89a3      	ldrh	r3, [r4, #12]
 8000fbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000fc6:	81a3      	strh	r3, [r4, #12]
 8000fc8:	4632      	mov	r2, r6
 8000fca:	463b      	mov	r3, r7
 8000fcc:	4628      	mov	r0, r5
 8000fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fd2:	f000 b8f7 	b.w	80011c4 <_write_r>

08000fd6 <__sseek>:
 8000fd6:	b510      	push	{r4, lr}
 8000fd8:	460c      	mov	r4, r1
 8000fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fde:	f000 f8bd 	bl	800115c <_lseek_r>
 8000fe2:	1c43      	adds	r3, r0, #1
 8000fe4:	89a3      	ldrh	r3, [r4, #12]
 8000fe6:	bf15      	itete	ne
 8000fe8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000fea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000fee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000ff2:	81a3      	strheq	r3, [r4, #12]
 8000ff4:	bf18      	it	ne
 8000ff6:	81a3      	strhne	r3, [r4, #12]
 8000ff8:	bd10      	pop	{r4, pc}

08000ffa <__sclose>:
 8000ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ffe:	f000 b89d 	b.w	800113c <_close_r>

08001002 <__swbuf_r>:
 8001002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001004:	460e      	mov	r6, r1
 8001006:	4614      	mov	r4, r2
 8001008:	4605      	mov	r5, r0
 800100a:	b118      	cbz	r0, 8001014 <__swbuf_r+0x12>
 800100c:	6a03      	ldr	r3, [r0, #32]
 800100e:	b90b      	cbnz	r3, 8001014 <__swbuf_r+0x12>
 8001010:	f7ff ff20 	bl	8000e54 <__sinit>
 8001014:	69a3      	ldr	r3, [r4, #24]
 8001016:	60a3      	str	r3, [r4, #8]
 8001018:	89a3      	ldrh	r3, [r4, #12]
 800101a:	071a      	lsls	r2, r3, #28
 800101c:	d501      	bpl.n	8001022 <__swbuf_r+0x20>
 800101e:	6923      	ldr	r3, [r4, #16]
 8001020:	b943      	cbnz	r3, 8001034 <__swbuf_r+0x32>
 8001022:	4621      	mov	r1, r4
 8001024:	4628      	mov	r0, r5
 8001026:	f000 f82b 	bl	8001080 <__swsetup_r>
 800102a:	b118      	cbz	r0, 8001034 <__swbuf_r+0x32>
 800102c:	f04f 37ff 	mov.w	r7, #4294967295
 8001030:	4638      	mov	r0, r7
 8001032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001034:	6823      	ldr	r3, [r4, #0]
 8001036:	6922      	ldr	r2, [r4, #16]
 8001038:	1a98      	subs	r0, r3, r2
 800103a:	6963      	ldr	r3, [r4, #20]
 800103c:	b2f6      	uxtb	r6, r6
 800103e:	4283      	cmp	r3, r0
 8001040:	4637      	mov	r7, r6
 8001042:	dc05      	bgt.n	8001050 <__swbuf_r+0x4e>
 8001044:	4621      	mov	r1, r4
 8001046:	4628      	mov	r0, r5
 8001048:	f000 f9ca 	bl	80013e0 <_fflush_r>
 800104c:	2800      	cmp	r0, #0
 800104e:	d1ed      	bne.n	800102c <__swbuf_r+0x2a>
 8001050:	68a3      	ldr	r3, [r4, #8]
 8001052:	3b01      	subs	r3, #1
 8001054:	60a3      	str	r3, [r4, #8]
 8001056:	6823      	ldr	r3, [r4, #0]
 8001058:	1c5a      	adds	r2, r3, #1
 800105a:	6022      	str	r2, [r4, #0]
 800105c:	701e      	strb	r6, [r3, #0]
 800105e:	6962      	ldr	r2, [r4, #20]
 8001060:	1c43      	adds	r3, r0, #1
 8001062:	429a      	cmp	r2, r3
 8001064:	d004      	beq.n	8001070 <__swbuf_r+0x6e>
 8001066:	89a3      	ldrh	r3, [r4, #12]
 8001068:	07db      	lsls	r3, r3, #31
 800106a:	d5e1      	bpl.n	8001030 <__swbuf_r+0x2e>
 800106c:	2e0a      	cmp	r6, #10
 800106e:	d1df      	bne.n	8001030 <__swbuf_r+0x2e>
 8001070:	4621      	mov	r1, r4
 8001072:	4628      	mov	r0, r5
 8001074:	f000 f9b4 	bl	80013e0 <_fflush_r>
 8001078:	2800      	cmp	r0, #0
 800107a:	d0d9      	beq.n	8001030 <__swbuf_r+0x2e>
 800107c:	e7d6      	b.n	800102c <__swbuf_r+0x2a>
	...

08001080 <__swsetup_r>:
 8001080:	b538      	push	{r3, r4, r5, lr}
 8001082:	4b29      	ldr	r3, [pc, #164]	@ (8001128 <__swsetup_r+0xa8>)
 8001084:	4605      	mov	r5, r0
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	460c      	mov	r4, r1
 800108a:	b118      	cbz	r0, 8001094 <__swsetup_r+0x14>
 800108c:	6a03      	ldr	r3, [r0, #32]
 800108e:	b90b      	cbnz	r3, 8001094 <__swsetup_r+0x14>
 8001090:	f7ff fee0 	bl	8000e54 <__sinit>
 8001094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001098:	0719      	lsls	r1, r3, #28
 800109a:	d422      	bmi.n	80010e2 <__swsetup_r+0x62>
 800109c:	06da      	lsls	r2, r3, #27
 800109e:	d407      	bmi.n	80010b0 <__swsetup_r+0x30>
 80010a0:	2209      	movs	r2, #9
 80010a2:	602a      	str	r2, [r5, #0]
 80010a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010a8:	81a3      	strh	r3, [r4, #12]
 80010aa:	f04f 30ff 	mov.w	r0, #4294967295
 80010ae:	e033      	b.n	8001118 <__swsetup_r+0x98>
 80010b0:	0758      	lsls	r0, r3, #29
 80010b2:	d512      	bpl.n	80010da <__swsetup_r+0x5a>
 80010b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80010b6:	b141      	cbz	r1, 80010ca <__swsetup_r+0x4a>
 80010b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80010bc:	4299      	cmp	r1, r3
 80010be:	d002      	beq.n	80010c6 <__swsetup_r+0x46>
 80010c0:	4628      	mov	r0, r5
 80010c2:	f000 f8bf 	bl	8001244 <_free_r>
 80010c6:	2300      	movs	r3, #0
 80010c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80010ca:	89a3      	ldrh	r3, [r4, #12]
 80010cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80010d0:	81a3      	strh	r3, [r4, #12]
 80010d2:	2300      	movs	r3, #0
 80010d4:	6063      	str	r3, [r4, #4]
 80010d6:	6923      	ldr	r3, [r4, #16]
 80010d8:	6023      	str	r3, [r4, #0]
 80010da:	89a3      	ldrh	r3, [r4, #12]
 80010dc:	f043 0308 	orr.w	r3, r3, #8
 80010e0:	81a3      	strh	r3, [r4, #12]
 80010e2:	6923      	ldr	r3, [r4, #16]
 80010e4:	b94b      	cbnz	r3, 80010fa <__swsetup_r+0x7a>
 80010e6:	89a3      	ldrh	r3, [r4, #12]
 80010e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80010ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010f0:	d003      	beq.n	80010fa <__swsetup_r+0x7a>
 80010f2:	4621      	mov	r1, r4
 80010f4:	4628      	mov	r0, r5
 80010f6:	f000 f9c1 	bl	800147c <__smakebuf_r>
 80010fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010fe:	f013 0201 	ands.w	r2, r3, #1
 8001102:	d00a      	beq.n	800111a <__swsetup_r+0x9a>
 8001104:	2200      	movs	r2, #0
 8001106:	60a2      	str	r2, [r4, #8]
 8001108:	6962      	ldr	r2, [r4, #20]
 800110a:	4252      	negs	r2, r2
 800110c:	61a2      	str	r2, [r4, #24]
 800110e:	6922      	ldr	r2, [r4, #16]
 8001110:	b942      	cbnz	r2, 8001124 <__swsetup_r+0xa4>
 8001112:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001116:	d1c5      	bne.n	80010a4 <__swsetup_r+0x24>
 8001118:	bd38      	pop	{r3, r4, r5, pc}
 800111a:	0799      	lsls	r1, r3, #30
 800111c:	bf58      	it	pl
 800111e:	6962      	ldrpl	r2, [r4, #20]
 8001120:	60a2      	str	r2, [r4, #8]
 8001122:	e7f4      	b.n	800110e <__swsetup_r+0x8e>
 8001124:	2000      	movs	r0, #0
 8001126:	e7f7      	b.n	8001118 <__swsetup_r+0x98>
 8001128:	20000040 	.word	0x20000040

0800112c <memset>:
 800112c:	4402      	add	r2, r0
 800112e:	4603      	mov	r3, r0
 8001130:	4293      	cmp	r3, r2
 8001132:	d100      	bne.n	8001136 <memset+0xa>
 8001134:	4770      	bx	lr
 8001136:	f803 1b01 	strb.w	r1, [r3], #1
 800113a:	e7f9      	b.n	8001130 <memset+0x4>

0800113c <_close_r>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	4d06      	ldr	r5, [pc, #24]	@ (8001158 <_close_r+0x1c>)
 8001140:	2300      	movs	r3, #0
 8001142:	4604      	mov	r4, r0
 8001144:	4608      	mov	r0, r1
 8001146:	602b      	str	r3, [r5, #0]
 8001148:	f7ff fcb5 	bl	8000ab6 <_close>
 800114c:	1c43      	adds	r3, r0, #1
 800114e:	d102      	bne.n	8001156 <_close_r+0x1a>
 8001150:	682b      	ldr	r3, [r5, #0]
 8001152:	b103      	cbz	r3, 8001156 <_close_r+0x1a>
 8001154:	6023      	str	r3, [r4, #0]
 8001156:	bd38      	pop	{r3, r4, r5, pc}
 8001158:	20000218 	.word	0x20000218

0800115c <_lseek_r>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	4d07      	ldr	r5, [pc, #28]	@ (800117c <_lseek_r+0x20>)
 8001160:	4604      	mov	r4, r0
 8001162:	4608      	mov	r0, r1
 8001164:	4611      	mov	r1, r2
 8001166:	2200      	movs	r2, #0
 8001168:	602a      	str	r2, [r5, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	f7ff fcca 	bl	8000b04 <_lseek>
 8001170:	1c43      	adds	r3, r0, #1
 8001172:	d102      	bne.n	800117a <_lseek_r+0x1e>
 8001174:	682b      	ldr	r3, [r5, #0]
 8001176:	b103      	cbz	r3, 800117a <_lseek_r+0x1e>
 8001178:	6023      	str	r3, [r4, #0]
 800117a:	bd38      	pop	{r3, r4, r5, pc}
 800117c:	20000218 	.word	0x20000218

08001180 <_read_r>:
 8001180:	b538      	push	{r3, r4, r5, lr}
 8001182:	4d07      	ldr	r5, [pc, #28]	@ (80011a0 <_read_r+0x20>)
 8001184:	4604      	mov	r4, r0
 8001186:	4608      	mov	r0, r1
 8001188:	4611      	mov	r1, r2
 800118a:	2200      	movs	r2, #0
 800118c:	602a      	str	r2, [r5, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	f7ff fc58 	bl	8000a44 <_read>
 8001194:	1c43      	adds	r3, r0, #1
 8001196:	d102      	bne.n	800119e <_read_r+0x1e>
 8001198:	682b      	ldr	r3, [r5, #0]
 800119a:	b103      	cbz	r3, 800119e <_read_r+0x1e>
 800119c:	6023      	str	r3, [r4, #0]
 800119e:	bd38      	pop	{r3, r4, r5, pc}
 80011a0:	20000218 	.word	0x20000218

080011a4 <_sbrk_r>:
 80011a4:	b538      	push	{r3, r4, r5, lr}
 80011a6:	4d06      	ldr	r5, [pc, #24]	@ (80011c0 <_sbrk_r+0x1c>)
 80011a8:	2300      	movs	r3, #0
 80011aa:	4604      	mov	r4, r0
 80011ac:	4608      	mov	r0, r1
 80011ae:	602b      	str	r3, [r5, #0]
 80011b0:	f7ff fcb6 	bl	8000b20 <_sbrk>
 80011b4:	1c43      	adds	r3, r0, #1
 80011b6:	d102      	bne.n	80011be <_sbrk_r+0x1a>
 80011b8:	682b      	ldr	r3, [r5, #0]
 80011ba:	b103      	cbz	r3, 80011be <_sbrk_r+0x1a>
 80011bc:	6023      	str	r3, [r4, #0]
 80011be:	bd38      	pop	{r3, r4, r5, pc}
 80011c0:	20000218 	.word	0x20000218

080011c4 <_write_r>:
 80011c4:	b538      	push	{r3, r4, r5, lr}
 80011c6:	4d07      	ldr	r5, [pc, #28]	@ (80011e4 <_write_r+0x20>)
 80011c8:	4604      	mov	r4, r0
 80011ca:	4608      	mov	r0, r1
 80011cc:	4611      	mov	r1, r2
 80011ce:	2200      	movs	r2, #0
 80011d0:	602a      	str	r2, [r5, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	f7ff fc53 	bl	8000a7e <_write>
 80011d8:	1c43      	adds	r3, r0, #1
 80011da:	d102      	bne.n	80011e2 <_write_r+0x1e>
 80011dc:	682b      	ldr	r3, [r5, #0]
 80011de:	b103      	cbz	r3, 80011e2 <_write_r+0x1e>
 80011e0:	6023      	str	r3, [r4, #0]
 80011e2:	bd38      	pop	{r3, r4, r5, pc}
 80011e4:	20000218 	.word	0x20000218

080011e8 <__errno>:
 80011e8:	4b01      	ldr	r3, [pc, #4]	@ (80011f0 <__errno+0x8>)
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000040 	.word	0x20000040

080011f4 <__libc_init_array>:
 80011f4:	b570      	push	{r4, r5, r6, lr}
 80011f6:	4d0d      	ldr	r5, [pc, #52]	@ (800122c <__libc_init_array+0x38>)
 80011f8:	4c0d      	ldr	r4, [pc, #52]	@ (8001230 <__libc_init_array+0x3c>)
 80011fa:	1b64      	subs	r4, r4, r5
 80011fc:	10a4      	asrs	r4, r4, #2
 80011fe:	2600      	movs	r6, #0
 8001200:	42a6      	cmp	r6, r4
 8001202:	d109      	bne.n	8001218 <__libc_init_array+0x24>
 8001204:	4d0b      	ldr	r5, [pc, #44]	@ (8001234 <__libc_init_array+0x40>)
 8001206:	4c0c      	ldr	r4, [pc, #48]	@ (8001238 <__libc_init_array+0x44>)
 8001208:	f000 f996 	bl	8001538 <_init>
 800120c:	1b64      	subs	r4, r4, r5
 800120e:	10a4      	asrs	r4, r4, #2
 8001210:	2600      	movs	r6, #0
 8001212:	42a6      	cmp	r6, r4
 8001214:	d105      	bne.n	8001222 <__libc_init_array+0x2e>
 8001216:	bd70      	pop	{r4, r5, r6, pc}
 8001218:	f855 3b04 	ldr.w	r3, [r5], #4
 800121c:	4798      	blx	r3
 800121e:	3601      	adds	r6, #1
 8001220:	e7ee      	b.n	8001200 <__libc_init_array+0xc>
 8001222:	f855 3b04 	ldr.w	r3, [r5], #4
 8001226:	4798      	blx	r3
 8001228:	3601      	adds	r6, #1
 800122a:	e7f2      	b.n	8001212 <__libc_init_array+0x1e>
 800122c:	08001578 	.word	0x08001578
 8001230:	08001578 	.word	0x08001578
 8001234:	08001578 	.word	0x08001578
 8001238:	0800157c 	.word	0x0800157c

0800123c <__retarget_lock_init_recursive>:
 800123c:	4770      	bx	lr

0800123e <__retarget_lock_acquire_recursive>:
 800123e:	4770      	bx	lr

08001240 <__retarget_lock_release_recursive>:
 8001240:	4770      	bx	lr
	...

08001244 <_free_r>:
 8001244:	b538      	push	{r3, r4, r5, lr}
 8001246:	4605      	mov	r5, r0
 8001248:	2900      	cmp	r1, #0
 800124a:	d041      	beq.n	80012d0 <_free_r+0x8c>
 800124c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001250:	1f0c      	subs	r4, r1, #4
 8001252:	2b00      	cmp	r3, #0
 8001254:	bfb8      	it	lt
 8001256:	18e4      	addlt	r4, r4, r3
 8001258:	f7ff fd64 	bl	8000d24 <__malloc_lock>
 800125c:	4a1d      	ldr	r2, [pc, #116]	@ (80012d4 <_free_r+0x90>)
 800125e:	6813      	ldr	r3, [r2, #0]
 8001260:	b933      	cbnz	r3, 8001270 <_free_r+0x2c>
 8001262:	6063      	str	r3, [r4, #4]
 8001264:	6014      	str	r4, [r2, #0]
 8001266:	4628      	mov	r0, r5
 8001268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800126c:	f7ff bd60 	b.w	8000d30 <__malloc_unlock>
 8001270:	42a3      	cmp	r3, r4
 8001272:	d908      	bls.n	8001286 <_free_r+0x42>
 8001274:	6820      	ldr	r0, [r4, #0]
 8001276:	1821      	adds	r1, r4, r0
 8001278:	428b      	cmp	r3, r1
 800127a:	bf01      	itttt	eq
 800127c:	6819      	ldreq	r1, [r3, #0]
 800127e:	685b      	ldreq	r3, [r3, #4]
 8001280:	1809      	addeq	r1, r1, r0
 8001282:	6021      	streq	r1, [r4, #0]
 8001284:	e7ed      	b.n	8001262 <_free_r+0x1e>
 8001286:	461a      	mov	r2, r3
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	b10b      	cbz	r3, 8001290 <_free_r+0x4c>
 800128c:	42a3      	cmp	r3, r4
 800128e:	d9fa      	bls.n	8001286 <_free_r+0x42>
 8001290:	6811      	ldr	r1, [r2, #0]
 8001292:	1850      	adds	r0, r2, r1
 8001294:	42a0      	cmp	r0, r4
 8001296:	d10b      	bne.n	80012b0 <_free_r+0x6c>
 8001298:	6820      	ldr	r0, [r4, #0]
 800129a:	4401      	add	r1, r0
 800129c:	1850      	adds	r0, r2, r1
 800129e:	4283      	cmp	r3, r0
 80012a0:	6011      	str	r1, [r2, #0]
 80012a2:	d1e0      	bne.n	8001266 <_free_r+0x22>
 80012a4:	6818      	ldr	r0, [r3, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	6053      	str	r3, [r2, #4]
 80012aa:	4408      	add	r0, r1
 80012ac:	6010      	str	r0, [r2, #0]
 80012ae:	e7da      	b.n	8001266 <_free_r+0x22>
 80012b0:	d902      	bls.n	80012b8 <_free_r+0x74>
 80012b2:	230c      	movs	r3, #12
 80012b4:	602b      	str	r3, [r5, #0]
 80012b6:	e7d6      	b.n	8001266 <_free_r+0x22>
 80012b8:	6820      	ldr	r0, [r4, #0]
 80012ba:	1821      	adds	r1, r4, r0
 80012bc:	428b      	cmp	r3, r1
 80012be:	bf04      	itt	eq
 80012c0:	6819      	ldreq	r1, [r3, #0]
 80012c2:	685b      	ldreq	r3, [r3, #4]
 80012c4:	6063      	str	r3, [r4, #4]
 80012c6:	bf04      	itt	eq
 80012c8:	1809      	addeq	r1, r1, r0
 80012ca:	6021      	streq	r1, [r4, #0]
 80012cc:	6054      	str	r4, [r2, #4]
 80012ce:	e7ca      	b.n	8001266 <_free_r+0x22>
 80012d0:	bd38      	pop	{r3, r4, r5, pc}
 80012d2:	bf00      	nop
 80012d4:	200000d8 	.word	0x200000d8

080012d8 <__sflush_r>:
 80012d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80012dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012e0:	0716      	lsls	r6, r2, #28
 80012e2:	4605      	mov	r5, r0
 80012e4:	460c      	mov	r4, r1
 80012e6:	d454      	bmi.n	8001392 <__sflush_r+0xba>
 80012e8:	684b      	ldr	r3, [r1, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	dc02      	bgt.n	80012f4 <__sflush_r+0x1c>
 80012ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	dd48      	ble.n	8001386 <__sflush_r+0xae>
 80012f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80012f6:	2e00      	cmp	r6, #0
 80012f8:	d045      	beq.n	8001386 <__sflush_r+0xae>
 80012fa:	2300      	movs	r3, #0
 80012fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001300:	682f      	ldr	r7, [r5, #0]
 8001302:	6a21      	ldr	r1, [r4, #32]
 8001304:	602b      	str	r3, [r5, #0]
 8001306:	d030      	beq.n	800136a <__sflush_r+0x92>
 8001308:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800130a:	89a3      	ldrh	r3, [r4, #12]
 800130c:	0759      	lsls	r1, r3, #29
 800130e:	d505      	bpl.n	800131c <__sflush_r+0x44>
 8001310:	6863      	ldr	r3, [r4, #4]
 8001312:	1ad2      	subs	r2, r2, r3
 8001314:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001316:	b10b      	cbz	r3, 800131c <__sflush_r+0x44>
 8001318:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800131a:	1ad2      	subs	r2, r2, r3
 800131c:	2300      	movs	r3, #0
 800131e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001320:	6a21      	ldr	r1, [r4, #32]
 8001322:	4628      	mov	r0, r5
 8001324:	47b0      	blx	r6
 8001326:	1c43      	adds	r3, r0, #1
 8001328:	89a3      	ldrh	r3, [r4, #12]
 800132a:	d106      	bne.n	800133a <__sflush_r+0x62>
 800132c:	6829      	ldr	r1, [r5, #0]
 800132e:	291d      	cmp	r1, #29
 8001330:	d82b      	bhi.n	800138a <__sflush_r+0xb2>
 8001332:	4a2a      	ldr	r2, [pc, #168]	@ (80013dc <__sflush_r+0x104>)
 8001334:	40ca      	lsrs	r2, r1
 8001336:	07d6      	lsls	r6, r2, #31
 8001338:	d527      	bpl.n	800138a <__sflush_r+0xb2>
 800133a:	2200      	movs	r2, #0
 800133c:	6062      	str	r2, [r4, #4]
 800133e:	04d9      	lsls	r1, r3, #19
 8001340:	6922      	ldr	r2, [r4, #16]
 8001342:	6022      	str	r2, [r4, #0]
 8001344:	d504      	bpl.n	8001350 <__sflush_r+0x78>
 8001346:	1c42      	adds	r2, r0, #1
 8001348:	d101      	bne.n	800134e <__sflush_r+0x76>
 800134a:	682b      	ldr	r3, [r5, #0]
 800134c:	b903      	cbnz	r3, 8001350 <__sflush_r+0x78>
 800134e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001350:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001352:	602f      	str	r7, [r5, #0]
 8001354:	b1b9      	cbz	r1, 8001386 <__sflush_r+0xae>
 8001356:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800135a:	4299      	cmp	r1, r3
 800135c:	d002      	beq.n	8001364 <__sflush_r+0x8c>
 800135e:	4628      	mov	r0, r5
 8001360:	f7ff ff70 	bl	8001244 <_free_r>
 8001364:	2300      	movs	r3, #0
 8001366:	6363      	str	r3, [r4, #52]	@ 0x34
 8001368:	e00d      	b.n	8001386 <__sflush_r+0xae>
 800136a:	2301      	movs	r3, #1
 800136c:	4628      	mov	r0, r5
 800136e:	47b0      	blx	r6
 8001370:	4602      	mov	r2, r0
 8001372:	1c50      	adds	r0, r2, #1
 8001374:	d1c9      	bne.n	800130a <__sflush_r+0x32>
 8001376:	682b      	ldr	r3, [r5, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0c6      	beq.n	800130a <__sflush_r+0x32>
 800137c:	2b1d      	cmp	r3, #29
 800137e:	d001      	beq.n	8001384 <__sflush_r+0xac>
 8001380:	2b16      	cmp	r3, #22
 8001382:	d11e      	bne.n	80013c2 <__sflush_r+0xea>
 8001384:	602f      	str	r7, [r5, #0]
 8001386:	2000      	movs	r0, #0
 8001388:	e022      	b.n	80013d0 <__sflush_r+0xf8>
 800138a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800138e:	b21b      	sxth	r3, r3
 8001390:	e01b      	b.n	80013ca <__sflush_r+0xf2>
 8001392:	690f      	ldr	r7, [r1, #16]
 8001394:	2f00      	cmp	r7, #0
 8001396:	d0f6      	beq.n	8001386 <__sflush_r+0xae>
 8001398:	0793      	lsls	r3, r2, #30
 800139a:	680e      	ldr	r6, [r1, #0]
 800139c:	bf08      	it	eq
 800139e:	694b      	ldreq	r3, [r1, #20]
 80013a0:	600f      	str	r7, [r1, #0]
 80013a2:	bf18      	it	ne
 80013a4:	2300      	movne	r3, #0
 80013a6:	eba6 0807 	sub.w	r8, r6, r7
 80013aa:	608b      	str	r3, [r1, #8]
 80013ac:	f1b8 0f00 	cmp.w	r8, #0
 80013b0:	dde9      	ble.n	8001386 <__sflush_r+0xae>
 80013b2:	6a21      	ldr	r1, [r4, #32]
 80013b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80013b6:	4643      	mov	r3, r8
 80013b8:	463a      	mov	r2, r7
 80013ba:	4628      	mov	r0, r5
 80013bc:	47b0      	blx	r6
 80013be:	2800      	cmp	r0, #0
 80013c0:	dc08      	bgt.n	80013d4 <__sflush_r+0xfc>
 80013c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013ca:	81a3      	strh	r3, [r4, #12]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013d4:	4407      	add	r7, r0
 80013d6:	eba8 0800 	sub.w	r8, r8, r0
 80013da:	e7e7      	b.n	80013ac <__sflush_r+0xd4>
 80013dc:	20400001 	.word	0x20400001

080013e0 <_fflush_r>:
 80013e0:	b538      	push	{r3, r4, r5, lr}
 80013e2:	690b      	ldr	r3, [r1, #16]
 80013e4:	4605      	mov	r5, r0
 80013e6:	460c      	mov	r4, r1
 80013e8:	b913      	cbnz	r3, 80013f0 <_fflush_r+0x10>
 80013ea:	2500      	movs	r5, #0
 80013ec:	4628      	mov	r0, r5
 80013ee:	bd38      	pop	{r3, r4, r5, pc}
 80013f0:	b118      	cbz	r0, 80013fa <_fflush_r+0x1a>
 80013f2:	6a03      	ldr	r3, [r0, #32]
 80013f4:	b90b      	cbnz	r3, 80013fa <_fflush_r+0x1a>
 80013f6:	f7ff fd2d 	bl	8000e54 <__sinit>
 80013fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f3      	beq.n	80013ea <_fflush_r+0xa>
 8001402:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001404:	07d0      	lsls	r0, r2, #31
 8001406:	d404      	bmi.n	8001412 <_fflush_r+0x32>
 8001408:	0599      	lsls	r1, r3, #22
 800140a:	d402      	bmi.n	8001412 <_fflush_r+0x32>
 800140c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800140e:	f7ff ff16 	bl	800123e <__retarget_lock_acquire_recursive>
 8001412:	4628      	mov	r0, r5
 8001414:	4621      	mov	r1, r4
 8001416:	f7ff ff5f 	bl	80012d8 <__sflush_r>
 800141a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800141c:	07da      	lsls	r2, r3, #31
 800141e:	4605      	mov	r5, r0
 8001420:	d4e4      	bmi.n	80013ec <_fflush_r+0xc>
 8001422:	89a3      	ldrh	r3, [r4, #12]
 8001424:	059b      	lsls	r3, r3, #22
 8001426:	d4e1      	bmi.n	80013ec <_fflush_r+0xc>
 8001428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800142a:	f7ff ff09 	bl	8001240 <__retarget_lock_release_recursive>
 800142e:	e7dd      	b.n	80013ec <_fflush_r+0xc>

08001430 <__swhatbuf_r>:
 8001430:	b570      	push	{r4, r5, r6, lr}
 8001432:	460c      	mov	r4, r1
 8001434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001438:	2900      	cmp	r1, #0
 800143a:	b096      	sub	sp, #88	@ 0x58
 800143c:	4615      	mov	r5, r2
 800143e:	461e      	mov	r6, r3
 8001440:	da0d      	bge.n	800145e <__swhatbuf_r+0x2e>
 8001442:	89a3      	ldrh	r3, [r4, #12]
 8001444:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001448:	f04f 0100 	mov.w	r1, #0
 800144c:	bf14      	ite	ne
 800144e:	2340      	movne	r3, #64	@ 0x40
 8001450:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001454:	2000      	movs	r0, #0
 8001456:	6031      	str	r1, [r6, #0]
 8001458:	602b      	str	r3, [r5, #0]
 800145a:	b016      	add	sp, #88	@ 0x58
 800145c:	bd70      	pop	{r4, r5, r6, pc}
 800145e:	466a      	mov	r2, sp
 8001460:	f000 f848 	bl	80014f4 <_fstat_r>
 8001464:	2800      	cmp	r0, #0
 8001466:	dbec      	blt.n	8001442 <__swhatbuf_r+0x12>
 8001468:	9901      	ldr	r1, [sp, #4]
 800146a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800146e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001472:	4259      	negs	r1, r3
 8001474:	4159      	adcs	r1, r3
 8001476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800147a:	e7eb      	b.n	8001454 <__swhatbuf_r+0x24>

0800147c <__smakebuf_r>:
 800147c:	898b      	ldrh	r3, [r1, #12]
 800147e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001480:	079d      	lsls	r5, r3, #30
 8001482:	4606      	mov	r6, r0
 8001484:	460c      	mov	r4, r1
 8001486:	d507      	bpl.n	8001498 <__smakebuf_r+0x1c>
 8001488:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800148c:	6023      	str	r3, [r4, #0]
 800148e:	6123      	str	r3, [r4, #16]
 8001490:	2301      	movs	r3, #1
 8001492:	6163      	str	r3, [r4, #20]
 8001494:	b003      	add	sp, #12
 8001496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001498:	ab01      	add	r3, sp, #4
 800149a:	466a      	mov	r2, sp
 800149c:	f7ff ffc8 	bl	8001430 <__swhatbuf_r>
 80014a0:	9f00      	ldr	r7, [sp, #0]
 80014a2:	4605      	mov	r5, r0
 80014a4:	4639      	mov	r1, r7
 80014a6:	4630      	mov	r0, r6
 80014a8:	f7ff fbbc 	bl	8000c24 <_malloc_r>
 80014ac:	b948      	cbnz	r0, 80014c2 <__smakebuf_r+0x46>
 80014ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014b2:	059a      	lsls	r2, r3, #22
 80014b4:	d4ee      	bmi.n	8001494 <__smakebuf_r+0x18>
 80014b6:	f023 0303 	bic.w	r3, r3, #3
 80014ba:	f043 0302 	orr.w	r3, r3, #2
 80014be:	81a3      	strh	r3, [r4, #12]
 80014c0:	e7e2      	b.n	8001488 <__smakebuf_r+0xc>
 80014c2:	89a3      	ldrh	r3, [r4, #12]
 80014c4:	6020      	str	r0, [r4, #0]
 80014c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014ca:	81a3      	strh	r3, [r4, #12]
 80014cc:	9b01      	ldr	r3, [sp, #4]
 80014ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80014d2:	b15b      	cbz	r3, 80014ec <__smakebuf_r+0x70>
 80014d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014d8:	4630      	mov	r0, r6
 80014da:	f000 f81d 	bl	8001518 <_isatty_r>
 80014de:	b128      	cbz	r0, 80014ec <__smakebuf_r+0x70>
 80014e0:	89a3      	ldrh	r3, [r4, #12]
 80014e2:	f023 0303 	bic.w	r3, r3, #3
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	81a3      	strh	r3, [r4, #12]
 80014ec:	89a3      	ldrh	r3, [r4, #12]
 80014ee:	431d      	orrs	r5, r3
 80014f0:	81a5      	strh	r5, [r4, #12]
 80014f2:	e7cf      	b.n	8001494 <__smakebuf_r+0x18>

080014f4 <_fstat_r>:
 80014f4:	b538      	push	{r3, r4, r5, lr}
 80014f6:	4d07      	ldr	r5, [pc, #28]	@ (8001514 <_fstat_r+0x20>)
 80014f8:	2300      	movs	r3, #0
 80014fa:	4604      	mov	r4, r0
 80014fc:	4608      	mov	r0, r1
 80014fe:	4611      	mov	r1, r2
 8001500:	602b      	str	r3, [r5, #0]
 8001502:	f7ff fae4 	bl	8000ace <_fstat>
 8001506:	1c43      	adds	r3, r0, #1
 8001508:	d102      	bne.n	8001510 <_fstat_r+0x1c>
 800150a:	682b      	ldr	r3, [r5, #0]
 800150c:	b103      	cbz	r3, 8001510 <_fstat_r+0x1c>
 800150e:	6023      	str	r3, [r4, #0]
 8001510:	bd38      	pop	{r3, r4, r5, pc}
 8001512:	bf00      	nop
 8001514:	20000218 	.word	0x20000218

08001518 <_isatty_r>:
 8001518:	b538      	push	{r3, r4, r5, lr}
 800151a:	4d06      	ldr	r5, [pc, #24]	@ (8001534 <_isatty_r+0x1c>)
 800151c:	2300      	movs	r3, #0
 800151e:	4604      	mov	r4, r0
 8001520:	4608      	mov	r0, r1
 8001522:	602b      	str	r3, [r5, #0]
 8001524:	f7ff fae3 	bl	8000aee <_isatty>
 8001528:	1c43      	adds	r3, r0, #1
 800152a:	d102      	bne.n	8001532 <_isatty_r+0x1a>
 800152c:	682b      	ldr	r3, [r5, #0]
 800152e:	b103      	cbz	r3, 8001532 <_isatty_r+0x1a>
 8001530:	6023      	str	r3, [r4, #0]
 8001532:	bd38      	pop	{r3, r4, r5, pc}
 8001534:	20000218 	.word	0x20000218

08001538 <_init>:
 8001538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153a:	bf00      	nop
 800153c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800153e:	bc08      	pop	{r3}
 8001540:	469e      	mov	lr, r3
 8001542:	4770      	bx	lr

08001544 <_fini>:
 8001544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001546:	bf00      	nop
 8001548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800154a:	bc08      	pop	{r3}
 800154c:	469e      	mov	lr, r3
 800154e:	4770      	bx	lr
